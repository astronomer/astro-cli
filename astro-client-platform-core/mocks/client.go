// Code generated by mockery v2.32.0. DO NOT EDIT.

package astroplatformcore_mocks

import (
	context "context"

	astroplatformcore "github.com/astronomer/astro-cli/astro-client-platform-core"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// CreateClusterWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.CreateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateClusterResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) *astroplatformcore.CreateClusterResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.CreateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClusterWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateClusterWithResponse(ctx context.Context, organizationId string, body astroplatformcore.CreateClusterRequest, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.CreateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astroplatformcore.CreateClusterRequest, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateClusterResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astroplatformcore.CreateClusterRequest, ...astroplatformcore.RequestEditorFn) *astroplatformcore.CreateClusterResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.CreateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astroplatformcore.CreateClusterRequest, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.CreateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) *astroplatformcore.CreateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.CreateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDeploymentWithResponse(ctx context.Context, organizationId string, body astroplatformcore.CreateDeploymentRequest, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.CreateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astroplatformcore.CreateDeploymentRequest, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astroplatformcore.CreateDeploymentRequest, ...astroplatformcore.RequestEditorFn) *astroplatformcore.CreateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.CreateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astroplatformcore.CreateDeploymentRequest, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.CreateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) *astroplatformcore.CreateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.CreateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceWithResponse(ctx context.Context, organizationId string, body astroplatformcore.CreateWorkspaceRequest, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.CreateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astroplatformcore.CreateWorkspaceRequest, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.CreateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astroplatformcore.CreateWorkspaceRequest, ...astroplatformcore.RequestEditorFn) *astroplatformcore.CreateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.CreateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astroplatformcore.CreateWorkspaceRequest, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteClusterWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.DeleteClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.DeleteClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.DeleteClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) *astroplatformcore.DeleteClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.DeleteClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentHibernationOverrideWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDeploymentHibernationOverrideWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.DeleteDeploymentHibernationOverrideResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.DeleteDeploymentHibernationOverrideResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.DeleteDeploymentHibernationOverrideResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) *astroplatformcore.DeleteDeploymentHibernationOverrideResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.DeleteDeploymentHibernationOverrideResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.DeleteDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.DeleteDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.DeleteDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) *astroplatformcore.DeleteDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.DeleteDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.DeleteWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.DeleteWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.DeleteWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) *astroplatformcore.DeleteWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.DeleteWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterOptionsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetClusterOptionsWithResponse(ctx context.Context, organizationId string, params *astroplatformcore.GetClusterOptionsParams, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetClusterOptionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.GetClusterOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.GetClusterOptionsParams, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetClusterOptionsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.GetClusterOptionsParams, ...astroplatformcore.RequestEditorFn) *astroplatformcore.GetClusterOptionsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.GetClusterOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astroplatformcore.GetClusterOptionsParams, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, reqEditors
func (_m *ClientWithResponsesInterface) GetClusterWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.GetClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) *astroplatformcore.GetClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.GetClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentOptionsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetDeploymentOptionsWithResponse(ctx context.Context, organizationId string, params *astroplatformcore.GetDeploymentOptionsParams, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetDeploymentOptionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.GetDeploymentOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.GetDeploymentOptionsParams, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetDeploymentOptionsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.GetDeploymentOptionsParams, ...astroplatformcore.RequestEditorFn) *astroplatformcore.GetDeploymentOptionsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.GetDeploymentOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astroplatformcore.GetDeploymentOptionsParams, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, reqEditors
func (_m *ClientWithResponsesInterface) GetDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.GetDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) *astroplatformcore.GetDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.GetDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetOrganizationWithResponse(ctx context.Context, organizationId string, params *astroplatformcore.GetOrganizationParams, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.GetOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.GetOrganizationParams, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetOrganizationResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.GetOrganizationParams, ...astroplatformcore.RequestEditorFn) *astroplatformcore.GetOrganizationResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.GetOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astroplatformcore.GetOrganizationParams, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, reqEditors
func (_m *ClientWithResponsesInterface) GetWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.GetWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.GetWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) *astroplatformcore.GetWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.GetWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClustersWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListClustersWithResponse(ctx context.Context, organizationId string, params *astroplatformcore.ListClustersParams, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.ListClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.ListClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.ListClustersParams, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.ListClustersResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.ListClustersParams, ...astroplatformcore.RequestEditorFn) *astroplatformcore.ListClustersResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.ListClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astroplatformcore.ListClustersParams, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListDeploymentsWithResponse(ctx context.Context, organizationId string, params *astroplatformcore.ListDeploymentsParams, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.ListDeploymentsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.ListDeploymentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.ListDeploymentsParams, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.ListDeploymentsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.ListDeploymentsParams, ...astroplatformcore.RequestEditorFn) *astroplatformcore.ListDeploymentsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.ListDeploymentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astroplatformcore.ListDeploymentsParams, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrganizationsWithResponse(ctx context.Context, params *astroplatformcore.ListOrganizationsParams, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.ListOrganizationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.ListOrganizationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *astroplatformcore.ListOrganizationsParams, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.ListOrganizationsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *astroplatformcore.ListOrganizationsParams, ...astroplatformcore.RequestEditorFn) *astroplatformcore.ListOrganizationsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.ListOrganizationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *astroplatformcore.ListOrganizationsParams, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspacesWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspacesWithResponse(ctx context.Context, organizationId string, params *astroplatformcore.ListWorkspacesParams, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.ListWorkspacesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.ListWorkspacesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.ListWorkspacesParams, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.ListWorkspacesResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astroplatformcore.ListWorkspacesParams, ...astroplatformcore.RequestEditorFn) *astroplatformcore.ListWorkspacesResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.ListWorkspacesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astroplatformcore.ListWorkspacesParams, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.UpdateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) *astroplatformcore.UpdateClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.UpdateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body astroplatformcore.UpdateClusterRequest, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.UpdateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astroplatformcore.UpdateClusterRequest, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astroplatformcore.UpdateClusterRequest, ...astroplatformcore.RequestEditorFn) *astroplatformcore.UpdateClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.UpdateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astroplatformcore.UpdateClusterRequest, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentHibernationOverrideWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentHibernationOverrideWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateDeploymentHibernationOverrideResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.UpdateDeploymentHibernationOverrideResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateDeploymentHibernationOverrideResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) *astroplatformcore.UpdateDeploymentHibernationOverrideResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.UpdateDeploymentHibernationOverrideResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentHibernationOverrideWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentHibernationOverrideWithResponse(ctx context.Context, organizationId string, deploymentId string, body astroplatformcore.OverrideDeploymentHibernationBody, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateDeploymentHibernationOverrideResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.UpdateDeploymentHibernationOverrideResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astroplatformcore.OverrideDeploymentHibernationBody, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateDeploymentHibernationOverrideResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astroplatformcore.OverrideDeploymentHibernationBody, ...astroplatformcore.RequestEditorFn) *astroplatformcore.UpdateDeploymentHibernationOverrideResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.UpdateDeploymentHibernationOverrideResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astroplatformcore.OverrideDeploymentHibernationBody, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.UpdateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) *astroplatformcore.UpdateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.UpdateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, body astroplatformcore.UpdateDeploymentRequest, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.UpdateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astroplatformcore.UpdateDeploymentRequest, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astroplatformcore.UpdateDeploymentRequest, ...astroplatformcore.RequestEditorFn) *astroplatformcore.UpdateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.UpdateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astroplatformcore.UpdateDeploymentRequest, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.UpdateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateOrganizationResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) *astroplatformcore.UpdateOrganizationResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.UpdateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationWithResponse(ctx context.Context, organizationId string, body astroplatformcore.UpdateOrganizationRequest, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.UpdateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astroplatformcore.UpdateOrganizationRequest, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateOrganizationResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astroplatformcore.UpdateOrganizationRequest, ...astroplatformcore.RequestEditorFn) *astroplatformcore.UpdateOrganizationResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.UpdateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astroplatformcore.UpdateOrganizationRequest, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.UpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) *astroplatformcore.UpdateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.UpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, body astroplatformcore.UpdateWorkspaceRequest, reqEditors ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astroplatformcore.UpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astroplatformcore.UpdateWorkspaceRequest, ...astroplatformcore.RequestEditorFn) (*astroplatformcore.UpdateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astroplatformcore.UpdateWorkspaceRequest, ...astroplatformcore.RequestEditorFn) *astroplatformcore.UpdateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astroplatformcore.UpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astroplatformcore.UpdateWorkspaceRequest, ...astroplatformcore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
