// Package astropolariscore provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package astropolariscore

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	JWTScopes = "JWT.Scopes"
)

// Defines values for BasicSubjectProfileSubjectType.
const (
	SERVICEKEY BasicSubjectProfileSubjectType = "SERVICEKEY"
	USER       BasicSubjectProfileSubjectType = "USER"
)

// Defines values for CreatePolarisProjectRequestVisibility.
const (
	CreatePolarisProjectRequestVisibilityPRIVATE   CreatePolarisProjectRequestVisibility = "PRIVATE"
	CreatePolarisProjectRequestVisibilityWORKSPACE CreatePolarisProjectRequestVisibility = "WORKSPACE"
)

// Defines values for CreatePolarisSessionPermission.
const (
	CreatePolarisSessionPermissionREADONLY  CreatePolarisSessionPermission = "READ_ONLY"
	CreatePolarisSessionPermissionREADWRITE CreatePolarisSessionPermission = "READ_WRITE"
)

// Defines values for PolarisProjectVisibility.
const (
	PolarisProjectVisibilityPRIVATE   PolarisProjectVisibility = "PRIVATE"
	PolarisProjectVisibilityWORKSPACE PolarisProjectVisibility = "WORKSPACE"
)

// Defines values for PolarisSessionEditFileStatsStatus.
const (
	ADDED     PolarisSessionEditFileStatsStatus = "ADDED"
	CHANGED   PolarisSessionEditFileStatsStatus = "CHANGED"
	COPIED    PolarisSessionEditFileStatsStatus = "COPIED"
	MODIFIED  PolarisSessionEditFileStatsStatus = "MODIFIED"
	REMOVED   PolarisSessionEditFileStatsStatus = "REMOVED"
	RENAMED   PolarisSessionEditFileStatsStatus = "RENAMED"
	UNCHANGED PolarisSessionEditFileStatsStatus = "UNCHANGED"
)

// Defines values for TaskInstanceState.
const (
	Deferred        TaskInstanceState = "deferred"
	Failed          TaskInstanceState = "failed"
	None            TaskInstanceState = "none"
	Queued          TaskInstanceState = "queued"
	Removed         TaskInstanceState = "removed"
	Restarting      TaskInstanceState = "restarting"
	Running         TaskInstanceState = "running"
	Scheduled       TaskInstanceState = "scheduled"
	Skipped         TaskInstanceState = "skipped"
	Success         TaskInstanceState = "success"
	UpForReschedule TaskInstanceState = "upForReschedule"
	UpForRetry      TaskInstanceState = "upForRetry"
	UpstreamFailed  TaskInstanceState = "upstreamFailed"
)

// Defines values for UpdatePolarisProjectRequestVisibility.
const (
	UpdatePolarisProjectRequestVisibilityPRIVATE   UpdatePolarisProjectRequestVisibility = "PRIVATE"
	UpdatePolarisProjectRequestVisibilityWORKSPACE UpdatePolarisProjectRequestVisibility = "WORKSPACE"
)

// Defines values for UpdatePolarisSessionPermission.
const (
	UpdatePolarisSessionPermissionREADONLY  UpdatePolarisSessionPermission = "READ_ONLY"
	UpdatePolarisSessionPermissionREADWRITE UpdatePolarisSessionPermission = "READ_WRITE"
)

// Defines values for UpdatePolarisSessionRequestPermission.
const (
	READONLY  UpdatePolarisSessionRequestPermission = "READ_ONLY"
	READWRITE UpdatePolarisSessionRequestPermission = "READ_WRITE"
)

// Defines values for ListPolarisProjectsParamsSorts.
const (
	CreatedAtAsc    ListPolarisProjectsParamsSorts = "createdAt:asc"
	CreatedAtDesc   ListPolarisProjectsParamsSorts = "createdAt:desc"
	DescriptionAsc  ListPolarisProjectsParamsSorts = "description:asc"
	DescriptionDesc ListPolarisProjectsParamsSorts = "description:desc"
	IdAsc           ListPolarisProjectsParamsSorts = "id:asc"
	IdDesc          ListPolarisProjectsParamsSorts = "id:desc"
	NameAsc         ListPolarisProjectsParamsSorts = "name:asc"
	NameDesc        ListPolarisProjectsParamsSorts = "name:desc"
	UpdatedAtAsc    ListPolarisProjectsParamsSorts = "updatedAt:asc"
	UpdatedAtDesc   ListPolarisProjectsParamsSorts = "updatedAt:desc"
)

// Defines values for ListPolarisProjectsParamsVisibility.
const (
	ListPolarisProjectsParamsVisibilityPRIVATE   ListPolarisProjectsParamsVisibility = "PRIVATE"
	ListPolarisProjectsParamsVisibilityWORKSPACE ListPolarisProjectsParamsVisibility = "WORKSPACE"
)

// Defines values for ImportPolarisSessionTarParamsMode.
const (
	ImportPolarisSessionTarParamsModeOVERWRITE ImportPolarisSessionTarParamsMode = "OVERWRITE"
	ImportPolarisSessionTarParamsModeUPSERT    ImportPolarisSessionTarParamsMode = "UPSERT"
)

// Defines values for ImportPolarisSessionZipParamsMode.
const (
	ImportPolarisSessionZipParamsModeOVERWRITE ImportPolarisSessionZipParamsMode = "OVERWRITE"
	ImportPolarisSessionZipParamsModeUPSERT    ImportPolarisSessionZipParamsMode = "UPSERT"
)

// BasicSubjectProfile defines model for BasicSubjectProfile.
type BasicSubjectProfile struct {
	ApiTokenName *string                         `json:"apiTokenName,omitempty"`
	AvatarUrl    *string                         `json:"avatarUrl,omitempty"`
	FullName     *string                         `json:"fullName,omitempty"`
	Id           string                          `json:"id"`
	SubjectType  *BasicSubjectProfileSubjectType `json:"subjectType,omitempty"`
	Username     *string                         `json:"username,omitempty"`
}

// BasicSubjectProfileSubjectType defines model for BasicSubjectProfile.SubjectType.
type BasicSubjectProfileSubjectType string

// ChildrenInner defines model for ChildrenInner.
type ChildrenInner struct {
	union json.RawMessage
}

// CreatePolarisProjectRequest defines model for CreatePolarisProjectRequest.
type CreatePolarisProjectRequest struct {
	Description *string                                `json:"description,omitempty"`
	Name        *string                                `json:"name,omitempty"`
	Visibility  *CreatePolarisProjectRequestVisibility `json:"visibility,omitempty"`
}

// CreatePolarisProjectRequestVisibility defines model for CreatePolarisProjectRequest.Visibility.
type CreatePolarisProjectRequestVisibility string

// CreatePolarisSession defines model for CreatePolarisSession.
type CreatePolarisSession struct {
	Id         string                         `json:"id"`
	Permission CreatePolarisSessionPermission `json:"permission"`
}

// CreatePolarisSessionPermission defines model for CreatePolarisSession.Permission.
type CreatePolarisSessionPermission string

// DeletePolarisSessionFile defines model for DeletePolarisSessionFile.
type DeletePolarisSessionFile struct {
	Edit PolarisSessionEdit `json:"edit"`
}

// DeployPolarisProject defines model for DeployPolarisProject.
type DeployPolarisProject struct {
	DeployId string `json:"deployId"`
}

// DeployPolarisProjectRequest defines model for DeployPolarisProjectRequest.
type DeployPolarisProjectRequest struct {
	DeploymentId string  `json:"deploymentId"`
	VersionId    *string `json:"versionId,omitempty"`
}

// DuplicatePolarisSessionFile defines model for DuplicatePolarisSessionFile.
type DuplicatePolarisSessionFile struct {
	Edit PolarisSessionEdit `json:"edit"`
}

// DuplicatePolarisSessionFileRequest defines model for DuplicatePolarisSessionFileRequest.
type DuplicatePolarisSessionFileRequest struct {
	DestinationPath string `json:"destinationPath"`
}

// Error defines model for Error.
type Error struct {
	Message    string `json:"message"`
	RequestId  string `json:"requestId"`
	StatusCode int    `json:"statusCode"`
}

// ImportPolarisSession defines model for ImportPolarisSession.
type ImportPolarisSession struct {
	Edit PolarisSessionEdit `json:"edit"`
}

// ListPolarisProjectVersions defines model for ListPolarisProjectVersions.
type ListPolarisProjectVersions struct {
	HasMore  bool                    `json:"hasMore"`
	Versions []PolarisProjectVersion `json:"versions"`
}

// ListPolarisSessionEdits defines model for ListPolarisSessionEdits.
type ListPolarisSessionEdits struct {
	Edits   []PolarisSessionEdit `json:"edits"`
	HasMore bool                 `json:"hasMore"`
}

// ListPolarisSessionFiles defines model for ListPolarisSessionFiles.
type ListPolarisSessionFiles struct {
	Files []PolarisSessionFile `json:"files"`
}

// MovePolarisSessionFile defines model for MovePolarisSessionFile.
type MovePolarisSessionFile struct {
	Edit PolarisSessionEdit `json:"edit"`
}

// MovePolarisSessionFileRequest defines model for MovePolarisSessionFileRequest.
type MovePolarisSessionFileRequest struct {
	DestinationPath string `json:"destinationPath"`
}

// Outlet defines model for Outlet.
type Outlet struct {
	Extra map[string]interface{} `json:"extra"`
	Type  string                 `json:"type"`
	Uri   string                 `json:"uri"`
}

// PolarisProject defines model for PolarisProject.
type PolarisProject struct {
	CreatedAt      time.Time                `json:"createdAt"`
	CreatedBy      string                   `json:"createdBy"`
	Description    *string                  `json:"description,omitempty"`
	Id             string                   `json:"id"`
	Lock           *PolarisProjectLock      `json:"lock,omitempty"`
	Name           string                   `json:"name"`
	OrganizationId string                   `json:"organizationId"`
	Rules          *string                  `json:"rules,omitempty"`
	UpdatedAt      time.Time                `json:"updatedAt"`
	UpdatedBy      string                   `json:"updatedBy"`
	Visibility     PolarisProjectVisibility `json:"visibility"`
	WorkspaceId    string                   `json:"workspaceId"`
}

// PolarisProjectVisibility defines model for PolarisProject.Visibility.
type PolarisProjectVisibility string

// PolarisProjectLock defines model for PolarisProjectLock.
type PolarisProjectLock struct {
	LastEditedAt *string              `json:"lastEditedAt,omitempty"`
	Subject      *BasicSubjectProfile `json:"subject,omitempty"`
}

// PolarisProjectVersion defines model for PolarisProjectVersion.
type PolarisProjectVersion struct {
	Author  string `json:"author"`
	Id      string `json:"id"`
	Message string `json:"message"`
	SavedAt string `json:"savedAt"`
}

// PolarisProjectsPaginated defines model for PolarisProjectsPaginated.
type PolarisProjectsPaginated struct {
	Limit      int              `json:"limit"`
	Offset     int              `json:"offset"`
	Projects   []PolarisProject `json:"projects"`
	TotalCount int              `json:"totalCount"`
}

// PolarisSessionEdit defines model for PolarisSessionEdit.
type PolarisSessionEdit struct {
	Author   string `json:"author"`
	EditedAt string `json:"editedAt"`
	Id       string `json:"id"`
	Message  string `json:"message"`
}

// PolarisSessionEditDetailed defines model for PolarisSessionEditDetailed.
type PolarisSessionEditDetailed struct {
	Additions int                           `json:"additions"`
	Author    string                        `json:"author"`
	Deletions int                           `json:"deletions"`
	EditedAt  string                        `json:"editedAt"`
	FileStats []PolarisSessionEditFileStats `json:"fileStats"`
	Id        string                        `json:"id"`
	Message   string                        `json:"message"`
}

// PolarisSessionEditFileStats defines model for PolarisSessionEditFileStats.
type PolarisSessionEditFileStats struct {
	Additions int                               `json:"additions"`
	Deletions int                               `json:"deletions"`
	Name      string                            `json:"name"`
	Status    PolarisSessionEditFileStatsStatus `json:"status"`
}

// PolarisSessionEditFileStatsStatus defines model for PolarisSessionEditFileStats.Status.
type PolarisSessionEditFileStatsStatus string

// PolarisSessionFile defines model for PolarisSessionFile.
type PolarisSessionFile struct {
	Path string `json:"path"`
	Size int    `json:"size"`
}

// RunGroup defines model for RunGroup.
type RunGroup struct {
	Children          *[]RunGroup     `json:"children,omitempty"`
	ExtraLinks        *[]string       `json:"extraLinks,omitempty"`
	HasOutletDatasets *bool           `json:"hasOutletDatasets,omitempty"`
	Id                *string         `json:"id,omitempty"`
	IsMapped          *bool           `json:"isMapped,omitempty"`
	Label             *string         `json:"label,omitempty"`
	Operator          *string         `json:"operator,omitempty"`
	TaskInstances     *[]TaskInstance `json:"taskInstances,omitempty"`
}

// SavePolarisSessionRequest defines model for SavePolarisSessionRequest.
type SavePolarisSessionRequest struct {
	Message string `json:"message"`
}

// Task defines model for Task.
type Task struct {
	ExtraLinks        *[]string `json:"extraLinks,omitempty"`
	HasOutletDatasets bool      `json:"hasOutletDatasets"`
	Id                string    `json:"id"`
	IsMapped          *bool     `json:"isMapped,omitempty"`
	Label             *string   `json:"label"`
	Operator          string    `json:"operator"`
	Outlets           *[]Outlet `json:"outlets,omitempty"`
	SetupTeardownType *string   `json:"setupTeardownType,omitempty"`
}

// TaskGroup defines model for TaskGroup.
type TaskGroup struct {
	Children []ChildrenInner `json:"children"`
	Id       *string         `json:"id"`
	IsMapped *bool           `json:"isMapped,omitempty"`
	Label    *string         `json:"label"`
	Tooltip  *string         `json:"tooltip"`
}

// TaskInstance defines model for TaskInstance.
type TaskInstance struct {
	DagId          string                  `json:"dagId"`
	DagRunId       string                  `json:"dagRunId"`
	Duration       *float32                `json:"duration,omitempty"`
	EndDate        *string                 `json:"endDate,omitempty"`
	ExecutionDate  *string                 `json:"executionDate,omitempty"`
	ExecutorConfig *string                 `json:"executorConfig,omitempty"`
	Hostname       *string                 `json:"hostname,omitempty"`
	MapIndex       *int                    `json:"mapIndex,omitempty"`
	MaxTries       *int                    `json:"maxTries,omitempty"`
	Note           *string                 `json:"note,omitempty"`
	Operator       *string                 `json:"operator,omitempty"`
	Pid            *int                    `json:"pid,omitempty"`
	Pool           *string                 `json:"pool,omitempty"`
	PoolSlots      *int                    `json:"poolSlots,omitempty"`
	PriorityWeight *int                    `json:"priorityWeight,omitempty"`
	Queue          *string                 `json:"queue,omitempty"`
	QueuedWhen     *string                 `json:"queuedWhen,omitempty"`
	RenderedFields *map[string]interface{} `json:"renderedFields,omitempty"`
	StartDate      *string                 `json:"startDate,omitempty"`
	State          *TaskInstanceState      `json:"state,omitempty"`
	TaskId         string                  `json:"taskId"`
	TryNumber      *int                    `json:"tryNumber,omitempty"`
	Unixname       *string                 `json:"unixname,omitempty"`
}

// TaskInstanceState defines model for TaskInstance.State.
type TaskInstanceState string

// UpdatePolarisProjectRequest defines model for UpdatePolarisProjectRequest.
type UpdatePolarisProjectRequest struct {
	Description *string                               `json:"description,omitempty"`
	Name        string                                `json:"name"`
	Rules       *string                               `json:"rules,omitempty"`
	Visibility  UpdatePolarisProjectRequestVisibility `json:"visibility"`
}

// UpdatePolarisProjectRequestVisibility defines model for UpdatePolarisProjectRequest.Visibility.
type UpdatePolarisProjectRequestVisibility string

// UpdatePolarisSession defines model for UpdatePolarisSession.
type UpdatePolarisSession struct {
	Id         string                         `json:"id"`
	Permission UpdatePolarisSessionPermission `json:"permission"`
}

// UpdatePolarisSessionPermission defines model for UpdatePolarisSession.Permission.
type UpdatePolarisSessionPermission string

// UpdatePolarisSessionRequest defines model for UpdatePolarisSessionRequest.
type UpdatePolarisSessionRequest struct {
	Permission UpdatePolarisSessionRequestPermission `json:"permission"`
}

// UpdatePolarisSessionRequestPermission defines model for UpdatePolarisSessionRequest.Permission.
type UpdatePolarisSessionRequestPermission string

// UploadPolarisSessionFile defines model for UploadPolarisSessionFile.
type UploadPolarisSessionFile struct {
	Edit PolarisSessionEdit `json:"edit"`
}

// ListPolarisProjectsParams defines parameters for ListPolarisProjects.
type ListPolarisProjectsParams struct {
	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search search string across name and description
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListPolarisProjectsParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Visibility filter by visibility of projects
	Visibility *ListPolarisProjectsParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`
}

// ListPolarisProjectsParamsSorts defines parameters for ListPolarisProjects.
type ListPolarisProjectsParamsSorts string

// ListPolarisProjectsParamsVisibility defines parameters for ListPolarisProjects.
type ListPolarisProjectsParamsVisibility string

// ListPolarisSessionEditsParams defines parameters for ListPolarisSessionEdits.
type ListPolarisSessionEditsParams struct {
	// Page page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// ExportPolarisSessionTarParams defines parameters for ExportPolarisSessionTar.
type ExportPolarisSessionTarParams struct {
	// Filename filename
	Filename *string `form:"filename,omitempty" json:"filename,omitempty"`
}

// ExportPolarisSessionZipParams defines parameters for ExportPolarisSessionZip.
type ExportPolarisSessionZipParams struct {
	// Filename filename
	Filename *string `form:"filename,omitempty" json:"filename,omitempty"`
}

// DeletePolarisSessionFileParams defines parameters for DeletePolarisSessionFile.
type DeletePolarisSessionFileParams struct {
	// AmendLastEdit meld this edit with the previous edit
	AmendLastEdit *bool `form:"amendLastEdit,omitempty" json:"amendLastEdit,omitempty"`
}

// DownloadPolarisSessionFileParams defines parameters for DownloadPolarisSessionFile.
type DownloadPolarisSessionFileParams struct {
	// EditId edit ID
	EditId *string `form:"editId,omitempty" json:"editId,omitempty"`

	// Filename filename
	Filename *string `form:"filename,omitempty" json:"filename,omitempty"`
}

// DuplicatePolarisSessionFileParams defines parameters for DuplicatePolarisSessionFile.
type DuplicatePolarisSessionFileParams struct {
	// AmendLastEdit meld this edit with the previous edit
	AmendLastEdit *bool `form:"amendLastEdit,omitempty" json:"amendLastEdit,omitempty"`
}

// ListPolarisSessionFilesParams defines parameters for ListPolarisSessionFiles.
type ListPolarisSessionFilesParams struct {
	// EditId edit ID
	EditId *string `form:"editId,omitempty" json:"editId,omitempty"`
}

// GetPolarisSessionFileParams defines parameters for GetPolarisSessionFile.
type GetPolarisSessionFileParams struct {
	// EditId edit ID
	EditId *string `form:"editId,omitempty" json:"editId,omitempty"`
}

// MovePolarisSessionFileParams defines parameters for MovePolarisSessionFile.
type MovePolarisSessionFileParams struct {
	// AmendLastEdit meld this edit with the previous edit
	AmendLastEdit *bool `form:"amendLastEdit,omitempty" json:"amendLastEdit,omitempty"`
}

// UploadPolarisSessionFileTextBody defines parameters for UploadPolarisSessionFile.
type UploadPolarisSessionFileTextBody = string

// UploadPolarisSessionFileParams defines parameters for UploadPolarisSessionFile.
type UploadPolarisSessionFileParams struct {
	// AmendLastEdit meld this edit with the previous edit
	AmendLastEdit *bool `form:"amendLastEdit,omitempty" json:"amendLastEdit,omitempty"`
}

// ImportPolarisSessionTarParams defines parameters for ImportPolarisSessionTar.
type ImportPolarisSessionTarParams struct {
	// Mode import mode Enums(OVERWRITE,UPSERT)
	Mode *ImportPolarisSessionTarParamsMode `form:"mode,omitempty" json:"mode,omitempty"`
}

// ImportPolarisSessionTarParamsMode defines parameters for ImportPolarisSessionTar.
type ImportPolarisSessionTarParamsMode string

// ImportPolarisSessionZipParams defines parameters for ImportPolarisSessionZip.
type ImportPolarisSessionZipParams struct {
	// Mode import mode Enums(OVERWRITE,UPSERT)
	Mode *ImportPolarisSessionZipParamsMode `form:"mode,omitempty" json:"mode,omitempty"`
}

// ImportPolarisSessionZipParamsMode defines parameters for ImportPolarisSessionZip.
type ImportPolarisSessionZipParamsMode string

// SubmitPolarisSessionPromptJSONBody defines parameters for SubmitPolarisSessionPrompt.
type SubmitPolarisSessionPromptJSONBody = string

// ListPolarisProjectVersionsParams defines parameters for ListPolarisProjectVersions.
type ListPolarisProjectVersionsParams struct {
	// Page page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage items per page
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// CreatePolarisProjectJSONRequestBody defines body for CreatePolarisProject for application/json ContentType.
type CreatePolarisProjectJSONRequestBody = CreatePolarisProjectRequest

// UpdatePolarisProjectJSONRequestBody defines body for UpdatePolarisProject for application/json ContentType.
type UpdatePolarisProjectJSONRequestBody = UpdatePolarisProjectRequest

// DeployPolarisProjectJSONRequestBody defines body for DeployPolarisProject for application/json ContentType.
type DeployPolarisProjectJSONRequestBody = DeployPolarisProjectRequest

// DuplicatePolarisSessionFileJSONRequestBody defines body for DuplicatePolarisSessionFile for application/json ContentType.
type DuplicatePolarisSessionFileJSONRequestBody = DuplicatePolarisSessionFileRequest

// MovePolarisSessionFileJSONRequestBody defines body for MovePolarisSessionFile for application/json ContentType.
type MovePolarisSessionFileJSONRequestBody = MovePolarisSessionFileRequest

// UploadPolarisSessionFileTextRequestBody defines body for UploadPolarisSessionFile for text/plain ContentType.
type UploadPolarisSessionFileTextRequestBody = UploadPolarisSessionFileTextBody

// SavePolarisSessionJSONRequestBody defines body for SavePolarisSession for application/json ContentType.
type SavePolarisSessionJSONRequestBody = SavePolarisSessionRequest

// SubmitPolarisSessionPromptJSONRequestBody defines body for SubmitPolarisSessionPrompt for application/json ContentType.
type SubmitPolarisSessionPromptJSONRequestBody = SubmitPolarisSessionPromptJSONBody

// AsTask returns the union data inside the ChildrenInner as a Task
func (t ChildrenInner) AsTask() (Task, error) {
	var body Task
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTask overwrites any union data inside the ChildrenInner as the provided Task
func (t *ChildrenInner) FromTask(v Task) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTask performs a merge with any union data inside the ChildrenInner, using the provided Task
func (t *ChildrenInner) MergeTask(v Task) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTaskGroup returns the union data inside the ChildrenInner as a TaskGroup
func (t ChildrenInner) AsTaskGroup() (TaskGroup, error) {
	var body TaskGroup
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskGroup overwrites any union data inside the ChildrenInner as the provided TaskGroup
func (t *ChildrenInner) FromTaskGroup(v TaskGroup) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskGroup performs a merge with any union data inside the ChildrenInner, using the provided TaskGroup
func (t *ChildrenInner) MergeTaskGroup(v TaskGroup) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChildrenInner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChildrenInner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListPolarisProjects request
	ListPolarisProjects(ctx context.Context, organizationId string, workspaceId string, params *ListPolarisProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePolarisProjectWithBody request with any body
	CreatePolarisProjectWithBody(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePolarisProject(ctx context.Context, organizationId string, workspaceId string, body CreatePolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolarisProject request
	DeletePolarisProject(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolarisProject request
	GetPolarisProject(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePolarisProjectWithBody request with any body
	UpdatePolarisProjectWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePolarisProject(ctx context.Context, organizationId string, workspaceId string, projectId string, body UpdatePolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeployPolarisProjectWithBody request with any body
	DeployPolarisProjectWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeployPolarisProject(ctx context.Context, organizationId string, workspaceId string, projectId string, body DeployPolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePolarisSession request
	CreatePolarisSession(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPolarisSessionEdits request
	ListPolarisSessionEdits(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ListPolarisSessionEditsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolarisSessionEdit request
	GetPolarisSessionEdit(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, editId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportPolarisSessionTar request
	ExportPolarisSessionTar(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ExportPolarisSessionTarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportPolarisSessionZip request
	ExportPolarisSessionZip(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ExportPolarisSessionZipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePolarisSessionFile request
	DeletePolarisSessionFile(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DeletePolarisSessionFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadPolarisSessionFile request
	DownloadPolarisSessionFile(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DownloadPolarisSessionFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DuplicatePolarisSessionFileWithBody request with any body
	DuplicatePolarisSessionFileWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DuplicatePolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DuplicatePolarisSessionFile(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DuplicatePolarisSessionFileParams, body DuplicatePolarisSessionFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPolarisSessionFiles request
	ListPolarisSessionFiles(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ListPolarisSessionFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolarisSessionFile request
	GetPolarisSessionFile(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *GetPolarisSessionFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MovePolarisSessionFileWithBody request with any body
	MovePolarisSessionFileWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *MovePolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MovePolarisSessionFile(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *MovePolarisSessionFileParams, body MovePolarisSessionFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadPolarisSessionFileWithBody request with any body
	UploadPolarisSessionFileWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *UploadPolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UploadPolarisSessionFileWithTextBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *UploadPolarisSessionFileParams, body UploadPolarisSessionFileTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportPolarisSessionTarWithBody request with any body
	ImportPolarisSessionTarWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ImportPolarisSessionTarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportPolarisSessionZipWithBody request with any body
	ImportPolarisSessionZipWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ImportPolarisSessionZipParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SavePolarisSessionWithBody request with any body
	SavePolarisSessionWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SavePolarisSession(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, body SavePolarisSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitPolarisSessionPromptWithBody request with any body
	SubmitPolarisSessionPromptWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitPolarisSessionPrompt(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, body SubmitPolarisSessionPromptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePolarisSessionWithBody request with any body
	UpdatePolarisSessionWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPolarisProjectVersions request
	ListPolarisProjectVersions(ctx context.Context, organizationId string, workspaceId string, projectId string, params *ListPolarisProjectVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListPolarisProjects(ctx context.Context, organizationId string, workspaceId string, params *ListPolarisProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPolarisProjectsRequest(c.Server, organizationId, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePolarisProjectWithBody(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePolarisProjectRequestWithBody(c.Server, organizationId, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePolarisProject(ctx context.Context, organizationId string, workspaceId string, body CreatePolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePolarisProjectRequest(c.Server, organizationId, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolarisProject(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolarisProjectRequest(c.Server, organizationId, workspaceId, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolarisProject(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolarisProjectRequest(c.Server, organizationId, workspaceId, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePolarisProjectWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePolarisProjectRequestWithBody(c.Server, organizationId, workspaceId, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePolarisProject(ctx context.Context, organizationId string, workspaceId string, projectId string, body UpdatePolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePolarisProjectRequest(c.Server, organizationId, workspaceId, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeployPolarisProjectWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeployPolarisProjectRequestWithBody(c.Server, organizationId, workspaceId, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeployPolarisProject(ctx context.Context, organizationId string, workspaceId string, projectId string, body DeployPolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeployPolarisProjectRequest(c.Server, organizationId, workspaceId, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePolarisSession(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePolarisSessionRequest(c.Server, organizationId, workspaceId, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPolarisSessionEdits(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ListPolarisSessionEditsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPolarisSessionEditsRequest(c.Server, organizationId, workspaceId, projectId, sessionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolarisSessionEdit(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, editId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolarisSessionEditRequest(c.Server, organizationId, workspaceId, projectId, sessionId, editId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportPolarisSessionTar(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ExportPolarisSessionTarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportPolarisSessionTarRequest(c.Server, organizationId, workspaceId, projectId, sessionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportPolarisSessionZip(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ExportPolarisSessionZipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportPolarisSessionZipRequest(c.Server, organizationId, workspaceId, projectId, sessionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePolarisSessionFile(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DeletePolarisSessionFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePolarisSessionFileRequest(c.Server, organizationId, workspaceId, projectId, sessionId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadPolarisSessionFile(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DownloadPolarisSessionFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadPolarisSessionFileRequest(c.Server, organizationId, workspaceId, projectId, sessionId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicatePolarisSessionFileWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DuplicatePolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicatePolarisSessionFileRequestWithBody(c.Server, organizationId, workspaceId, projectId, sessionId, path, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicatePolarisSessionFile(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DuplicatePolarisSessionFileParams, body DuplicatePolarisSessionFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicatePolarisSessionFileRequest(c.Server, organizationId, workspaceId, projectId, sessionId, path, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPolarisSessionFiles(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ListPolarisSessionFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPolarisSessionFilesRequest(c.Server, organizationId, workspaceId, projectId, sessionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolarisSessionFile(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *GetPolarisSessionFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolarisSessionFileRequest(c.Server, organizationId, workspaceId, projectId, sessionId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovePolarisSessionFileWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *MovePolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovePolarisSessionFileRequestWithBody(c.Server, organizationId, workspaceId, projectId, sessionId, path, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MovePolarisSessionFile(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *MovePolarisSessionFileParams, body MovePolarisSessionFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMovePolarisSessionFileRequest(c.Server, organizationId, workspaceId, projectId, sessionId, path, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadPolarisSessionFileWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *UploadPolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadPolarisSessionFileRequestWithBody(c.Server, organizationId, workspaceId, projectId, sessionId, path, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadPolarisSessionFileWithTextBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *UploadPolarisSessionFileParams, body UploadPolarisSessionFileTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadPolarisSessionFileRequestWithTextBody(c.Server, organizationId, workspaceId, projectId, sessionId, path, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportPolarisSessionTarWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ImportPolarisSessionTarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportPolarisSessionTarRequestWithBody(c.Server, organizationId, workspaceId, projectId, sessionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportPolarisSessionZipWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ImportPolarisSessionZipParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportPolarisSessionZipRequestWithBody(c.Server, organizationId, workspaceId, projectId, sessionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavePolarisSessionWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavePolarisSessionRequestWithBody(c.Server, organizationId, workspaceId, projectId, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SavePolarisSession(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, body SavePolarisSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSavePolarisSessionRequest(c.Server, organizationId, workspaceId, projectId, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitPolarisSessionPromptWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitPolarisSessionPromptRequestWithBody(c.Server, organizationId, workspaceId, projectId, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitPolarisSessionPrompt(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, body SubmitPolarisSessionPromptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitPolarisSessionPromptRequest(c.Server, organizationId, workspaceId, projectId, sessionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePolarisSessionWithBody(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePolarisSessionRequestWithBody(c.Server, organizationId, workspaceId, projectId, sessionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPolarisProjectVersions(ctx context.Context, organizationId string, workspaceId string, projectId string, params *ListPolarisProjectVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPolarisProjectVersionsRequest(c.Server, organizationId, workspaceId, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListPolarisProjectsRequest generates requests for ListPolarisProjects
func NewListPolarisProjectsRequest(server string, organizationId string, workspaceId string, params *ListPolarisProjectsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sorts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePolarisProjectRequest calls the generic CreatePolarisProject builder with application/json body
func NewCreatePolarisProjectRequest(server string, organizationId string, workspaceId string, body CreatePolarisProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePolarisProjectRequestWithBody(server, organizationId, workspaceId, "application/json", bodyReader)
}

// NewCreatePolarisProjectRequestWithBody generates requests for CreatePolarisProject with any type of body
func NewCreatePolarisProjectRequestWithBody(server string, organizationId string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePolarisProjectRequest generates requests for DeletePolarisProject
func NewDeletePolarisProjectRequest(server string, organizationId string, workspaceId string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolarisProjectRequest generates requests for GetPolarisProject
func NewGetPolarisProjectRequest(server string, organizationId string, workspaceId string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePolarisProjectRequest calls the generic UpdatePolarisProject builder with application/json body
func NewUpdatePolarisProjectRequest(server string, organizationId string, workspaceId string, projectId string, body UpdatePolarisProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePolarisProjectRequestWithBody(server, organizationId, workspaceId, projectId, "application/json", bodyReader)
}

// NewUpdatePolarisProjectRequestWithBody generates requests for UpdatePolarisProject with any type of body
func NewUpdatePolarisProjectRequestWithBody(server string, organizationId string, workspaceId string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeployPolarisProjectRequest calls the generic DeployPolarisProject builder with application/json body
func NewDeployPolarisProjectRequest(server string, organizationId string, workspaceId string, projectId string, body DeployPolarisProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeployPolarisProjectRequestWithBody(server, organizationId, workspaceId, projectId, "application/json", bodyReader)
}

// NewDeployPolarisProjectRequestWithBody generates requests for DeployPolarisProject with any type of body
func NewDeployPolarisProjectRequestWithBody(server string, organizationId string, workspaceId string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/deploy", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePolarisSessionRequest generates requests for CreatePolarisSession
func NewCreatePolarisSessionRequest(server string, organizationId string, workspaceId string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPolarisSessionEditsRequest generates requests for ListPolarisSessionEdits
func NewListPolarisSessionEditsRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, params *ListPolarisSessionEditsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/edits", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolarisSessionEditRequest generates requests for GetPolarisSessionEdit
func NewGetPolarisSessionEditRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, editId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "editId", runtime.ParamLocationPath, editId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/edits/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportPolarisSessionTarRequest generates requests for ExportPolarisSessionTar
func NewExportPolarisSessionTarRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, params *ExportPolarisSessionTarParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/export/tar", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filename != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportPolarisSessionZipRequest generates requests for ExportPolarisSessionZip
func NewExportPolarisSessionZipRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, params *ExportPolarisSessionZipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/export/zip", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filename != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePolarisSessionFileRequest generates requests for DeletePolarisSessionFile
func NewDeletePolarisSessionFileRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DeletePolarisSessionFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/files/delete/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AmendLastEdit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amendLastEdit", runtime.ParamLocationQuery, *params.AmendLastEdit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadPolarisSessionFileRequest generates requests for DownloadPolarisSessionFile
func NewDownloadPolarisSessionFileRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DownloadPolarisSessionFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/files/download/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EditId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "editId", runtime.ParamLocationQuery, *params.EditId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filename != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filename", runtime.ParamLocationQuery, *params.Filename); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDuplicatePolarisSessionFileRequest calls the generic DuplicatePolarisSessionFile builder with application/json body
func NewDuplicatePolarisSessionFileRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DuplicatePolarisSessionFileParams, body DuplicatePolarisSessionFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDuplicatePolarisSessionFileRequestWithBody(server, organizationId, workspaceId, projectId, sessionId, path, params, "application/json", bodyReader)
}

// NewDuplicatePolarisSessionFileRequestWithBody generates requests for DuplicatePolarisSessionFile with any type of body
func NewDuplicatePolarisSessionFileRequestWithBody(server string, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DuplicatePolarisSessionFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/files/duplicate/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AmendLastEdit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amendLastEdit", runtime.ParamLocationQuery, *params.AmendLastEdit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPolarisSessionFilesRequest generates requests for ListPolarisSessionFiles
func NewListPolarisSessionFilesRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, params *ListPolarisSessionFilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/files/metadata", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EditId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "editId", runtime.ParamLocationQuery, *params.EditId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolarisSessionFileRequest generates requests for GetPolarisSessionFile
func NewGetPolarisSessionFileRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *GetPolarisSessionFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/files/metadata/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EditId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "editId", runtime.ParamLocationQuery, *params.EditId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMovePolarisSessionFileRequest calls the generic MovePolarisSessionFile builder with application/json body
func NewMovePolarisSessionFileRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *MovePolarisSessionFileParams, body MovePolarisSessionFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMovePolarisSessionFileRequestWithBody(server, organizationId, workspaceId, projectId, sessionId, path, params, "application/json", bodyReader)
}

// NewMovePolarisSessionFileRequestWithBody generates requests for MovePolarisSessionFile with any type of body
func NewMovePolarisSessionFileRequestWithBody(server string, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *MovePolarisSessionFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/files/move/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AmendLastEdit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amendLastEdit", runtime.ParamLocationQuery, *params.AmendLastEdit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadPolarisSessionFileRequestWithTextBody calls the generic UploadPolarisSessionFile builder with text/plain body
func NewUploadPolarisSessionFileRequestWithTextBody(server string, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *UploadPolarisSessionFileParams, body UploadPolarisSessionFileTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewUploadPolarisSessionFileRequestWithBody(server, organizationId, workspaceId, projectId, sessionId, path, params, "text/plain", bodyReader)
}

// NewUploadPolarisSessionFileRequestWithBody generates requests for UploadPolarisSessionFile with any type of body
func NewUploadPolarisSessionFileRequestWithBody(server string, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *UploadPolarisSessionFileParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/files/upload/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AmendLastEdit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amendLastEdit", runtime.ParamLocationQuery, *params.AmendLastEdit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportPolarisSessionTarRequestWithBody generates requests for ImportPolarisSessionTar with any type of body
func NewImportPolarisSessionTarRequestWithBody(server string, organizationId string, workspaceId string, projectId string, sessionId string, params *ImportPolarisSessionTarParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/import/tar", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Mode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportPolarisSessionZipRequestWithBody generates requests for ImportPolarisSessionZip with any type of body
func NewImportPolarisSessionZipRequestWithBody(server string, organizationId string, workspaceId string, projectId string, sessionId string, params *ImportPolarisSessionZipParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/import/zip", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Mode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mode", runtime.ParamLocationQuery, *params.Mode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSavePolarisSessionRequest calls the generic SavePolarisSession builder with application/json body
func NewSavePolarisSessionRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, body SavePolarisSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSavePolarisSessionRequestWithBody(server, organizationId, workspaceId, projectId, sessionId, "application/json", bodyReader)
}

// NewSavePolarisSessionRequestWithBody generates requests for SavePolarisSession with any type of body
func NewSavePolarisSessionRequestWithBody(server string, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/save", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubmitPolarisSessionPromptRequest calls the generic SubmitPolarisSessionPrompt builder with application/json body
func NewSubmitPolarisSessionPromptRequest(server string, organizationId string, workspaceId string, projectId string, sessionId string, body SubmitPolarisSessionPromptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitPolarisSessionPromptRequestWithBody(server, organizationId, workspaceId, projectId, sessionId, "application/json", bodyReader)
}

// NewSubmitPolarisSessionPromptRequestWithBody generates requests for SubmitPolarisSessionPrompt with any type of body
func NewSubmitPolarisSessionPromptRequestWithBody(server string, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/submit-prompt", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePolarisSessionRequestWithBody generates requests for UpdatePolarisSession with any type of body
func NewUpdatePolarisSessionRequestWithBody(server string, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/sessions/%s/update", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPolarisProjectVersionsRequest generates requests for ListPolarisProjectVersions
func NewListPolarisProjectVersionsRequest(server string, organizationId string, workspaceId string, projectId string, params *ListPolarisProjectVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/polaris/projects/%s/versions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListPolarisProjectsWithResponse request
	ListPolarisProjectsWithResponse(ctx context.Context, organizationId string, workspaceId string, params *ListPolarisProjectsParams, reqEditors ...RequestEditorFn) (*ListPolarisProjectsResponse, error)

	// CreatePolarisProjectWithBodyWithResponse request with any body
	CreatePolarisProjectWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePolarisProjectResponse, error)

	CreatePolarisProjectWithResponse(ctx context.Context, organizationId string, workspaceId string, body CreatePolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePolarisProjectResponse, error)

	// DeletePolarisProjectWithResponse request
	DeletePolarisProjectWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*DeletePolarisProjectResponse, error)

	// GetPolarisProjectWithResponse request
	GetPolarisProjectWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*GetPolarisProjectResponse, error)

	// UpdatePolarisProjectWithBodyWithResponse request with any body
	UpdatePolarisProjectWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePolarisProjectResponse, error)

	UpdatePolarisProjectWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, body UpdatePolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePolarisProjectResponse, error)

	// DeployPolarisProjectWithBodyWithResponse request with any body
	DeployPolarisProjectWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeployPolarisProjectResponse, error)

	DeployPolarisProjectWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, body DeployPolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*DeployPolarisProjectResponse, error)

	// CreatePolarisSessionWithResponse request
	CreatePolarisSessionWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*CreatePolarisSessionResponse, error)

	// ListPolarisSessionEditsWithResponse request
	ListPolarisSessionEditsWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ListPolarisSessionEditsParams, reqEditors ...RequestEditorFn) (*ListPolarisSessionEditsResponse, error)

	// GetPolarisSessionEditWithResponse request
	GetPolarisSessionEditWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, editId string, reqEditors ...RequestEditorFn) (*GetPolarisSessionEditResponse, error)

	// ExportPolarisSessionTarWithResponse request
	ExportPolarisSessionTarWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ExportPolarisSessionTarParams, reqEditors ...RequestEditorFn) (*ExportPolarisSessionTarResponse, error)

	// ExportPolarisSessionZipWithResponse request
	ExportPolarisSessionZipWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ExportPolarisSessionZipParams, reqEditors ...RequestEditorFn) (*ExportPolarisSessionZipResponse, error)

	// DeletePolarisSessionFileWithResponse request
	DeletePolarisSessionFileWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DeletePolarisSessionFileParams, reqEditors ...RequestEditorFn) (*DeletePolarisSessionFileResponse, error)

	// DownloadPolarisSessionFileWithResponse request
	DownloadPolarisSessionFileWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DownloadPolarisSessionFileParams, reqEditors ...RequestEditorFn) (*DownloadPolarisSessionFileResponse, error)

	// DuplicatePolarisSessionFileWithBodyWithResponse request with any body
	DuplicatePolarisSessionFileWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DuplicatePolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DuplicatePolarisSessionFileResponse, error)

	DuplicatePolarisSessionFileWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DuplicatePolarisSessionFileParams, body DuplicatePolarisSessionFileJSONRequestBody, reqEditors ...RequestEditorFn) (*DuplicatePolarisSessionFileResponse, error)

	// ListPolarisSessionFilesWithResponse request
	ListPolarisSessionFilesWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ListPolarisSessionFilesParams, reqEditors ...RequestEditorFn) (*ListPolarisSessionFilesResponse, error)

	// GetPolarisSessionFileWithResponse request
	GetPolarisSessionFileWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *GetPolarisSessionFileParams, reqEditors ...RequestEditorFn) (*GetPolarisSessionFileResponse, error)

	// MovePolarisSessionFileWithBodyWithResponse request with any body
	MovePolarisSessionFileWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *MovePolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MovePolarisSessionFileResponse, error)

	MovePolarisSessionFileWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *MovePolarisSessionFileParams, body MovePolarisSessionFileJSONRequestBody, reqEditors ...RequestEditorFn) (*MovePolarisSessionFileResponse, error)

	// UploadPolarisSessionFileWithBodyWithResponse request with any body
	UploadPolarisSessionFileWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *UploadPolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadPolarisSessionFileResponse, error)

	UploadPolarisSessionFileWithTextBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *UploadPolarisSessionFileParams, body UploadPolarisSessionFileTextRequestBody, reqEditors ...RequestEditorFn) (*UploadPolarisSessionFileResponse, error)

	// ImportPolarisSessionTarWithBodyWithResponse request with any body
	ImportPolarisSessionTarWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ImportPolarisSessionTarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportPolarisSessionTarResponse, error)

	// ImportPolarisSessionZipWithBodyWithResponse request with any body
	ImportPolarisSessionZipWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ImportPolarisSessionZipParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportPolarisSessionZipResponse, error)

	// SavePolarisSessionWithBodyWithResponse request with any body
	SavePolarisSessionWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SavePolarisSessionResponse, error)

	SavePolarisSessionWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, body SavePolarisSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*SavePolarisSessionResponse, error)

	// SubmitPolarisSessionPromptWithBodyWithResponse request with any body
	SubmitPolarisSessionPromptWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitPolarisSessionPromptResponse, error)

	SubmitPolarisSessionPromptWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, body SubmitPolarisSessionPromptJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitPolarisSessionPromptResponse, error)

	// UpdatePolarisSessionWithBodyWithResponse request with any body
	UpdatePolarisSessionWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePolarisSessionResponse, error)

	// ListPolarisProjectVersionsWithResponse request
	ListPolarisProjectVersionsWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, params *ListPolarisProjectVersionsParams, reqEditors ...RequestEditorFn) (*ListPolarisProjectVersionsResponse, error)
}

type ListPolarisProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolarisProjectsPaginated
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListPolarisProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPolarisProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePolarisProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolarisProject
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePolarisProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePolarisProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolarisProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePolarisProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolarisProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolarisProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolarisProject
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPolarisProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolarisProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePolarisProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolarisProject
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePolarisProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePolarisProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeployPolarisProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeployPolarisProject
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeployPolarisProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeployPolarisProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePolarisSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePolarisSession
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePolarisSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePolarisSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPolarisSessionEditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPolarisSessionEdits
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListPolarisSessionEditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPolarisSessionEditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolarisSessionEditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolarisSessionEditDetailed
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPolarisSessionEditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolarisSessionEditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportPolarisSessionTarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportPolarisSessionTarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportPolarisSessionTarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportPolarisSessionZipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportPolarisSessionZipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportPolarisSessionZipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePolarisSessionFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeletePolarisSessionFile
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePolarisSessionFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePolarisSessionFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadPolarisSessionFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadPolarisSessionFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadPolarisSessionFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DuplicatePolarisSessionFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DuplicatePolarisSessionFile
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DuplicatePolarisSessionFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicatePolarisSessionFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPolarisSessionFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPolarisSessionFiles
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListPolarisSessionFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPolarisSessionFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolarisSessionFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolarisSessionFile
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPolarisSessionFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolarisSessionFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MovePolarisSessionFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MovePolarisSessionFile
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r MovePolarisSessionFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MovePolarisSessionFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadPolarisSessionFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadPolarisSessionFile
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UploadPolarisSessionFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadPolarisSessionFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportPolarisSessionTarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportPolarisSession
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ImportPolarisSessionTarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportPolarisSessionTarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportPolarisSessionZipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportPolarisSession
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ImportPolarisSessionZipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportPolarisSessionZipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SavePolarisSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SavePolarisSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SavePolarisSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitPolarisSessionPromptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SubmitPolarisSessionPromptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitPolarisSessionPromptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePolarisSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdatePolarisSession
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePolarisSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePolarisSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPolarisProjectVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPolarisProjectVersions
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListPolarisProjectVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPolarisProjectVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListPolarisProjectsWithResponse request returning *ListPolarisProjectsResponse
func (c *ClientWithResponses) ListPolarisProjectsWithResponse(ctx context.Context, organizationId string, workspaceId string, params *ListPolarisProjectsParams, reqEditors ...RequestEditorFn) (*ListPolarisProjectsResponse, error) {
	rsp, err := c.ListPolarisProjects(ctx, organizationId, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPolarisProjectsResponse(rsp)
}

// CreatePolarisProjectWithBodyWithResponse request with arbitrary body returning *CreatePolarisProjectResponse
func (c *ClientWithResponses) CreatePolarisProjectWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePolarisProjectResponse, error) {
	rsp, err := c.CreatePolarisProjectWithBody(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePolarisProjectResponse(rsp)
}

func (c *ClientWithResponses) CreatePolarisProjectWithResponse(ctx context.Context, organizationId string, workspaceId string, body CreatePolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePolarisProjectResponse, error) {
	rsp, err := c.CreatePolarisProject(ctx, organizationId, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePolarisProjectResponse(rsp)
}

// DeletePolarisProjectWithResponse request returning *DeletePolarisProjectResponse
func (c *ClientWithResponses) DeletePolarisProjectWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*DeletePolarisProjectResponse, error) {
	rsp, err := c.DeletePolarisProject(ctx, organizationId, workspaceId, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolarisProjectResponse(rsp)
}

// GetPolarisProjectWithResponse request returning *GetPolarisProjectResponse
func (c *ClientWithResponses) GetPolarisProjectWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*GetPolarisProjectResponse, error) {
	rsp, err := c.GetPolarisProject(ctx, organizationId, workspaceId, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolarisProjectResponse(rsp)
}

// UpdatePolarisProjectWithBodyWithResponse request with arbitrary body returning *UpdatePolarisProjectResponse
func (c *ClientWithResponses) UpdatePolarisProjectWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePolarisProjectResponse, error) {
	rsp, err := c.UpdatePolarisProjectWithBody(ctx, organizationId, workspaceId, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePolarisProjectResponse(rsp)
}

func (c *ClientWithResponses) UpdatePolarisProjectWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, body UpdatePolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePolarisProjectResponse, error) {
	rsp, err := c.UpdatePolarisProject(ctx, organizationId, workspaceId, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePolarisProjectResponse(rsp)
}

// DeployPolarisProjectWithBodyWithResponse request with arbitrary body returning *DeployPolarisProjectResponse
func (c *ClientWithResponses) DeployPolarisProjectWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeployPolarisProjectResponse, error) {
	rsp, err := c.DeployPolarisProjectWithBody(ctx, organizationId, workspaceId, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeployPolarisProjectResponse(rsp)
}

func (c *ClientWithResponses) DeployPolarisProjectWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, body DeployPolarisProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*DeployPolarisProjectResponse, error) {
	rsp, err := c.DeployPolarisProject(ctx, organizationId, workspaceId, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeployPolarisProjectResponse(rsp)
}

// CreatePolarisSessionWithResponse request returning *CreatePolarisSessionResponse
func (c *ClientWithResponses) CreatePolarisSessionWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, reqEditors ...RequestEditorFn) (*CreatePolarisSessionResponse, error) {
	rsp, err := c.CreatePolarisSession(ctx, organizationId, workspaceId, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePolarisSessionResponse(rsp)
}

// ListPolarisSessionEditsWithResponse request returning *ListPolarisSessionEditsResponse
func (c *ClientWithResponses) ListPolarisSessionEditsWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ListPolarisSessionEditsParams, reqEditors ...RequestEditorFn) (*ListPolarisSessionEditsResponse, error) {
	rsp, err := c.ListPolarisSessionEdits(ctx, organizationId, workspaceId, projectId, sessionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPolarisSessionEditsResponse(rsp)
}

// GetPolarisSessionEditWithResponse request returning *GetPolarisSessionEditResponse
func (c *ClientWithResponses) GetPolarisSessionEditWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, editId string, reqEditors ...RequestEditorFn) (*GetPolarisSessionEditResponse, error) {
	rsp, err := c.GetPolarisSessionEdit(ctx, organizationId, workspaceId, projectId, sessionId, editId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolarisSessionEditResponse(rsp)
}

// ExportPolarisSessionTarWithResponse request returning *ExportPolarisSessionTarResponse
func (c *ClientWithResponses) ExportPolarisSessionTarWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ExportPolarisSessionTarParams, reqEditors ...RequestEditorFn) (*ExportPolarisSessionTarResponse, error) {
	rsp, err := c.ExportPolarisSessionTar(ctx, organizationId, workspaceId, projectId, sessionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportPolarisSessionTarResponse(rsp)
}

// ExportPolarisSessionZipWithResponse request returning *ExportPolarisSessionZipResponse
func (c *ClientWithResponses) ExportPolarisSessionZipWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ExportPolarisSessionZipParams, reqEditors ...RequestEditorFn) (*ExportPolarisSessionZipResponse, error) {
	rsp, err := c.ExportPolarisSessionZip(ctx, organizationId, workspaceId, projectId, sessionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportPolarisSessionZipResponse(rsp)
}

// DeletePolarisSessionFileWithResponse request returning *DeletePolarisSessionFileResponse
func (c *ClientWithResponses) DeletePolarisSessionFileWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DeletePolarisSessionFileParams, reqEditors ...RequestEditorFn) (*DeletePolarisSessionFileResponse, error) {
	rsp, err := c.DeletePolarisSessionFile(ctx, organizationId, workspaceId, projectId, sessionId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePolarisSessionFileResponse(rsp)
}

// DownloadPolarisSessionFileWithResponse request returning *DownloadPolarisSessionFileResponse
func (c *ClientWithResponses) DownloadPolarisSessionFileWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DownloadPolarisSessionFileParams, reqEditors ...RequestEditorFn) (*DownloadPolarisSessionFileResponse, error) {
	rsp, err := c.DownloadPolarisSessionFile(ctx, organizationId, workspaceId, projectId, sessionId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadPolarisSessionFileResponse(rsp)
}

// DuplicatePolarisSessionFileWithBodyWithResponse request with arbitrary body returning *DuplicatePolarisSessionFileResponse
func (c *ClientWithResponses) DuplicatePolarisSessionFileWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DuplicatePolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DuplicatePolarisSessionFileResponse, error) {
	rsp, err := c.DuplicatePolarisSessionFileWithBody(ctx, organizationId, workspaceId, projectId, sessionId, path, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicatePolarisSessionFileResponse(rsp)
}

func (c *ClientWithResponses) DuplicatePolarisSessionFileWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *DuplicatePolarisSessionFileParams, body DuplicatePolarisSessionFileJSONRequestBody, reqEditors ...RequestEditorFn) (*DuplicatePolarisSessionFileResponse, error) {
	rsp, err := c.DuplicatePolarisSessionFile(ctx, organizationId, workspaceId, projectId, sessionId, path, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicatePolarisSessionFileResponse(rsp)
}

// ListPolarisSessionFilesWithResponse request returning *ListPolarisSessionFilesResponse
func (c *ClientWithResponses) ListPolarisSessionFilesWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ListPolarisSessionFilesParams, reqEditors ...RequestEditorFn) (*ListPolarisSessionFilesResponse, error) {
	rsp, err := c.ListPolarisSessionFiles(ctx, organizationId, workspaceId, projectId, sessionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPolarisSessionFilesResponse(rsp)
}

// GetPolarisSessionFileWithResponse request returning *GetPolarisSessionFileResponse
func (c *ClientWithResponses) GetPolarisSessionFileWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *GetPolarisSessionFileParams, reqEditors ...RequestEditorFn) (*GetPolarisSessionFileResponse, error) {
	rsp, err := c.GetPolarisSessionFile(ctx, organizationId, workspaceId, projectId, sessionId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolarisSessionFileResponse(rsp)
}

// MovePolarisSessionFileWithBodyWithResponse request with arbitrary body returning *MovePolarisSessionFileResponse
func (c *ClientWithResponses) MovePolarisSessionFileWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *MovePolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MovePolarisSessionFileResponse, error) {
	rsp, err := c.MovePolarisSessionFileWithBody(ctx, organizationId, workspaceId, projectId, sessionId, path, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovePolarisSessionFileResponse(rsp)
}

func (c *ClientWithResponses) MovePolarisSessionFileWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *MovePolarisSessionFileParams, body MovePolarisSessionFileJSONRequestBody, reqEditors ...RequestEditorFn) (*MovePolarisSessionFileResponse, error) {
	rsp, err := c.MovePolarisSessionFile(ctx, organizationId, workspaceId, projectId, sessionId, path, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMovePolarisSessionFileResponse(rsp)
}

// UploadPolarisSessionFileWithBodyWithResponse request with arbitrary body returning *UploadPolarisSessionFileResponse
func (c *ClientWithResponses) UploadPolarisSessionFileWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *UploadPolarisSessionFileParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadPolarisSessionFileResponse, error) {
	rsp, err := c.UploadPolarisSessionFileWithBody(ctx, organizationId, workspaceId, projectId, sessionId, path, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadPolarisSessionFileResponse(rsp)
}

func (c *ClientWithResponses) UploadPolarisSessionFileWithTextBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, path string, params *UploadPolarisSessionFileParams, body UploadPolarisSessionFileTextRequestBody, reqEditors ...RequestEditorFn) (*UploadPolarisSessionFileResponse, error) {
	rsp, err := c.UploadPolarisSessionFileWithTextBody(ctx, organizationId, workspaceId, projectId, sessionId, path, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadPolarisSessionFileResponse(rsp)
}

// ImportPolarisSessionTarWithBodyWithResponse request with arbitrary body returning *ImportPolarisSessionTarResponse
func (c *ClientWithResponses) ImportPolarisSessionTarWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ImportPolarisSessionTarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportPolarisSessionTarResponse, error) {
	rsp, err := c.ImportPolarisSessionTarWithBody(ctx, organizationId, workspaceId, projectId, sessionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportPolarisSessionTarResponse(rsp)
}

// ImportPolarisSessionZipWithBodyWithResponse request with arbitrary body returning *ImportPolarisSessionZipResponse
func (c *ClientWithResponses) ImportPolarisSessionZipWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, params *ImportPolarisSessionZipParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportPolarisSessionZipResponse, error) {
	rsp, err := c.ImportPolarisSessionZipWithBody(ctx, organizationId, workspaceId, projectId, sessionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportPolarisSessionZipResponse(rsp)
}

// SavePolarisSessionWithBodyWithResponse request with arbitrary body returning *SavePolarisSessionResponse
func (c *ClientWithResponses) SavePolarisSessionWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SavePolarisSessionResponse, error) {
	rsp, err := c.SavePolarisSessionWithBody(ctx, organizationId, workspaceId, projectId, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavePolarisSessionResponse(rsp)
}

func (c *ClientWithResponses) SavePolarisSessionWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, body SavePolarisSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*SavePolarisSessionResponse, error) {
	rsp, err := c.SavePolarisSession(ctx, organizationId, workspaceId, projectId, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSavePolarisSessionResponse(rsp)
}

// SubmitPolarisSessionPromptWithBodyWithResponse request with arbitrary body returning *SubmitPolarisSessionPromptResponse
func (c *ClientWithResponses) SubmitPolarisSessionPromptWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitPolarisSessionPromptResponse, error) {
	rsp, err := c.SubmitPolarisSessionPromptWithBody(ctx, organizationId, workspaceId, projectId, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitPolarisSessionPromptResponse(rsp)
}

func (c *ClientWithResponses) SubmitPolarisSessionPromptWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, body SubmitPolarisSessionPromptJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitPolarisSessionPromptResponse, error) {
	rsp, err := c.SubmitPolarisSessionPrompt(ctx, organizationId, workspaceId, projectId, sessionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitPolarisSessionPromptResponse(rsp)
}

// UpdatePolarisSessionWithBodyWithResponse request with arbitrary body returning *UpdatePolarisSessionResponse
func (c *ClientWithResponses) UpdatePolarisSessionWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, sessionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePolarisSessionResponse, error) {
	rsp, err := c.UpdatePolarisSessionWithBody(ctx, organizationId, workspaceId, projectId, sessionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePolarisSessionResponse(rsp)
}

// ListPolarisProjectVersionsWithResponse request returning *ListPolarisProjectVersionsResponse
func (c *ClientWithResponses) ListPolarisProjectVersionsWithResponse(ctx context.Context, organizationId string, workspaceId string, projectId string, params *ListPolarisProjectVersionsParams, reqEditors ...RequestEditorFn) (*ListPolarisProjectVersionsResponse, error) {
	rsp, err := c.ListPolarisProjectVersions(ctx, organizationId, workspaceId, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPolarisProjectVersionsResponse(rsp)
}

// ParseListPolarisProjectsResponse parses an HTTP response from a ListPolarisProjectsWithResponse call
func ParseListPolarisProjectsResponse(rsp *http.Response) (*ListPolarisProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPolarisProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolarisProjectsPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePolarisProjectResponse parses an HTTP response from a CreatePolarisProjectWithResponse call
func ParseCreatePolarisProjectResponse(rsp *http.Response) (*CreatePolarisProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePolarisProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolarisProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePolarisProjectResponse parses an HTTP response from a DeletePolarisProjectWithResponse call
func ParseDeletePolarisProjectResponse(rsp *http.Response) (*DeletePolarisProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolarisProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPolarisProjectResponse parses an HTTP response from a GetPolarisProjectWithResponse call
func ParseGetPolarisProjectResponse(rsp *http.Response) (*GetPolarisProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolarisProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolarisProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePolarisProjectResponse parses an HTTP response from a UpdatePolarisProjectWithResponse call
func ParseUpdatePolarisProjectResponse(rsp *http.Response) (*UpdatePolarisProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePolarisProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolarisProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeployPolarisProjectResponse parses an HTTP response from a DeployPolarisProjectWithResponse call
func ParseDeployPolarisProjectResponse(rsp *http.Response) (*DeployPolarisProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeployPolarisProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeployPolarisProject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePolarisSessionResponse parses an HTTP response from a CreatePolarisSessionWithResponse call
func ParseCreatePolarisSessionResponse(rsp *http.Response) (*CreatePolarisSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePolarisSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePolarisSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListPolarisSessionEditsResponse parses an HTTP response from a ListPolarisSessionEditsWithResponse call
func ParseListPolarisSessionEditsResponse(rsp *http.Response) (*ListPolarisSessionEditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPolarisSessionEditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPolarisSessionEdits
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPolarisSessionEditResponse parses an HTTP response from a GetPolarisSessionEditWithResponse call
func ParseGetPolarisSessionEditResponse(rsp *http.Response) (*GetPolarisSessionEditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolarisSessionEditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolarisSessionEditDetailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseExportPolarisSessionTarResponse parses an HTTP response from a ExportPolarisSessionTarWithResponse call
func ParseExportPolarisSessionTarResponse(rsp *http.Response) (*ExportPolarisSessionTarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportPolarisSessionTarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExportPolarisSessionZipResponse parses an HTTP response from a ExportPolarisSessionZipWithResponse call
func ParseExportPolarisSessionZipResponse(rsp *http.Response) (*ExportPolarisSessionZipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportPolarisSessionZipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePolarisSessionFileResponse parses an HTTP response from a DeletePolarisSessionFileWithResponse call
func ParseDeletePolarisSessionFileResponse(rsp *http.Response) (*DeletePolarisSessionFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePolarisSessionFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeletePolarisSessionFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDownloadPolarisSessionFileResponse parses an HTTP response from a DownloadPolarisSessionFileWithResponse call
func ParseDownloadPolarisSessionFileResponse(rsp *http.Response) (*DownloadPolarisSessionFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadPolarisSessionFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDuplicatePolarisSessionFileResponse parses an HTTP response from a DuplicatePolarisSessionFileWithResponse call
func ParseDuplicatePolarisSessionFileResponse(rsp *http.Response) (*DuplicatePolarisSessionFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DuplicatePolarisSessionFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DuplicatePolarisSessionFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListPolarisSessionFilesResponse parses an HTTP response from a ListPolarisSessionFilesWithResponse call
func ParseListPolarisSessionFilesResponse(rsp *http.Response) (*ListPolarisSessionFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPolarisSessionFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPolarisSessionFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPolarisSessionFileResponse parses an HTTP response from a GetPolarisSessionFileWithResponse call
func ParseGetPolarisSessionFileResponse(rsp *http.Response) (*GetPolarisSessionFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolarisSessionFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolarisSessionFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMovePolarisSessionFileResponse parses an HTTP response from a MovePolarisSessionFileWithResponse call
func ParseMovePolarisSessionFileResponse(rsp *http.Response) (*MovePolarisSessionFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MovePolarisSessionFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MovePolarisSessionFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUploadPolarisSessionFileResponse parses an HTTP response from a UploadPolarisSessionFileWithResponse call
func ParseUploadPolarisSessionFileResponse(rsp *http.Response) (*UploadPolarisSessionFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadPolarisSessionFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadPolarisSessionFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseImportPolarisSessionTarResponse parses an HTTP response from a ImportPolarisSessionTarWithResponse call
func ParseImportPolarisSessionTarResponse(rsp *http.Response) (*ImportPolarisSessionTarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportPolarisSessionTarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportPolarisSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseImportPolarisSessionZipResponse parses an HTTP response from a ImportPolarisSessionZipWithResponse call
func ParseImportPolarisSessionZipResponse(rsp *http.Response) (*ImportPolarisSessionZipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportPolarisSessionZipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportPolarisSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSavePolarisSessionResponse parses an HTTP response from a SavePolarisSessionWithResponse call
func ParseSavePolarisSessionResponse(rsp *http.Response) (*SavePolarisSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SavePolarisSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSubmitPolarisSessionPromptResponse parses an HTTP response from a SubmitPolarisSessionPromptWithResponse call
func ParseSubmitPolarisSessionPromptResponse(rsp *http.Response) (*SubmitPolarisSessionPromptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitPolarisSessionPromptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePolarisSessionResponse parses an HTTP response from a UpdatePolarisSessionWithResponse call
func ParseUpdatePolarisSessionResponse(rsp *http.Response) (*UpdatePolarisSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePolarisSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdatePolarisSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListPolarisProjectVersionsResponse parses an HTTP response from a ListPolarisProjectVersionsWithResponse call
func ParseListPolarisProjectVersionsResponse(rsp *http.Response) (*ListPolarisProjectVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPolarisProjectVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPolarisProjectVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
