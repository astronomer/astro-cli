// Code generated by mockery v2.14.0. DO NOT EDIT.

package azure_mocks

import (
	azblob "github.com/Azure/azure-sdk-for-go/sdk/storage/azblob"

	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ClientAPI is an autogenerated mock type for the ClientAPI type
type ClientAPI struct {
	mock.Mock
}

// NewBlockBlobClientWithNoCredential provides a mock function with given fields: blobURL, options
func (_m *ClientAPI) NewBlockBlobClientWithNoCredential(blobURL string, options *azblob.ClientOptions) (*azblob.BlockBlobClient, error) {
	ret := _m.Called(blobURL, options)

	var r0 *azblob.BlockBlobClient
	if rf, ok := ret.Get(0).(func(string, *azblob.ClientOptions) *azblob.BlockBlobClient); ok {
		r0 = rf(blobURL, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azblob.BlockBlobClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *azblob.ClientOptions) error); ok {
		r1 = rf(blobURL, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadStream provides a mock function with given fields: ctx, body, o
func (_m *ClientAPI) UploadStream(ctx context.Context, body io.Reader, o *azblob.UploadStreamOptions) (*azblob.BlockBlobCommitBlockListResponse, error) {
	ret := _m.Called(ctx, body, o)

	var r0 *azblob.BlockBlobCommitBlockListResponse
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, *azblob.UploadStreamOptions) *azblob.BlockBlobCommitBlockListResponse); ok {
		r0 = rf(ctx, body, o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*azblob.BlockBlobCommitBlockListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, *azblob.UploadStreamOptions) error); ok {
		r1 = rf(ctx, body, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientAPI creates a new instance of ClientAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientAPI(t mockConstructorTestingTNewClientAPI) *ClientAPI {
	mock := &ClientAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
