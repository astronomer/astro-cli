---
version: 2.1
jobs:
  test:
    working_directory: /go/src/github.com/astronomer/astro-cli
    docker:
      - image: asoldatenko/dnd-golang:19.03
      - image: postgres
        name: postgres
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      - image: quay.io/astronomer/ap-houston-api:0.23.15
        name: houston
        entrypoint: "yarn start"
        environment:
          NODE_ENV: "development"
          WEBSERVER__PORT: "8871"
          ORBIT__PORT: "8080"
          DATABASE_URL: "postgres://postgres:postgres@postgres:5432/postgres"
          DATABASE__CONNECTION: "postgresql://postgres:postgres@postgres:5432/postgres"
          DATABASE__SCHEMA: "public"
          PUBLIC_SIGNUPS: "true"
          EMAIL_CONFIRMATION: "false"
          EMAIL__ENABLED: "false"
          JWT__PASSPHRASE: "secretpassword"
          DEPLOYMENTS__DATABASE__CONNECTION: "postgres://postgres:postgres@postgres:5432/postgres"
          DEPLOYMENTS__DATABASE__ENABLED: "true"
          DEPLOYMENTS__LOG_HELM_VALUES: "true"
          HELM__RELEASE_VERSION: "0.7.5"
    steps:
      - test
  new-tag:
    executor: docker-executor
    steps:
      - checkout
      - commit-next-tag
  release:
    docker:
      - image: circleci/golang:1.13
    working_directory: /go/src/github.com/astronomer/astro-cli
    steps:
      - checkout
      - run: curl -sL https://git.io/goreleaser | bash
workflows:
  version: 2.1
  build-images:
    jobs:
      - test
      - approve-release:
          type: approval
          filters:
            branches:
              only: '/release-.*/'
      - new-tag:
          context:
            - github-repo
          requires:
            - approve-release
          filters:
            branches:
              only: '/release-.*/'
      - release:
          # Only run this job on git tag pushes
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
executors:
  docker-executor:
    environment:
      GIT_ORG: astronomer
    docker:
      - image: circleci/python:3
commands:
  test:
    description: "Run tests and code coverage"
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Wait for db
          command: dockerize -wait tcp://postgres:5432 -timeout 1m
      - run:
          name: Wait for houston
          command: dockerize -wait tcp://houston:8871 -timeout 2m
      - run:
          name: Run unit tests
          environment:
            HOUSTON_HOST: houston
          command: |
            make test
            bash -c "bash <(curl -s https://codecov.io/bash)"
  commit-next-tag:
    description: "Tag the commit to the release branch major.minor with the patch number incremented by one"
    parameters:
      organization:
        type: string
        default: $GIT_ORG
      repository:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - run:
          name: Determine the next version
          command: |
            set -e
            pip install --user PyGithub packaging
            NEXT_TAG=$(python .circleci/next_version.py)
            # Make this environment variable available to following steps
            echo "export NEXT_TAG=v${NEXT_TAG}" >> $BASH_ENV
      - run:
          name: Tag the Git commit
          command: |
            set -xe
            git remote set-url origin "https://astro-astronomer:${GITHUB_TOKEN}@github.com/${GIT_ORG}/${CIRCLE_PROJECT_REPONAME}.git"
            git tag $NEXT_TAG
            git push origin $NEXT_TAG
