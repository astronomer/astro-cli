---
version: 2.1
jobs:
  lint:
    working_directory: /go/src/github.com/astronomer/astro-cli
    docker:
      - image: quay.io/astronomer/ap-dind-golang:24.0.6
    resource_class: large
    steps:
      - lint
  test:
    working_directory: /go/src/github.com/astronomer/astro-cli
    docker:
      - image: quay.io/astronomer/ap-dind-golang:24.0.6
    steps:
      - test
  integration-test:
    machine:
      resource_class: medium
      image: ubuntu-2204:current
    steps:
      - integration-test
  new-tag:
    executor: docker-executor
    steps:
      - checkout
      - commit-next-tag
  release:
    docker:
      - image: golang:1.23
    working_directory: /go/src/github.com/astronomer/astro-cli
    resource_class: xlarge
    steps:
      - checkout
      - setup-cross-build-libs
      - run:
          name: goreleaser
          command: curl -sL https://raw.githubusercontent.com/goreleaser/get/master/get | bash
workflows:
  version: 2.1
  build-images:
    jobs:
      - lint
      - test
      - approve-run-integration-tests:
          type: approval
      - integration-test:
          requires:
            - lint
            - test
            - approve-run-integration-tests
      - approve-release:
          requires:
            - lint
            - test
          type: approval
          filters:
            branches:
              only: "/release-.*/"
      - new-tag:
          context:
            - github-repo
          requires:
            - approve-release
          filters:
            branches:
              only: "/release-.*/"
      - release:
          context:
            - github-repo
          # Only run this job on git tag pushes
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
executors:
  docker-executor:
    environment:
      GIT_ORG: astronomer
    docker:
      - image: cimg/python:3.11
commands:
  lint:
    description: "Run linting checks"
    steps:
      - checkout
      - run:
          name: Run golangci-lint
          command: make lint
  test:
    description: "Run tests and code coverage"
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: Run unit tests
          environment:
            HOUSTON_HOST: houston
          command: |
            make test
            bash -c "bash <(curl -s https://codecov.io/bash)"
  integration-test:
    description: "Run integration tests"
    steps:
      - checkout
      - run:
          name: Install Go
          command: |
            set -e
            cd /tmp
            curl -Lo go.tar.gz https://go.dev/dl/go1.23.4.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xvf go.tar.gz
            GOROOT=/usr/local/go go version
            echo 'export GOROOT=/usr/local/go' >> $BASH_ENV
      - run:
          name: Setup python env
          command: |
            pyenv install --skip-existing 3.11.1
            pyenv global 3.11.1
            pip install poetry
      - run:
          name: Build astro cli
          command: make build
      - run:
          name: Run integration test
          command: |
            python -m venv penv
            . penv/bin/activate
            cd integration-test && poetry install --no-root
            pytest -x -s -v dev_test.py
  commit-next-tag:
    description: "Tag the commit to the release branch major.minor with the patch number incremented by one"
    parameters:
      organization:
        type: string
        default: $GIT_ORG
      repository:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - run:
          name: Determine the next version
          command: |
            set -e
            pip install --user PyGithub packaging
            NEXT_TAG=$(python .circleci/next_version.py)
            # Make this environment variable available to following steps
            echo "export NEXT_TAG=v${NEXT_TAG}" >> $BASH_ENV
      - run:
          name: Tag the Git commit
          command: |
            set -xe
            git remote set-url origin "https://astro-astronomer:${GITHUB_TOKEN}@github.com/${GIT_ORG}/${CIRCLE_PROJECT_REPONAME}.git"
            git tag $NEXT_TAG
            git push origin $NEXT_TAG

  setup-cross-build-libs:
    description: "Setup MacOS cross build libraries via osxcross"
    steps:
      - run:
          name: Install cross build libraries
          command: |
            apt-get update && apt-get install -y clang llvm cmake libssl-dev patch zlib1g-dev xz-utils
            git clone https://github.com/tpoechtrager/osxcross.git /osxcross
            wget https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz -P /osxcross/tarballs/
            cd /osxcross && UNATTENDED=yes ./build.sh
            echo 'export PATH="/osxcross/target/bin:$PATH"' >> $BASH_ENV
