// Package astrocore provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package astrocore

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	JWTScopes = "JWT.Scopes"
)

// Defines values for BasicSubjectProfileSubjectType.
const (
	SERVICEKEY BasicSubjectProfileSubjectType = "SERVICEKEY"
	USER       BasicSubjectProfileSubjectType = "USER"
)

// Defines values for ClusterCloudProvider.
const (
	ClusterCloudProviderAws   ClusterCloudProvider = "aws"
	ClusterCloudProviderAzure ClusterCloudProvider = "azure"
	ClusterCloudProviderGcp   ClusterCloudProvider = "gcp"
)

// Defines values for ClusterStatus.
const (
	ClusterStatusCREATED      ClusterStatus = "CREATED"
	ClusterStatusCREATEFAILED ClusterStatus = "CREATE_FAILED"
	ClusterStatusCREATING     ClusterStatus = "CREATING"
	ClusterStatusDELETED      ClusterStatus = "DELETED"
	ClusterStatusDELETEFAILED ClusterStatus = "DELETE_FAILED"
	ClusterStatusDELETING     ClusterStatus = "DELETING"
	ClusterStatusFORCEDELETED ClusterStatus = "FORCE_DELETED"
	ClusterStatusUPDATING     ClusterStatus = "UPDATING"
)

// Defines values for ClusterType.
const (
	ClusterTypeBRINGYOUROWNCLOUD ClusterType = "BRING_YOUR_OWN_CLOUD"
	ClusterTypeHOSTED            ClusterType = "HOSTED"
	ClusterTypeSHARED            ClusterType = "SHARED"
	ClusterTypeVIRTUALRUNTIMES   ClusterType = "VIRTUAL_RUNTIMES"
)

// Defines values for ClusterDetailedCloudProvider.
const (
	ClusterDetailedCloudProviderAws   ClusterDetailedCloudProvider = "aws"
	ClusterDetailedCloudProviderAzure ClusterDetailedCloudProvider = "azure"
	ClusterDetailedCloudProviderGcp   ClusterDetailedCloudProvider = "gcp"
)

// Defines values for ClusterDetailedStatus.
const (
	ClusterDetailedStatusCREATED      ClusterDetailedStatus = "CREATED"
	ClusterDetailedStatusCREATEFAILED ClusterDetailedStatus = "CREATE_FAILED"
	ClusterDetailedStatusCREATING     ClusterDetailedStatus = "CREATING"
	ClusterDetailedStatusDELETED      ClusterDetailedStatus = "DELETED"
	ClusterDetailedStatusDELETEFAILED ClusterDetailedStatus = "DELETE_FAILED"
	ClusterDetailedStatusDELETING     ClusterDetailedStatus = "DELETING"
	ClusterDetailedStatusFORCEDELETED ClusterDetailedStatus = "FORCE_DELETED"
	ClusterDetailedStatusUPDATING     ClusterDetailedStatus = "UPDATING"
)

// Defines values for ClusterDetailedType.
const (
	ClusterDetailedTypeBRINGYOUROWNCLOUD ClusterDetailedType = "BRING_YOUR_OWN_CLOUD"
	ClusterDetailedTypeHOSTED            ClusterDetailedType = "HOSTED"
	ClusterDetailedTypeSHARED            ClusterDetailedType = "SHARED"
	ClusterDetailedTypeVIRTUALRUNTIMES   ClusterDetailedType = "VIRTUAL_RUNTIMES"
)

// Defines values for CreateAwsClusterRequestType.
const (
	CreateAwsClusterRequestTypeBRINGYOUROWNCLOUD CreateAwsClusterRequestType = "BRING_YOUR_OWN_CLOUD"
	CreateAwsClusterRequestTypeHOSTED            CreateAwsClusterRequestType = "HOSTED"
	CreateAwsClusterRequestTypeSHARED            CreateAwsClusterRequestType = "SHARED"
	CreateAwsClusterRequestTypeVIRTUALRUNTIMES   CreateAwsClusterRequestType = "VIRTUAL_RUNTIMES"
)

// Defines values for CreateAzureClusterRequestType.
const (
	CreateAzureClusterRequestTypeBRINGYOUROWNCLOUD CreateAzureClusterRequestType = "BRING_YOUR_OWN_CLOUD"
	CreateAzureClusterRequestTypeHOSTED            CreateAzureClusterRequestType = "HOSTED"
	CreateAzureClusterRequestTypeSHARED            CreateAzureClusterRequestType = "SHARED"
	CreateAzureClusterRequestTypeVIRTUALRUNTIMES   CreateAzureClusterRequestType = "VIRTUAL_RUNTIMES"
)

// Defines values for CreateGcpClusterRequestType.
const (
	CreateGcpClusterRequestTypeBRINGYOUROWNCLOUD CreateGcpClusterRequestType = "BRING_YOUR_OWN_CLOUD"
	CreateGcpClusterRequestTypeHOSTED            CreateGcpClusterRequestType = "HOSTED"
	CreateGcpClusterRequestTypeSHARED            CreateGcpClusterRequestType = "SHARED"
	CreateGcpClusterRequestTypeVIRTUALRUNTIMES   CreateGcpClusterRequestType = "VIRTUAL_RUNTIMES"
)

// Defines values for CreateManagedDomainRequestEnforcedLogins.
const (
	CreateManagedDomainRequestEnforcedLoginsGithub   CreateManagedDomainRequestEnforcedLogins = "github"
	CreateManagedDomainRequestEnforcedLoginsGoogle   CreateManagedDomainRequestEnforcedLogins = "google"
	CreateManagedDomainRequestEnforcedLoginsPassword CreateManagedDomainRequestEnforcedLogins = "password"
	CreateManagedDomainRequestEnforcedLoginsSso      CreateManagedDomainRequestEnforcedLogins = "sso"
)

// Defines values for EntitlementRequiredTier.
const (
	EntitlementRequiredTierBASIC            EntitlementRequiredTier = "BASIC"
	EntitlementRequiredTierBUSINESSCRITICAL EntitlementRequiredTier = "BUSINESS_CRITICAL"
	EntitlementRequiredTierPREMIUM          EntitlementRequiredTier = "PREMIUM"
	EntitlementRequiredTierSTANDARD         EntitlementRequiredTier = "STANDARD"
)

// Defines values for ManagedDomainStatus.
const (
	PENDING  ManagedDomainStatus = "PENDING"
	VERIFIED ManagedDomainStatus = "VERIFIED"
)

// Defines values for OrganizationProduct.
const (
	OrganizationProductASTROINTERNAL OrganizationProduct = "ASTRO_INTERNAL"
	OrganizationProductHOSTED        OrganizationProduct = "HOSTED"
	OrganizationProductHYBRID        OrganizationProduct = "HYBRID"
)

// Defines values for OrganizationProductTier.
const (
	OrganizationProductTierBASIC            OrganizationProductTier = "BASIC"
	OrganizationProductTierBUSINESSCRITICAL OrganizationProductTier = "BUSINESS_CRITICAL"
	OrganizationProductTierPREMIUM          OrganizationProductTier = "PREMIUM"
	OrganizationProductTierSTANDARD         OrganizationProductTier = "STANDARD"
)

// Defines values for SharedClusterCloudProvider.
const (
	SharedClusterCloudProviderAws   SharedClusterCloudProvider = "aws"
	SharedClusterCloudProviderAzure SharedClusterCloudProvider = "azure"
	SharedClusterCloudProviderGcp   SharedClusterCloudProvider = "gcp"
)

// Defines values for SharedClusterStatus.
const (
	SharedClusterStatusCREATED      SharedClusterStatus = "CREATED"
	SharedClusterStatusCREATEFAILED SharedClusterStatus = "CREATE_FAILED"
	SharedClusterStatusCREATING     SharedClusterStatus = "CREATING"
	SharedClusterStatusDELETED      SharedClusterStatus = "DELETED"
	SharedClusterStatusDELETEFAILED SharedClusterStatus = "DELETE_FAILED"
	SharedClusterStatusDELETING     SharedClusterStatus = "DELETING"
	SharedClusterStatusFORCEDELETED SharedClusterStatus = "FORCE_DELETED"
	SharedClusterStatusUPDATING     SharedClusterStatus = "UPDATING"
)

// Defines values for SsoConnectionConfigStrategy.
const (
	Samlp SsoConnectionConfigStrategy = "samlp"
	Waad  SsoConnectionConfigStrategy = "waad"
)

// Defines values for TaskInstanceState.
const (
	TaskInstanceStateDeferred        TaskInstanceState = "deferred"
	TaskInstanceStateFailed          TaskInstanceState = "failed"
	TaskInstanceStateNone            TaskInstanceState = "none"
	TaskInstanceStateQueued          TaskInstanceState = "queued"
	TaskInstanceStateRemoved         TaskInstanceState = "removed"
	TaskInstanceStateRestarting      TaskInstanceState = "restarting"
	TaskInstanceStateRunning         TaskInstanceState = "running"
	TaskInstanceStateScheduled       TaskInstanceState = "scheduled"
	TaskInstanceStateSkipped         TaskInstanceState = "skipped"
	TaskInstanceStateSuccess         TaskInstanceState = "success"
	TaskInstanceStateUpForReschedule TaskInstanceState = "upForReschedule"
	TaskInstanceStateUpForRetry      TaskInstanceState = "upForRetry"
	TaskInstanceStateUpstreamFailed  TaskInstanceState = "upstreamFailed"
)

// Defines values for UpdateInviteRequestInviteStatus.
const (
	Accept UpdateInviteRequestInviteStatus = "accept"
	Reject UpdateInviteRequestInviteStatus = "reject"
)

// Defines values for UpdateManagedDomainRequestEnforcedLogins.
const (
	UpdateManagedDomainRequestEnforcedLoginsGithub   UpdateManagedDomainRequestEnforcedLogins = "github"
	UpdateManagedDomainRequestEnforcedLoginsGoogle   UpdateManagedDomainRequestEnforcedLogins = "google"
	UpdateManagedDomainRequestEnforcedLoginsPassword UpdateManagedDomainRequestEnforcedLogins = "password"
	UpdateManagedDomainRequestEnforcedLoginsSso      UpdateManagedDomainRequestEnforcedLogins = "sso"
)

// Defines values for GetSharedClusterParamsCloudProvider.
const (
	GetSharedClusterParamsCloudProviderAws   GetSharedClusterParamsCloudProvider = "aws"
	GetSharedClusterParamsCloudProviderAzure GetSharedClusterParamsCloudProvider = "azure"
	GetSharedClusterParamsCloudProviderGcp   GetSharedClusterParamsCloudProvider = "gcp"
)

// Defines values for GetClusterOptionsParamsProvider.
const (
	GetClusterOptionsParamsProviderAws   GetClusterOptionsParamsProvider = "aws"
	GetClusterOptionsParamsProviderAzure GetClusterOptionsParamsProvider = "azure"
	GetClusterOptionsParamsProviderGcp   GetClusterOptionsParamsProvider = "gcp"
)

// Defines values for GetClusterOptionsParamsType.
const (
	GetClusterOptionsParamsTypeBRINGYOUROWNCLOUD GetClusterOptionsParamsType = "BRING_YOUR_OWN_CLOUD"
	GetClusterOptionsParamsTypeHOSTED            GetClusterOptionsParamsType = "HOSTED"
	GetClusterOptionsParamsTypeSHARED            GetClusterOptionsParamsType = "SHARED"
	GetClusterOptionsParamsTypeVIRTUALRUNTIMES   GetClusterOptionsParamsType = "VIRTUAL_RUNTIMES"
)

// Defines values for ListOrganizationsParamsTrialStatus.
const (
	ListOrganizationsParamsTrialStatusActive  ListOrganizationsParamsTrialStatus = "active"
	ListOrganizationsParamsTrialStatusAll     ListOrganizationsParamsTrialStatus = "all"
	ListOrganizationsParamsTrialStatusExpired ListOrganizationsParamsTrialStatus = "expired"
	ListOrganizationsParamsTrialStatusNone    ListOrganizationsParamsTrialStatus = "none"
)

// Defines values for ListOrganizationsParamsProductTier.
const (
	BASIC            ListOrganizationsParamsProductTier = "BASIC"
	BUSINESSCRITICAL ListOrganizationsParamsProductTier = "BUSINESS_CRITICAL"
	PREMIUM          ListOrganizationsParamsProductTier = "PREMIUM"
	STANDARD         ListOrganizationsParamsProductTier = "STANDARD"
)

// Defines values for ListOrganizationsParamsProduct.
const (
	ListOrganizationsParamsProductASTROINTERNAL ListOrganizationsParamsProduct = "ASTRO_INTERNAL"
	ListOrganizationsParamsProductHOSTED        ListOrganizationsParamsProduct = "HOSTED"
	ListOrganizationsParamsProductHYBRID        ListOrganizationsParamsProduct = "HYBRID"
)

// Defines values for ListOrganizationsParamsSorts.
const (
	ListOrganizationsParamsSortsAuthServiceIdAsc  ListOrganizationsParamsSorts = "authServiceId:asc"
	ListOrganizationsParamsSortsAuthServiceIdDesc ListOrganizationsParamsSorts = "authServiceId:desc"
	ListOrganizationsParamsSortsCreatedAtAsc      ListOrganizationsParamsSorts = "createdAt:asc"
	ListOrganizationsParamsSortsCreatedAtDesc     ListOrganizationsParamsSorts = "createdAt:desc"
	ListOrganizationsParamsSortsIdAsc             ListOrganizationsParamsSorts = "id:asc"
	ListOrganizationsParamsSortsIdDesc            ListOrganizationsParamsSorts = "id:desc"
	ListOrganizationsParamsSortsNameAsc           ListOrganizationsParamsSorts = "name:asc"
	ListOrganizationsParamsSortsNameDesc          ListOrganizationsParamsSorts = "name:desc"
	ListOrganizationsParamsSortsProductAsc        ListOrganizationsParamsSorts = "product:asc"
	ListOrganizationsParamsSortsProductDesc       ListOrganizationsParamsSorts = "product:desc"
	ListOrganizationsParamsSortsProductTierAsc    ListOrganizationsParamsSorts = "productTier:asc"
	ListOrganizationsParamsSortsProductTierDesc   ListOrganizationsParamsSorts = "productTier:desc"
	ListOrganizationsParamsSortsShortNameAsc      ListOrganizationsParamsSorts = "shortName:asc"
	ListOrganizationsParamsSortsShortNameDesc     ListOrganizationsParamsSorts = "shortName:desc"
	ListOrganizationsParamsSortsUpdatedAtAsc      ListOrganizationsParamsSorts = "updatedAt:asc"
	ListOrganizationsParamsSortsUpdatedAtDesc     ListOrganizationsParamsSorts = "updatedAt:desc"
)

// Defines values for ListClustersParamsProvider.
const (
	ListClustersParamsProviderAws   ListClustersParamsProvider = "aws"
	ListClustersParamsProviderAzure ListClustersParamsProvider = "azure"
	ListClustersParamsProviderGcp   ListClustersParamsProvider = "gcp"
)

// Defines values for ListClustersParamsType.
const (
	BRINGYOUROWNCLOUD ListClustersParamsType = "BRING_YOUR_OWN_CLOUD"
	HOSTED            ListClustersParamsType = "HOSTED"
	SHARED            ListClustersParamsType = "SHARED"
	VIRTUALRUNTIMES   ListClustersParamsType = "VIRTUAL_RUNTIMES"
)

// Defines values for ListClustersParamsStatus.
const (
	ListClustersParamsStatusCREATED      ListClustersParamsStatus = "CREATED"
	ListClustersParamsStatusCREATEFAILED ListClustersParamsStatus = "CREATE_FAILED"
	ListClustersParamsStatusCREATING     ListClustersParamsStatus = "CREATING"
	ListClustersParamsStatusDELETED      ListClustersParamsStatus = "DELETED"
	ListClustersParamsStatusDELETEFAILED ListClustersParamsStatus = "DELETE_FAILED"
	ListClustersParamsStatusDELETING     ListClustersParamsStatus = "DELETING"
	ListClustersParamsStatusFORCEDELETED ListClustersParamsStatus = "FORCE_DELETED"
	ListClustersParamsStatusUPDATING     ListClustersParamsStatus = "UPDATING"
)

// Defines values for ListClustersParamsSorts.
const (
	ListClustersParamsSortsCloudProviderAsc        ListClustersParamsSorts = "cloudProvider:asc"
	ListClustersParamsSortsCloudProviderDesc       ListClustersParamsSorts = "cloudProvider:desc"
	ListClustersParamsSortsCreatedAtAsc            ListClustersParamsSorts = "createdAt:asc"
	ListClustersParamsSortsCreatedAtDesc           ListClustersParamsSorts = "createdAt:desc"
	ListClustersParamsSortsDbInstanceTypeAsc       ListClustersParamsSorts = "dbInstanceType:asc"
	ListClustersParamsSortsDbInstanceTypeDesc      ListClustersParamsSorts = "dbInstanceType:desc"
	ListClustersParamsSortsIdAsc                   ListClustersParamsSorts = "id:asc"
	ListClustersParamsSortsIdDesc                  ListClustersParamsSorts = "id:desc"
	ListClustersParamsSortsNameAsc                 ListClustersParamsSorts = "name:asc"
	ListClustersParamsSortsNameDesc                ListClustersParamsSorts = "name:desc"
	ListClustersParamsSortsOrganizationIdAsc       ListClustersParamsSorts = "organizationId:asc"
	ListClustersParamsSortsOrganizationIdDesc      ListClustersParamsSorts = "organizationId:desc"
	ListClustersParamsSortsPodSubnetRangeAsc       ListClustersParamsSorts = "podSubnetRange:asc"
	ListClustersParamsSortsPodSubnetRangeDesc      ListClustersParamsSorts = "podSubnetRange:desc"
	ListClustersParamsSortsProviderAccountAsc      ListClustersParamsSorts = "providerAccount:asc"
	ListClustersParamsSortsProviderAccountDesc     ListClustersParamsSorts = "providerAccount:desc"
	ListClustersParamsSortsRegionAsc               ListClustersParamsSorts = "region:asc"
	ListClustersParamsSortsRegionDesc              ListClustersParamsSorts = "region:desc"
	ListClustersParamsSortsServicePeeringRangeAsc  ListClustersParamsSorts = "servicePeeringRange:asc"
	ListClustersParamsSortsServicePeeringRangeDesc ListClustersParamsSorts = "servicePeeringRange:desc"
	ListClustersParamsSortsServiceSubnetRangeAsc   ListClustersParamsSorts = "serviceSubnetRange:asc"
	ListClustersParamsSortsServiceSubnetRangeDesc  ListClustersParamsSorts = "serviceSubnetRange:desc"
	ListClustersParamsSortsTemplateVersionAsc      ListClustersParamsSorts = "templateVersion:asc"
	ListClustersParamsSortsTemplateVersionDesc     ListClustersParamsSorts = "templateVersion:desc"
	ListClustersParamsSortsUpdatedAtAsc            ListClustersParamsSorts = "updatedAt:asc"
	ListClustersParamsSortsUpdatedAtDesc           ListClustersParamsSorts = "updatedAt:desc"
	ListClustersParamsSortsVpcSubnetRangeAsc       ListClustersParamsSorts = "vpcSubnetRange:asc"
	ListClustersParamsSortsVpcSubnetRangeDesc      ListClustersParamsSorts = "vpcSubnetRange:desc"
)

// Defines values for ListOrgUsersParamsSorts.
const (
	ListOrgUsersParamsSortsCreatedAtAsc  ListOrgUsersParamsSorts = "createdAt:asc"
	ListOrgUsersParamsSortsCreatedAtDesc ListOrgUsersParamsSorts = "createdAt:desc"
	ListOrgUsersParamsSortsFullNameAsc   ListOrgUsersParamsSorts = "fullName:asc"
	ListOrgUsersParamsSortsFullNameDesc  ListOrgUsersParamsSorts = "fullName:desc"
	ListOrgUsersParamsSortsIdAsc         ListOrgUsersParamsSorts = "id:asc"
	ListOrgUsersParamsSortsIdDesc        ListOrgUsersParamsSorts = "id:desc"
	ListOrgUsersParamsSortsOrgRoleAsc    ListOrgUsersParamsSorts = "orgRole:asc"
	ListOrgUsersParamsSortsOrgRoleDesc   ListOrgUsersParamsSorts = "orgRole:desc"
	ListOrgUsersParamsSortsStatusAsc     ListOrgUsersParamsSorts = "status:asc"
	ListOrgUsersParamsSortsStatusDesc    ListOrgUsersParamsSorts = "status:desc"
	ListOrgUsersParamsSortsUpdatedAtAsc  ListOrgUsersParamsSorts = "updatedAt:asc"
	ListOrgUsersParamsSortsUpdatedAtDesc ListOrgUsersParamsSorts = "updatedAt:desc"
	ListOrgUsersParamsSortsUsernameAsc   ListOrgUsersParamsSorts = "username:asc"
	ListOrgUsersParamsSortsUsernameDesc  ListOrgUsersParamsSorts = "username:desc"
)

// Defines values for ListWorkspacesParamsSorts.
const (
	ListWorkspacesParamsSortsCreatedAtAsc       ListWorkspacesParamsSorts = "createdAt:asc"
	ListWorkspacesParamsSortsCreatedAtDesc      ListWorkspacesParamsSorts = "createdAt:desc"
	ListWorkspacesParamsSortsDescriptionAsc     ListWorkspacesParamsSorts = "description:asc"
	ListWorkspacesParamsSortsDescriptionDesc    ListWorkspacesParamsSorts = "description:desc"
	ListWorkspacesParamsSortsIdAsc              ListWorkspacesParamsSorts = "id:asc"
	ListWorkspacesParamsSortsIdDesc             ListWorkspacesParamsSorts = "id:desc"
	ListWorkspacesParamsSortsNameAsc            ListWorkspacesParamsSorts = "name:asc"
	ListWorkspacesParamsSortsNameDesc           ListWorkspacesParamsSorts = "name:desc"
	ListWorkspacesParamsSortsOrganizationIdAsc  ListWorkspacesParamsSorts = "organizationId:asc"
	ListWorkspacesParamsSortsOrganizationIdDesc ListWorkspacesParamsSorts = "organizationId:desc"
	ListWorkspacesParamsSortsUpdatedAtAsc       ListWorkspacesParamsSorts = "updatedAt:asc"
	ListWorkspacesParamsSortsUpdatedAtDesc      ListWorkspacesParamsSorts = "updatedAt:desc"
)

// Defines values for ListWorkspaceUsersParamsSorts.
const (
	CreatedAtAsc      ListWorkspaceUsersParamsSorts = "createdAt:asc"
	CreatedAtDesc     ListWorkspaceUsersParamsSorts = "createdAt:desc"
	FullNameAsc       ListWorkspaceUsersParamsSorts = "fullName:asc"
	FullNameDesc      ListWorkspaceUsersParamsSorts = "fullName:desc"
	IdAsc             ListWorkspaceUsersParamsSorts = "id:asc"
	IdDesc            ListWorkspaceUsersParamsSorts = "id:desc"
	StatusAsc         ListWorkspaceUsersParamsSorts = "status:asc"
	StatusDesc        ListWorkspaceUsersParamsSorts = "status:desc"
	UpdatedAtAsc      ListWorkspaceUsersParamsSorts = "updatedAt:asc"
	UpdatedAtDesc     ListWorkspaceUsersParamsSorts = "updatedAt:desc"
	UsernameAsc       ListWorkspaceUsersParamsSorts = "username:asc"
	UsernameDesc      ListWorkspaceUsersParamsSorts = "username:desc"
	WorkspaceRoleAsc  ListWorkspaceUsersParamsSorts = "workspaceRole:asc"
	WorkspaceRoleDesc ListWorkspaceUsersParamsSorts = "workspaceRole:desc"
)

// AstroBaseUnit defines model for AstroBaseUnit.
type AstroBaseUnit struct {
	Cpu    int `json:"cpu"`
	Memory int `json:"memory"`
}

// AuConfigs defines model for AuConfigs.
type AuConfigs struct {
	Default int  `json:"default"`
	Limit   int  `json:"limit"`
	Request *int `json:"request,omitempty"`
}

// BasicSubjectProfile defines model for BasicSubjectProfile.
type BasicSubjectProfile struct {
	AvatarUrl   *string                         `json:"avatarUrl,omitempty"`
	FullName    *string                         `json:"fullName,omitempty"`
	Id          string                          `json:"id"`
	SubjectType *BasicSubjectProfileSubjectType `json:"subjectType,omitempty"`
	Username    *string                         `json:"username,omitempty"`
}

// BasicSubjectProfileSubjectType defines model for BasicSubjectProfile.SubjectType.
type BasicSubjectProfileSubjectType string

// Cluster defines model for Cluster.
type Cluster struct {
	AppliedTemplateVersion string               `json:"appliedTemplateVersion"`
	CloudProvider          ClusterCloudProvider `json:"cloudProvider"`
	CreatedAt              time.Time            `json:"createdAt"`
	DbInstanceType         string               `json:"dbInstanceType"`
	DeletedAt              *string              `json:"deletedAt,omitempty"`
	Id                     string               `json:"id"`
	IsDryRun               bool                 `json:"isDryRun"`
	IsLimited              bool                 `json:"isLimited"`
	K8sTags                []ClusterTag         `json:"k8sTags"`
	Metadata               ClusterMetadata      `json:"metadata"`
	Name                   string               `json:"name"`
	NodePools              []NodePool           `json:"nodePools"`
	OrganizationId         string               `json:"organizationId"`
	PodSubnetRange         string               `json:"podSubnetRange"`
	ProviderAccount        string               `json:"providerAccount"`
	Region                 string               `json:"region"`
	ServicePeeringRange    string               `json:"servicePeeringRange"`
	ServiceSubnetRange     string               `json:"serviceSubnetRange"`
	Status                 ClusterStatus        `json:"status"`
	TemplateUrl            string               `json:"templateUrl"`
	TemplateVersion        string               `json:"templateVersion"`
	TemporalRunId          string               `json:"temporalRunId"`
	TenantId               string               `json:"tenantId"`
	Type                   ClusterType          `json:"type"`
	UpdatedAt              time.Time            `json:"updatedAt"`
	VpcSubnetRange         string               `json:"vpcSubnetRange"`
	Workspaces             []string             `json:"workspaces"`
}

// ClusterCloudProvider defines model for Cluster.CloudProvider.
type ClusterCloudProvider string

// ClusterStatus defines model for Cluster.Status.
type ClusterStatus string

// ClusterType defines model for Cluster.Type.
type ClusterType string

// ClusterDetailed defines model for ClusterDetailed.
type ClusterDetailed struct {
	AppliedTemplateVersion     string                       `json:"appliedTemplateVersion"`
	CloudProvider              ClusterDetailedCloudProvider `json:"cloudProvider"`
	CreatedAt                  time.Time                    `json:"createdAt"`
	CreatedBy                  BasicSubjectProfile          `json:"createdBy"`
	DbInstanceType             string                       `json:"dbInstanceType"`
	DeletedAt                  *string                      `json:"deletedAt,omitempty"`
	Id                         string                       `json:"id"`
	IsDryRun                   bool                         `json:"isDryRun"`
	IsLimited                  bool                         `json:"isLimited"`
	K8sTags                    []ClusterTag                 `json:"k8sTags"`
	Metadata                   ClusterMetadata              `json:"metadata"`
	Name                       string                       `json:"name"`
	NodePools                  []NodePool                   `json:"nodePools"`
	OrgShortName               string                       `json:"orgShortName"`
	OrganizationId             string                       `json:"organizationId"`
	OrganizationName           string                       `json:"organizationName"`
	OrganizationProductTier    string                       `json:"organizationProductTier"`
	OrganizationTrialExpiresAt string                       `json:"organizationTrialExpiresAt"`
	PodSubnetRange             string                       `json:"podSubnetRange"`
	ProviderAccount            string                       `json:"providerAccount"`
	Region                     string                       `json:"region"`
	ServicePeeringRange        string                       `json:"servicePeeringRange"`
	ServiceSubnetRange         string                       `json:"serviceSubnetRange"`
	Status                     ClusterDetailedStatus        `json:"status"`
	TemplateUrl                string                       `json:"templateUrl"`
	TemplateVersion            string                       `json:"templateVersion"`
	TemporalRunId              string                       `json:"temporalRunId"`
	TenantId                   string                       `json:"tenantId"`
	Type                       ClusterDetailedType          `json:"type"`
	UpdatedAt                  time.Time                    `json:"updatedAt"`
	UpdatedBy                  BasicSubjectProfile          `json:"updatedBy"`
	VpcSubnetRange             string                       `json:"vpcSubnetRange"`
	Workspaces                 []string                     `json:"workspaces"`
}

// ClusterDetailedCloudProvider defines model for ClusterDetailed.CloudProvider.
type ClusterDetailedCloudProvider string

// ClusterDetailedStatus defines model for ClusterDetailed.Status.
type ClusterDetailedStatus string

// ClusterDetailedType defines model for ClusterDetailed.Type.
type ClusterDetailedType string

// ClusterMetadata defines model for ClusterMetadata.
type ClusterMetadata struct {
	ExternalIPs *[]string `json:"externalIPs,omitempty"`
}

// ClusterOptions defines model for ClusterOptions.
type ClusterOptions struct {
	DatabaseInstances          []ProviderInstanceType `json:"databaseInstances"`
	DefaultDatabaseInstance    ProviderInstanceType   `json:"defaultDatabaseInstance"`
	DefaultNodeInstance        ProviderInstanceType   `json:"defaultNodeInstance"`
	DefaultPodSubnetRange      *string                `json:"defaultPodSubnetRange,omitempty"`
	DefaultRegion              ProviderRegion         `json:"defaultRegion"`
	DefaultServicePeeringRange *string                `json:"defaultServicePeeringRange,omitempty"`
	DefaultServiceSubnetRange  *string                `json:"defaultServiceSubnetRange,omitempty"`
	DefaultVpcSubnetRange      string                 `json:"defaultVpcSubnetRange"`
	NodeCountDefault           int                    `json:"nodeCountDefault"`
	NodeCountMax               int                    `json:"nodeCountMax"`
	NodeCountMin               int                    `json:"nodeCountMin"`
	NodeInstances              []ProviderInstanceType `json:"nodeInstances"`
	Provider                   string                 `json:"provider"`
	Regions                    []ProviderRegion       `json:"regions"`
	TemplateVersions           []TemplateVersion      `json:"templateVersions"`
}

// ClusterTag defines model for ClusterTag.
type ClusterTag struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ClustersPaginated defines model for ClustersPaginated.
type ClustersPaginated struct {
	Clusters   []Cluster `json:"clusters"`
	Limit      int       `json:"limit"`
	Offset     int       `json:"offset"`
	TotalCount int       `json:"totalCount"`
}

// ComponentsOptions defines model for ComponentsOptions.
type ComponentsOptions struct {
	Scheduler ContainerOptions `json:"scheduler"`
	Workers   ContainerOptions `json:"workers"`
}

// ContainerOptions defines model for ContainerOptions.
type ContainerOptions struct {
	Au AuConfigs `json:"au"`
}

// CreateAwsClusterRequest defines model for CreateAwsClusterRequest.
type CreateAwsClusterRequest struct {
	DbInstanceType  string                      `json:"dbInstanceType"`
	IsDryRun        *bool                       `json:"isDryRun,omitempty"`
	K8sTags         *[]ClusterTag               `json:"k8sTags,omitempty"`
	Name            string                      `json:"name"`
	NodePools       *[]CreateNodePoolRequest    `json:"nodePools,omitempty"`
	ProviderAccount *string                     `json:"providerAccount,omitempty"`
	Region          string                      `json:"region"`
	TemplateVersion string                      `json:"templateVersion"`
	Type            CreateAwsClusterRequestType `json:"type"`
	VpcSubnetRange  string                      `json:"vpcSubnetRange"`
}

// CreateAwsClusterRequestType defines model for CreateAwsClusterRequest.Type.
type CreateAwsClusterRequestType string

// CreateAzureClusterRequest defines model for CreateAzureClusterRequest.
type CreateAzureClusterRequest struct {
	DbInstanceType  string                        `json:"dbInstanceType"`
	IsDryRun        *bool                         `json:"isDryRun,omitempty"`
	K8sTags         *[]ClusterTag                 `json:"k8sTags,omitempty"`
	Name            string                        `json:"name"`
	NodePools       *[]CreateNodePoolRequest      `json:"nodePools,omitempty"`
	ProviderAccount string                        `json:"providerAccount"`
	Region          string                        `json:"region"`
	TemplateVersion string                        `json:"templateVersion"`
	TenantId        string                        `json:"tenantId"`
	Type            CreateAzureClusterRequestType `json:"type"`
	VpcSubnetRange  string                        `json:"vpcSubnetRange"`
}

// CreateAzureClusterRequestType defines model for CreateAzureClusterRequest.Type.
type CreateAzureClusterRequestType string

// CreateGcpClusterRequest defines model for CreateGcpClusterRequest.
type CreateGcpClusterRequest struct {
	DbInstanceType      string                      `json:"dbInstanceType"`
	IsDryRun            *bool                       `json:"isDryRun,omitempty"`
	K8sTags             *[]ClusterTag               `json:"k8sTags,omitempty"`
	Name                string                      `json:"name"`
	NodePools           *[]CreateNodePoolRequest    `json:"nodePools,omitempty"`
	PodSubnetRange      string                      `json:"podSubnetRange"`
	ProviderAccount     *string                     `json:"providerAccount,omitempty"`
	Region              string                      `json:"region"`
	ServicePeeringRange string                      `json:"servicePeeringRange"`
	ServiceSubnetRange  string                      `json:"serviceSubnetRange"`
	TemplateVersion     string                      `json:"templateVersion"`
	Type                CreateGcpClusterRequestType `json:"type"`
	VpcSubnetRange      string                      `json:"vpcSubnetRange"`
}

// CreateGcpClusterRequestType defines model for CreateGcpClusterRequest.Type.
type CreateGcpClusterRequestType string

// CreateManagedDomainRequest defines model for CreateManagedDomainRequest.
type CreateManagedDomainRequest struct {
	EnforcedLogins *[]CreateManagedDomainRequestEnforcedLogins `json:"enforcedLogins,omitempty"`
	Name           string                                      `json:"name"`
}

// CreateManagedDomainRequestEnforcedLogins defines model for CreateManagedDomainRequest.EnforcedLogins.
type CreateManagedDomainRequestEnforcedLogins string

// CreateNodePoolRequest defines model for CreateNodePoolRequest.
type CreateNodePoolRequest struct {
	IsDefault        bool   `json:"isDefault"`
	MaxNodeCount     int    `json:"maxNodeCount"`
	Name             string `json:"name"`
	NodeInstanceType string `json:"nodeInstanceType"`
}

// CreateSsoConnectionRequest defines model for CreateSsoConnectionRequest.
type CreateSsoConnectionRequest struct {
	Auth0ConnectionName      string                       `json:"auth0ConnectionName"`
	Configuration            SsoConnectionConfig          `json:"configuration"`
	IdpInitiatedLoginEnabled *bool                        `json:"idpInitiatedLoginEnabled,omitempty"`
	JitPolicy                *JitPolicy                   `json:"jitPolicy,omitempty"`
	ManagedDomains           []SsoConnectionManagedDomain `json:"managedDomains"`
}

// CreateUserInviteRequest defines model for CreateUserInviteRequest.
type CreateUserInviteRequest struct {
	InviteeEmail string `json:"inviteeEmail"`
	Role         string `json:"role"`
}

// DeploymentOptions defines model for DeploymentOptions.
type DeploymentOptions struct {
	AstroUnit       AstroBaseUnit     `json:"astroUnit"`
	Components      ComponentsOptions `json:"components"`
	RuntimeReleases []RuntimeRelease  `json:"runtimeReleases"`
}

// Entitlement defines model for Entitlement.
type Entitlement struct {
	Enabled      bool                    `json:"enabled"`
	RequiredTier EntitlementRequiredTier `json:"requiredTier"`
}

// EntitlementRequiredTier defines model for Entitlement.RequiredTier.
type EntitlementRequiredTier string

// Error defines model for Error.
type Error struct {
	Message    string `json:"message"`
	RequestId  string `json:"requestId"`
	StatusCode int    `json:"statusCode"`
}

// EventClient defines model for EventClient.
type EventClient struct {
	ClientId *string                 `json:"client_id,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Name     *string                 `json:"name,omitempty"`
}

// EventConnection defines model for EventConnection.
type EventConnection struct {
	Id       *string      `json:"id,omitempty"`
	Metadata *interface{} `json:"metadata,omitempty"`
	Name     *string      `json:"name,omitempty"`
	Strategy string       `json:"strategy"`
}

// EventOrganization defines model for EventOrganization.
type EventOrganization struct {
	DisplayName *string                 `json:"display_name,omitempty"`
	Id          *string                 `json:"id,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        *string                 `json:"name,omitempty"`
}

// EventRequest defines model for EventRequest.
type EventRequest struct {
	Body      *map[string]interface{} `json:"body,omitempty"`
	Geoip     *interface{}            `json:"geoip,omitempty"`
	Hostname  *string                 `json:"hostname,omitempty"`
	Ip        *string                 `json:"ip,omitempty"`
	Language  *string                 `json:"language,omitempty"`
	Method    *string                 `json:"method,omitempty"`
	Query     *map[string]interface{} `json:"query,omitempty"`
	UserAgent *string                 `json:"user_agent,omitempty"`
}

// EventUser defines model for EventUser.
type EventUser struct {
	AppMetadata       *map[string]interface{} `json:"app_metadata,omitempty"`
	CreatedAt         *string                 `json:"created_at,omitempty"`
	Email             *string                 `json:"email,omitempty"`
	EmailVerified     *bool                   `json:"email_verified,omitempty"`
	FamilyName        *string                 `json:"family_name,omitempty"`
	GivenName         *string                 `json:"given_name,omitempty"`
	Identities        *[]interface{}          `json:"identities,omitempty"`
	LastPasswordReset *string                 `json:"last_password_reset,omitempty"`
	Multifactor       *[]string               `json:"multifactor,omitempty"`
	Name              *string                 `json:"name,omitempty"`
	Nickname          *string                 `json:"nickname,omitempty"`
	PhoneNumber       *string                 `json:"phone_number,omitempty"`
	PhoneVerified     *bool                   `json:"phone_verified,omitempty"`
	Picture           *string                 `json:"picture,omitempty"`
	UpdatedAt         *string                 `json:"updated_at,omitempty"`
	UserId            *string                 `json:"user_id,omitempty"`
	UserMetadata      *map[string]interface{} `json:"user_metadata,omitempty"`
	Username          *string                 `json:"username,omitempty"`
}

// FeatureFlag defines model for FeatureFlag.
type FeatureFlag struct {
	Key   string `json:"key"`
	Value bool   `json:"value"`
}

// Invite defines model for Invite.
type Invite struct {
	ExpiresAt      string              `json:"expiresAt"`
	InviteId       string              `json:"inviteId"`
	Invitee        BasicSubjectProfile `json:"invitee"`
	Inviter        BasicSubjectProfile `json:"inviter"`
	OAuthInviteId  *string             `json:"oAuthInviteId,omitempty"`
	OrgName        *string             `json:"orgName,omitempty"`
	OrgShortName   *string             `json:"orgShortName,omitempty"`
	OrganizationId string              `json:"organizationId"`
	TicketId       *string             `json:"ticketId,omitempty"`
	UserId         *string             `json:"userId,omitempty"`
}

// JitPolicy defines model for JitPolicy.
type JitPolicy struct {
	DefaultOrgRole        string           `json:"defaultOrgRole"`
	DefaultWorkspaceRoles *[]WorkspaceRole `json:"defaultWorkspaceRoles,omitempty"`
}

// ListWorkspacePipelines defines model for ListWorkspacePipelines.
type ListWorkspacePipelines struct {
	Items      []WorkspacePipeline `json:"items"`
	NextCursor *string             `json:"nextCursor,omitempty"`
	Warnings   *[]string           `json:"warnings,omitempty"`
}

// ManagedDomain defines model for ManagedDomain.
type ManagedDomain struct {
	CreatedAt      time.Time           `json:"createdAt"`
	EnforcedLogins *[]string           `json:"enforcedLogins,omitempty"`
	Id             string              `json:"id"`
	Name           string              `json:"name"`
	OrganizationId string              `json:"organizationId"`
	Status         ManagedDomainStatus `json:"status"`
	UpdatedAt      time.Time           `json:"updatedAt"`
}

// ManagedDomainStatus defines model for ManagedDomain.Status.
type ManagedDomainStatus string

// MutateOrgUserRoleRequest defines model for MutateOrgUserRoleRequest.
type MutateOrgUserRoleRequest struct {
	Role string `json:"role"`
}

// MutateOrganizationRequest defines model for MutateOrganizationRequest.
type MutateOrganizationRequest struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Name     string                  `json:"name"`
}

// MutateWorkspaceRequest defines model for MutateWorkspaceRequest.
type MutateWorkspaceRequest struct {
	ApiKeyOnlyDeploymentsDefault *bool   `json:"apiKeyOnlyDeploymentsDefault,omitempty"`
	Description                  *string `json:"description,omitempty"`
	Name                         string  `json:"name"`
}

// MutateWorkspaceUserRoleRequest defines model for MutateWorkspaceUserRoleRequest.
type MutateWorkspaceUserRoleRequest struct {
	Role string `json:"role"`
}

// NodePool defines model for NodePool.
type NodePool struct {
	CloudProvider    string    `json:"cloudProvider"`
	ClusterId        string    `json:"clusterId"`
	CreatedAt        time.Time `json:"createdAt"`
	Id               string    `json:"id"`
	IsDefault        bool      `json:"isDefault"`
	MaxNodeCount     int       `json:"maxNodeCount"`
	Name             string    `json:"name"`
	NodeInstanceType string    `json:"nodeInstanceType"`
	UpdatedAt        time.Time `json:"updatedAt"`
}

// Organization defines model for Organization.
type Organization struct {
	AuthServiceId    string                  `json:"authServiceId"`
	CreatedAt        time.Time               `json:"createdAt"`
	CreatedBy        *string                 `json:"createdBy,omitempty"`
	CreatedBySubject *BasicSubjectProfile    `json:"createdBySubject,omitempty"`
	Domains          *[]string               `json:"domains,omitempty"`
	Entitlements     *map[string]Entitlement `json:"entitlements,omitempty"`
	Id               string                  `json:"id"`
	ManagedDomains   *[]ManagedDomain        `json:"managedDomains,omitempty"`
	MetronomeId      *string                 `json:"metronomeId,omitempty"`
	Name             string                  `json:"name"`
	Product          *OrganizationProduct    `json:"product,omitempty"`
	ProductTier      OrganizationProductTier `json:"productTier"`
	ShortName        string                  `json:"shortName"`
	TrialExpiresAt   *time.Time              `json:"trialExpiresAt,omitempty"`
	UpdatedAt        time.Time               `json:"updatedAt"`
	UpdatedBy        *string                 `json:"updatedBy,omitempty"`
	UpdatedBySubject *BasicSubjectProfile    `json:"updatedBySubject,omitempty"`
}

// OrganizationProduct defines model for Organization.Product.
type OrganizationProduct string

// OrganizationProductTier defines model for Organization.ProductTier.
type OrganizationProductTier string

// PostLoginEvent defines model for PostLoginEvent.
type PostLoginEvent struct {
	Client       *EventClient            `json:"client,omitempty"`
	Connection   EventConnection         `json:"connection"`
	Organization *EventOrganization      `json:"organization,omitempty"`
	Request      *EventRequest           `json:"request,omitempty"`
	Transaction  *map[string]interface{} `json:"transaction,omitempty"`
	User         EventUser               `json:"user"`
}

// ProviderInstanceType defines model for ProviderInstanceType.
type ProviderInstanceType struct {
	Cpu  int    `json:"cpu"`
	Name string `json:"name"`
	Ram  string `json:"ram"`
}

// ProviderRegion defines model for ProviderRegion.
type ProviderRegion struct {
	BannedInstances *[]string `json:"bannedInstances,omitempty"`
	Limited         *bool     `json:"limited,omitempty"`
	Name            string    `json:"name"`
}

// RunGroup defines model for RunGroup.
type RunGroup struct {
	Children          *[]RunGroup     `json:"children,omitempty"`
	ExtraLinks        *[]string       `json:"extraLinks,omitempty"`
	HasOutletDatasets *bool           `json:"hasOutletDatasets,omitempty"`
	Id                *string         `json:"id,omitempty"`
	IsMapped          *bool           `json:"isMapped,omitempty"`
	Label             *string         `json:"label,omitempty"`
	Operator          *string         `json:"operator,omitempty"`
	TaskInstances     *[]TaskInstance `json:"taskInstances,omitempty"`
}

// RuntimeRelease defines model for RuntimeRelease.
type RuntimeRelease struct {
	AirflowDatabaseMigration bool   `json:"airflowDatabaseMigration"`
	AirflowVersion           string `json:"airflowVersion"`
	Channel                  string `json:"channel"`
	ReleaseDate              string `json:"releaseDate"`
	StellarDatabaseMigration bool   `json:"stellarDatabaseMigration"`
	Version                  string `json:"version"`
}

// Scope defines model for Scope.
type Scope struct {
	EntityId string `json:"entityId"`
	Type     string `json:"type"`
}

// Self defines model for Self.
type Self struct {
	AvatarUrl           string         `json:"avatarUrl"`
	ColorModePreference *string        `json:"colorModePreference,omitempty"`
	CreatedAt           time.Time      `json:"createdAt"`
	FeatureFlags        *[]FeatureFlag `json:"featureFlags,omitempty"`
	FullName            string         `json:"fullName"`
	Id                  string         `json:"id"`
	Invites             *[]Invite      `json:"invites,omitempty"`
	OrganizationId      *string        `json:"organizationId,omitempty"`
	Roles               *[]UserRole    `json:"roles,omitempty"`
	Status              string         `json:"status"`
	SystemRole          *string        `json:"systemRole,omitempty"`
	UpdatedAt           time.Time      `json:"updatedAt"`
	Username            string         `json:"username"`
}

// SharedCluster defines model for SharedCluster.
type SharedCluster struct {
	CloudProvider       SharedClusterCloudProvider `json:"cloudProvider"`
	CreatedAt           time.Time                  `json:"createdAt"`
	DbInstanceType      string                     `json:"dbInstanceType"`
	Id                  string                     `json:"id"`
	IsDryRun            bool                       `json:"isDryRun"`
	Metadata            ClusterMetadata            `json:"metadata"`
	Name                string                     `json:"name"`
	PodSubnetRange      string                     `json:"podSubnetRange"`
	Region              string                     `json:"region"`
	ServicePeeringRange string                     `json:"servicePeeringRange"`
	ServiceSubnetRange  string                     `json:"serviceSubnetRange"`
	Status              SharedClusterStatus        `json:"status"`
	TemplateVersion     string                     `json:"templateVersion"`
	UpdatedAt           time.Time                  `json:"updatedAt"`
	VpcSubnetRange      string                     `json:"vpcSubnetRange"`
}

// SharedClusterCloudProvider defines model for SharedCluster.CloudProvider.
type SharedClusterCloudProvider string

// SharedClusterStatus defines model for SharedCluster.Status.
type SharedClusterStatus string

// SsoBypassKey defines model for SsoBypassKey.
type SsoBypassKey struct {
	BypassKey      *string `json:"bypassKey,omitempty"`
	CreatedAt      *string `json:"createdAt,omitempty"`
	DeletedAt      *string `json:"deletedAt,omitempty"`
	OrgShortName   *string `json:"orgShortName,omitempty"`
	OrganizationId string  `json:"organizationId"`
	UpdatedAt      *string `json:"updatedAt,omitempty"`
}

// SsoConnection defines model for SsoConnection.
type SsoConnection struct {
	Auth0ConnectionId   string              `json:"auth0ConnectionId"`
	Auth0ConnectionName string              `json:"auth0ConnectionName"`
	Configuration       SsoConnectionConfig `json:"configuration"`
	Enabled             bool                `json:"enabled"`
	Id                  string              `json:"id"`
	JitPolicy           *JitPolicy          `json:"jitPolicy,omitempty"`
	ManagedDomains      []ManagedDomain     `json:"managedDomains"`
	OrganizationId      string              `json:"organizationId"`
}

// SsoConnectionConfig defines model for SsoConnectionConfig.
type SsoConnectionConfig struct {
	AzureClientId     *string                     `json:"azureClientId,omitempty"`
	AzureClientSecret *string                     `json:"azureClientSecret,omitempty"`
	AzureDomainName   *string                     `json:"azureDomainName,omitempty"`
	SamlSignInUrl     *string                     `json:"samlSignInUrl,omitempty"`
	SamlSignOutUrl    *string                     `json:"samlSignOutUrl,omitempty"`
	SamlSigningCert   *string                     `json:"samlSigningCert,omitempty"`
	Strategy          SsoConnectionConfigStrategy `json:"strategy"`
}

// SsoConnectionConfigStrategy defines model for SsoConnectionConfig.Strategy.
type SsoConnectionConfigStrategy string

// SsoConnectionManagedDomain defines model for SsoConnectionManagedDomain.
type SsoConnectionManagedDomain struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// SsoLoginCallback defines model for SsoLoginCallback.
type SsoLoginCallback struct {
	AccessTokenClaims *map[string]string `json:"accessTokenClaims,omitempty"`
	Deny              *SsoLoginDeny      `json:"deny,omitempty"`
	IdTokenClaims     *map[string]string `json:"idTokenClaims,omitempty"`
	UserMetaData      *interface{}       `json:"userMetaData,omitempty"`
}

// SsoLoginDeny defines model for SsoLoginDeny.
type SsoLoginDeny struct {
	Connections *[]string `json:"connections,omitempty"`
	Message     string    `json:"message"`
	Reason      string    `json:"reason"`
}

// TaskInstance defines model for TaskInstance.
type TaskInstance struct {
	Duration       *float32                `json:"duration,omitempty"`
	EndDate        *string                 `json:"endDate,omitempty"`
	ExecutionDate  *string                 `json:"executionDate,omitempty"`
	ExecutorConfig *string                 `json:"executorConfig,omitempty"`
	Hostname       *string                 `json:"hostname,omitempty"`
	MapIndex       *int                    `json:"mapIndex,omitempty"`
	MaxTries       *int                    `json:"maxTries,omitempty"`
	Note           *string                 `json:"note,omitempty"`
	Operator       *string                 `json:"operator,omitempty"`
	Pid            *int                    `json:"pid,omitempty"`
	PipelineId     string                  `json:"pipelineId"`
	PipelineRunId  string                  `json:"pipelineRunId"`
	Pool           *string                 `json:"pool,omitempty"`
	PoolSlots      *int                    `json:"poolSlots,omitempty"`
	PriorityWeight *int                    `json:"priorityWeight,omitempty"`
	Queue          *string                 `json:"queue,omitempty"`
	QueuedWhen     *string                 `json:"queuedWhen,omitempty"`
	RenderedFields *map[string]interface{} `json:"renderedFields,omitempty"`
	StartDate      *string                 `json:"startDate,omitempty"`
	State          *TaskInstanceState      `json:"state,omitempty"`
	TaskId         string                  `json:"taskId"`
	TryNumber      *int                    `json:"tryNumber,omitempty"`
	Unixname       *string                 `json:"unixname,omitempty"`
}

// TaskInstanceState defines model for TaskInstance.State.
type TaskInstanceState string

// TemplateVersion defines model for TemplateVersion.
type TemplateVersion struct {
	Url     *string `json:"url,omitempty"`
	Version string  `json:"version"`
}

// UpdateAwsClusterRequest defines model for UpdateAwsClusterRequest.
type UpdateAwsClusterRequest struct {
	DbInstanceType  string                  `json:"dbInstanceType"`
	K8sTags         *[]ClusterTag           `json:"k8sTags,omitempty"`
	Name            string                  `json:"name"`
	NodePools       []UpdateNodePoolRequest `json:"nodePools"`
	TemplateVersion string                  `json:"templateVersion"`
}

// UpdateAzureClusterRequest defines model for UpdateAzureClusterRequest.
type UpdateAzureClusterRequest struct {
	DbInstanceType  string                  `json:"dbInstanceType"`
	K8sTags         *[]ClusterTag           `json:"k8sTags,omitempty"`
	Name            string                  `json:"name"`
	NodePools       []UpdateNodePoolRequest `json:"nodePools"`
	TemplateVersion string                  `json:"templateVersion"`
}

// UpdateGcpClusterRequest defines model for UpdateGcpClusterRequest.
type UpdateGcpClusterRequest struct {
	DbInstanceType  string                  `json:"dbInstanceType"`
	K8sTags         *[]ClusterTag           `json:"k8sTags,omitempty"`
	Name            string                  `json:"name"`
	NodePools       []UpdateNodePoolRequest `json:"nodePools"`
	TemplateVersion string                  `json:"templateVersion"`
}

// UpdateInviteRequest defines model for UpdateInviteRequest.
type UpdateInviteRequest struct {
	InviteStatus UpdateInviteRequestInviteStatus `json:"inviteStatus"`
}

// UpdateInviteRequestInviteStatus defines model for UpdateInviteRequest.InviteStatus.
type UpdateInviteRequestInviteStatus string

// UpdateManagedDomainRequest defines model for UpdateManagedDomainRequest.
type UpdateManagedDomainRequest struct {
	EnforcedLogins *[]UpdateManagedDomainRequestEnforcedLogins `json:"enforcedLogins,omitempty"`
}

// UpdateManagedDomainRequestEnforcedLogins defines model for UpdateManagedDomainRequest.EnforcedLogins.
type UpdateManagedDomainRequestEnforcedLogins string

// UpdateNodePoolRequest defines model for UpdateNodePoolRequest.
type UpdateNodePoolRequest struct {
	Id               *string `json:"id,omitempty"`
	IsDefault        bool    `json:"isDefault"`
	MaxNodeCount     int     `json:"maxNodeCount"`
	Name             string  `json:"name"`
	NodeInstanceType string  `json:"nodeInstanceType"`
}

// UpdateSsoConnectionRequest defines model for UpdateSsoConnectionRequest.
type UpdateSsoConnectionRequest struct {
	Configuration            SsoConnectionConfig          `json:"configuration"`
	Enabled                  *bool                        `json:"enabled,omitempty"`
	IdpInitiatedLoginEnabled *bool                        `json:"idpInitiatedLoginEnabled,omitempty"`
	JitPolicy                *JitPolicy                   `json:"jitPolicy,omitempty"`
	ManagedDomains           []SsoConnectionManagedDomain `json:"managedDomains"`
}

// User defines model for User.
type User struct {
	AvatarUrl           string    `json:"avatarUrl"`
	ColorModePreference *string   `json:"colorModePreference,omitempty"`
	CreatedAt           time.Time `json:"createdAt"`
	FullName            string    `json:"fullName"`
	Id                  string    `json:"id"`
	Invites             *[]Invite `json:"invites,omitempty"`

	// LastLogin Only shown if admin listing users
	LastLogin *string `json:"lastLogin,omitempty"`

	// LastLoginConnectionName Only shown if admin listing users
	LastLoginConnectionName *string `json:"lastLoginConnectionName,omitempty"`

	// LastLoginConnectionType Only shown if admin listing users
	LastLoginConnectionType *string `json:"lastLoginConnectionType,omitempty"`

	// OrgCount Only shown if admin listing users
	OrgCount *int `json:"orgCount,omitempty"`

	// OrgRole Only shown if listing org users
	OrgRole *string `json:"orgRole,omitempty"`

	// Roles Only shown if admin listing users
	Roles  *[]UserRole `json:"roles,omitempty"`
	Status string      `json:"status"`

	// SystemRole Only shown if admin listing users
	SystemRole *string   `json:"systemRole,omitempty"`
	UpdatedAt  time.Time `json:"updatedAt"`
	Username   string    `json:"username"`

	// WorkspaceCount Only shown if admin listing users
	WorkspaceCount *int `json:"workspaceCount,omitempty"`

	// WorkspaceRole Only shown if listing workspace users
	WorkspaceRole *string `json:"workspaceRole,omitempty"`
}

// UserRole defines model for UserRole.
type UserRole struct {
	Role  string `json:"role"`
	Scope Scope  `json:"scope"`
}

// UsersPaginated defines model for UsersPaginated.
type UsersPaginated struct {
	Limit      int    `json:"limit"`
	Offset     int    `json:"offset"`
	TotalCount int    `json:"totalCount"`
	Users      []User `json:"users"`
}

// ValidateSsoLoginRequest defines model for ValidateSsoLoginRequest.
type ValidateSsoLoginRequest struct {
	Event PostLoginEvent `json:"event"`
}

// Workspace defines model for Workspace.
type Workspace struct {
	ApiKeyOnlyDeploymentsDefault bool                 `json:"apiKeyOnlyDeploymentsDefault"`
	CreatedAt                    time.Time            `json:"createdAt"`
	CreatedBy                    *BasicSubjectProfile `json:"createdBy,omitempty"`
	DeploymentCount              *int                 `json:"deploymentCount,omitempty"`
	Description                  *string              `json:"description,omitempty"`
	Id                           string               `json:"id"`
	Name                         string               `json:"name"`
	OrgShortName                 *string              `json:"orgShortName,omitempty"`
	OrganizationId               string               `json:"organizationId"`
	OrganizationName             *string              `json:"organizationName,omitempty"`
	ServerlessRuntimeCount       *int                 `json:"serverlessRuntimeCount,omitempty"`
	UpdatedAt                    time.Time            `json:"updatedAt"`
	UpdatedBy                    *BasicSubjectProfile `json:"updatedBy,omitempty"`
	UserCount                    *int                 `json:"userCount,omitempty"`
}

// WorkspacePipeline defines model for WorkspacePipeline.
type WorkspacePipeline struct {
	DagId        string                  `json:"dagId"`
	DeploymentId string                  `json:"deploymentId"`
	IsActive     *bool                   `json:"isActive,omitempty"`
	IsPaused     bool                    `json:"isPaused"`
	NextRunAt    *string                 `json:"nextRunAt,omitempty"`
	Owners       *[]string               `json:"owners,omitempty"`
	PipelineRuns *[]WorkspacePipelineRun `json:"pipelineRuns,omitempty"`
	Schedule     string                  `json:"schedule"`
	Tags         *[]string               `json:"tags,omitempty"`
}

// WorkspacePipelineRun defines model for WorkspacePipelineRun.
type WorkspacePipelineRun struct {
	EndDate     *string `json:"endDate,omitempty"`
	LogicalDate string  `json:"logicalDate"`
	RunId       string  `json:"runId"`
	StartDate   *string `json:"startDate,omitempty"`
	State       string  `json:"state"`
}

// WorkspaceRole defines model for WorkspaceRole.
type WorkspaceRole struct {
	WorkspaceId   string `json:"workspaceId"`
	WorkspaceRole string `json:"workspaceRole"`
}

// WorkspacesPaginated defines model for WorkspacesPaginated.
type WorkspacesPaginated struct {
	Limit      int         `json:"limit"`
	Offset     int         `json:"offset"`
	TotalCount int         `json:"totalCount"`
	Workspaces []Workspace `json:"workspaces"`
}

// InternalTask defines model for internal_Task.
type InternalTask struct {
	ExtraLinks        *[]string `json:"extraLinks,omitempty"`
	HasOutletDatasets *bool     `json:"hasOutletDatasets,omitempty"`
	Id                *string   `json:"id,omitempty"`
	IsMapped          *bool     `json:"isMapped,omitempty"`
	Label             *string   `json:"label,omitempty"`
	Operator          *string   `json:"operator,omitempty"`
}

// InternalTaskGroup defines model for internal_TaskGroup.
type InternalTaskGroup struct {
	Children *[]InternalTaskGroupChildrenInner `json:"children,omitempty"`
	Id       *string                           `json:"id,omitempty"`
	Label    *string                           `json:"label,omitempty"`
	Tooltip  *string                           `json:"tooltip,omitempty"`
}

// InternalTaskGroupChildrenInner defines model for internal_TaskGroupChildrenInner.
type InternalTaskGroupChildrenInner struct {
	Task      *InternalTask      `json:"task,omitempty"`
	TaskGroup *InternalTaskGroup `json:"taskGroup,omitempty"`
}

// GetSharedClusterParams defines parameters for GetSharedCluster.
type GetSharedClusterParams struct {
	// Region region
	Region string `form:"region" json:"region"`

	// CloudProvider cloud provider
	CloudProvider GetSharedClusterParamsCloudProvider `form:"cloudProvider" json:"cloudProvider"`
}

// GetSharedClusterParamsCloudProvider defines parameters for GetSharedCluster.
type GetSharedClusterParamsCloudProvider string

// GetClusterOptionsParams defines parameters for GetClusterOptions.
type GetClusterOptionsParams struct {
	// Provider cloud provider
	Provider *GetClusterOptionsParamsProvider `form:"provider,omitempty" json:"provider,omitempty"`

	// Type cluster type
	Type GetClusterOptionsParamsType `form:"type" json:"type"`
}

// GetClusterOptionsParamsProvider defines parameters for GetClusterOptions.
type GetClusterOptionsParamsProvider string

// GetClusterOptionsParamsType defines parameters for GetClusterOptions.
type GetClusterOptionsParamsType string

// ListOrganizationAuthIdsParams defines parameters for ListOrganizationAuthIds.
type ListOrganizationAuthIdsParams struct {
	// Email User email to retrieve organization auth IDs for
	Email string `form:"email" json:"email"`
}

// ListOrganizationsParams defines parameters for ListOrganizations.
type ListOrganizationsParams struct {
	// Search string to search for when listing users
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// TrialStatus filter by trial status, null for all orgs
	TrialStatus *ListOrganizationsParamsTrialStatus `form:"trialStatus,omitempty" json:"trialStatus,omitempty"`

	// ProductTier filter by product tier, null for all orgs
	ProductTier *ListOrganizationsParamsProductTier `form:"productTier,omitempty" json:"productTier,omitempty"`

	// Product filter by product, null for all orgs
	Product *ListOrganizationsParamsProduct `form:"product,omitempty" json:"product,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListOrganizationsParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListOrganizationsParamsTrialStatus defines parameters for ListOrganizations.
type ListOrganizationsParamsTrialStatus string

// ListOrganizationsParamsProductTier defines parameters for ListOrganizations.
type ListOrganizationsParamsProductTier string

// ListOrganizationsParamsProduct defines parameters for ListOrganizations.
type ListOrganizationsParamsProduct string

// ListOrganizationsParamsSorts defines parameters for ListOrganizations.
type ListOrganizationsParamsSorts string

// GetOrganizationParams defines parameters for GetOrganization.
type GetOrganizationParams struct {
	// IsLookUpOnly only look up organization metadata if true
	IsLookUpOnly *bool `form:"isLookUpOnly,omitempty" json:"isLookUpOnly,omitempty"`
}

// GetOrganizationAuditLogsParams defines parameters for GetOrganizationAuditLogs.
type GetOrganizationAuditLogsParams struct {
	// Earliest starting point in days for audit logs
	Earliest *string `form:"earliest,omitempty" json:"earliest,omitempty"`
}

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {
	// Provider cloud provider to filter clusters on
	Provider *ListClustersParamsProvider `form:"provider,omitempty" json:"provider,omitempty"`

	// Type type to filter clusters on
	Type *[]ListClustersParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Status status to filter clusters on
	Status *ListClustersParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Search string to search for when listing clusters
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListClustersParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListClustersParamsProvider defines parameters for ListClusters.
type ListClustersParamsProvider string

// ListClustersParamsType defines parameters for ListClusters.
type ListClustersParamsType string

// ListClustersParamsStatus defines parameters for ListClusters.
type ListClustersParamsStatus string

// ListClustersParamsSorts defines parameters for ListClusters.
type ListClustersParamsSorts string

// ListOrgUsersParams defines parameters for ListOrgUsers.
type ListOrgUsersParams struct {
	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListOrgUsersParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Search string to search for when listing users
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// HasInvites filter on users with invites only
	HasInvites *bool `form:"hasInvites,omitempty" json:"hasInvites,omitempty"`
}

// ListOrgUsersParamsSorts defines parameters for ListOrgUsers.
type ListOrgUsersParamsSorts string

// ListWorkspacesParams defines parameters for ListWorkspaces.
type ListWorkspacesParams struct {
	// WorkspaceIds list of workspace ids to get detail of, separated by comma
	WorkspaceIds *string `form:"workspaceIds,omitempty" json:"workspaceIds,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListWorkspacesParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Search string to search for when listing workspaces
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListWorkspacesParamsSorts defines parameters for ListWorkspaces.
type ListWorkspacesParamsSorts string

// ListWorkspacePipelinesParams defines parameters for ListWorkspacePipelines.
type ListWorkspacePipelinesParams struct {
	// PageSize page size, default of 20
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// OrderBy order-by fields, comma separated
	OrderBy *[]string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Cursor pagination cursor
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// NumRuns number of runs to include per pipeline, default of 0
	NumRuns *int `form:"numRuns,omitempty" json:"numRuns,omitempty"`

	// Name filter by name of DAG (dagId)
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameLike filter by pattern for name of DAG (dagId),  SQL  syntax
	NameLike *string `form:"name__like,omitempty" json:"name__like,omitempty"`

	// Owner filter by an owner of the pipeline
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`

	// IsPaused filter by paused pipelines
	IsPaused *bool `form:"isPaused,omitempty" json:"isPaused,omitempty"`

	// IsActive filter by active pipelines
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty"`

	// LastRunStateIn filter by pipeline runs with any of these run states for its last run
	LastRunStateIn *[]string `form:"lastRunState__in,omitempty" json:"lastRunState__in,omitempty"`

	// RunStateIn filter by pipeline runs with any of these run states
	RunStateIn *[]string `form:"runState__in,omitempty" json:"runState__in,omitempty"`

	// RunAfter filter by pipeline run after specified datetime (RFC3339 format)
	RunAfter *time.Time `form:"runAfter,omitempty" json:"runAfter,omitempty"`

	// TagIn filter by any of these tags
	TagIn *[]string `form:"tag__in,omitempty" json:"tag__in,omitempty"`

	// DeploymentIdIn filter by any of these deployment IDs
	DeploymentIdIn *[]string `form:"deploymentId__in,omitempty" json:"deploymentId__in,omitempty"`
}

// ListWorkspaceUsersParams defines parameters for ListWorkspaceUsers.
type ListWorkspaceUsersParams struct {
	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListWorkspaceUsersParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Search string to search for when listing users
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListWorkspaceUsersParamsSorts defines parameters for ListWorkspaceUsers.
type ListWorkspaceUsersParamsSorts string

// GetSelfUserParams defines parameters for GetSelfUser.
type GetSelfUserParams struct {
	// CreateIfNotExist create self user if it does not already exist
	CreateIfNotExist *bool `form:"createIfNotExist,omitempty" json:"createIfNotExist,omitempty"`
}

// ValidateSsoLoginJSONRequestBody defines body for ValidateSsoLogin for application/json ContentType.
type ValidateSsoLoginJSONRequestBody = ValidateSsoLoginRequest

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = MutateOrganizationRequest

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody = MutateOrganizationRequest

// CreateAwsClusterJSONRequestBody defines body for CreateAwsCluster for application/json ContentType.
type CreateAwsClusterJSONRequestBody = CreateAwsClusterRequest

// UpdateAwsClusterJSONRequestBody defines body for UpdateAwsCluster for application/json ContentType.
type UpdateAwsClusterJSONRequestBody = UpdateAwsClusterRequest

// CreateAzureClusterJSONRequestBody defines body for CreateAzureCluster for application/json ContentType.
type CreateAzureClusterJSONRequestBody = CreateAzureClusterRequest

// UpdateAzureClusterJSONRequestBody defines body for UpdateAzureCluster for application/json ContentType.
type UpdateAzureClusterJSONRequestBody = UpdateAzureClusterRequest

// CreateGcpClusterJSONRequestBody defines body for CreateGcpCluster for application/json ContentType.
type CreateGcpClusterJSONRequestBody = CreateGcpClusterRequest

// UpdateGcpClusterJSONRequestBody defines body for UpdateGcpCluster for application/json ContentType.
type UpdateGcpClusterJSONRequestBody = UpdateGcpClusterRequest

// CreateManagedDomainJSONRequestBody defines body for CreateManagedDomain for application/json ContentType.
type CreateManagedDomainJSONRequestBody = CreateManagedDomainRequest

// UpdateManagedDomainJSONRequestBody defines body for UpdateManagedDomain for application/json ContentType.
type UpdateManagedDomainJSONRequestBody = UpdateManagedDomainRequest

// CreateUserInviteJSONRequestBody defines body for CreateUserInvite for application/json ContentType.
type CreateUserInviteJSONRequestBody = CreateUserInviteRequest

// CreateSsoConnectionJSONRequestBody defines body for CreateSsoConnection for application/json ContentType.
type CreateSsoConnectionJSONRequestBody = CreateSsoConnectionRequest

// UpdateSsoConnectionJSONRequestBody defines body for UpdateSsoConnection for application/json ContentType.
type UpdateSsoConnectionJSONRequestBody = UpdateSsoConnectionRequest

// MutateOrgUserRoleJSONRequestBody defines body for MutateOrgUserRole for application/json ContentType.
type MutateOrgUserRoleJSONRequestBody = MutateOrgUserRoleRequest

// CreateWorkspaceJSONRequestBody defines body for CreateWorkspace for application/json ContentType.
type CreateWorkspaceJSONRequestBody = MutateWorkspaceRequest

// UpdateWorkspaceJSONRequestBody defines body for UpdateWorkspace for application/json ContentType.
type UpdateWorkspaceJSONRequestBody = MutateWorkspaceRequest

// MutateWorkspaceUserRoleJSONRequestBody defines body for MutateWorkspaceUserRole for application/json ContentType.
type MutateWorkspaceUserRoleJSONRequestBody = MutateWorkspaceUserRoleRequest

// UpdateSelfUserInviteJSONRequestBody defines body for UpdateSelfUserInvite for application/json ContentType.
type UpdateSelfUserInviteJSONRequestBody = UpdateInviteRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetUserInvite request
	GetUserInvite(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateSsoLogin request with any body
	ValidateSsoLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateSsoLogin(ctx context.Context, body ValidateSsoLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharedCluster request
	GetSharedCluster(ctx context.Context, params *GetSharedClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterOptions request
	GetClusterOptions(ctx context.Context, params *GetClusterOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentOptions request
	GetDeploymentOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationAuthIds request
	ListOrganizationAuthIds(ctx context.Context, params *ListOrganizationAuthIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizations request
	ListOrganizations(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganization request with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, orgShortNameId string, params *GetOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganization request with any body
	UpdateOrganizationWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganization(ctx context.Context, orgShortNameId string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationAuditLogs request
	GetOrganizationAuditLogs(ctx context.Context, orgShortNameId string, params *GetOrganizationAuditLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListClusters request
	ListClusters(ctx context.Context, orgShortNameId string, params *ListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAwsCluster request with any body
	CreateAwsClusterWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAwsCluster(ctx context.Context, orgShortNameId string, body CreateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAwsCluster request with any body
	UpdateAwsClusterWithBody(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAwsCluster(ctx context.Context, orgShortNameId string, clusterId string, body UpdateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAzureCluster request with any body
	CreateAzureClusterWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAzureCluster(ctx context.Context, orgShortNameId string, body CreateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAzureCluster request with any body
	UpdateAzureClusterWithBody(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAzureCluster(ctx context.Context, orgShortNameId string, clusterId string, body UpdateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGcpCluster request with any body
	CreateGcpClusterWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGcpCluster(ctx context.Context, orgShortNameId string, body CreateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGcpCluster request with any body
	UpdateGcpClusterWithBody(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGcpCluster(ctx context.Context, orgShortNameId string, clusterId string, body UpdateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCluster request
	DeleteCluster(ctx context.Context, orgShortNameId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCluster request
	GetCluster(ctx context.Context, orgShortNameId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListManagedDomains request
	ListManagedDomains(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateManagedDomain request with any body
	CreateManagedDomainWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateManagedDomain(ctx context.Context, orgShortNameId string, body CreateManagedDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteManagedDomain request
	DeleteManagedDomain(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetManagedDomain request
	GetManagedDomain(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateManagedDomain request with any body
	UpdateManagedDomainWithBody(ctx context.Context, orgShortNameId string, domainId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateManagedDomain(ctx context.Context, orgShortNameId string, domainId string, body UpdateManagedDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyManagedDomain request
	VerifyManagedDomain(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserInvite request with any body
	CreateUserInviteWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserInvite(ctx context.Context, orgShortNameId string, body CreateUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserInvite request
	DeleteUserInvite(ctx context.Context, orgShortNameId string, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSsoBypassKey request
	DeleteSsoBypassKey(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSsoBypassKey request
	GetSsoBypassKey(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertSsoBypassKey request
	UpsertSsoBypassKey(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSsoConnections request
	ListSsoConnections(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSsoConnection request with any body
	CreateSsoConnectionWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSsoConnection(ctx context.Context, orgShortNameId string, body CreateSsoConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSsoConnection request
	DeleteSsoConnection(ctx context.Context, orgShortNameId string, connectionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSsoConnection request
	GetSsoConnection(ctx context.Context, orgShortNameId string, connectionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSsoConnection request with any body
	UpdateSsoConnectionWithBody(ctx context.Context, orgShortNameId string, connectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSsoConnection(ctx context.Context, orgShortNameId string, connectionId string, body UpdateSsoConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrgUsers request
	ListOrgUsers(ctx context.Context, orgShortNameId string, params *ListOrgUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgUser request
	DeleteOrgUser(ctx context.Context, orgShortNameId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, orgShortNameId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MutateOrgUserRole request with any body
	MutateOrgUserRoleWithBody(ctx context.Context, orgShortNameId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MutateOrgUserRole(ctx context.Context, orgShortNameId string, userId string, body MutateOrgUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaces request
	ListWorkspaces(ctx context.Context, orgShortNameId string, params *ListWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkspace request with any body
	CreateWorkspaceWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkspace(ctx context.Context, orgShortNameId string, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspace request
	DeleteWorkspace(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspace request
	GetWorkspace(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspace request with any body
	UpdateWorkspaceWithBody(ctx context.Context, orgShortNameId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspace(ctx context.Context, orgShortNameId string, workspaceId string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspacePipelines request
	ListWorkspacePipelines(ctx context.Context, orgShortNameId string, workspaceId string, params *ListWorkspacePipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaceUsers request
	ListWorkspaceUsers(ctx context.Context, orgShortNameId string, workspaceId string, params *ListWorkspaceUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspaceUser request
	DeleteWorkspaceUser(ctx context.Context, orgShortNameId string, workspaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MutateWorkspaceUserRole request with any body
	MutateWorkspaceUserRoleWithBody(ctx context.Context, orgShortNameId string, workspaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MutateWorkspaceUserRole(ctx context.Context, orgShortNameId string, workspaceId string, userId string, body MutateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfUser request
	GetSelfUser(ctx context.Context, params *GetSelfUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSelfUserInvite request with any body
	UpdateSelfUserInviteWithBody(ctx context.Context, inviteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSelfUserInvite(ctx context.Context, inviteId string, body UpdateSelfUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetUserInvite(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInviteRequest(c.Server, inviteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateSsoLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateSsoLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateSsoLogin(ctx context.Context, body ValidateSsoLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateSsoLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharedCluster(ctx context.Context, params *GetSharedClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharedClusterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterOptions(ctx context.Context, params *GetClusterOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterOptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationAuthIds(ctx context.Context, params *ListOrganizationAuthIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationAuthIdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizations(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, orgShortNameId string, params *GetOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, orgShortNameId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(c.Server, orgShortNameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganization(ctx context.Context, orgShortNameId string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(c.Server, orgShortNameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationAuditLogs(ctx context.Context, orgShortNameId string, params *GetOrganizationAuditLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationAuditLogsRequest(c.Server, orgShortNameId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListClusters(ctx context.Context, orgShortNameId string, params *ListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClustersRequest(c.Server, orgShortNameId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAwsClusterWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAwsClusterRequestWithBody(c.Server, orgShortNameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAwsCluster(ctx context.Context, orgShortNameId string, body CreateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAwsClusterRequest(c.Server, orgShortNameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAwsClusterWithBody(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAwsClusterRequestWithBody(c.Server, orgShortNameId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAwsCluster(ctx context.Context, orgShortNameId string, clusterId string, body UpdateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAwsClusterRequest(c.Server, orgShortNameId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAzureClusterWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAzureClusterRequestWithBody(c.Server, orgShortNameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAzureCluster(ctx context.Context, orgShortNameId string, body CreateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAzureClusterRequest(c.Server, orgShortNameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAzureClusterWithBody(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAzureClusterRequestWithBody(c.Server, orgShortNameId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAzureCluster(ctx context.Context, orgShortNameId string, clusterId string, body UpdateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAzureClusterRequest(c.Server, orgShortNameId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGcpClusterWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGcpClusterRequestWithBody(c.Server, orgShortNameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGcpCluster(ctx context.Context, orgShortNameId string, body CreateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGcpClusterRequest(c.Server, orgShortNameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGcpClusterWithBody(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGcpClusterRequestWithBody(c.Server, orgShortNameId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGcpCluster(ctx context.Context, orgShortNameId string, clusterId string, body UpdateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGcpClusterRequest(c.Server, orgShortNameId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCluster(ctx context.Context, orgShortNameId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRequest(c.Server, orgShortNameId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCluster(ctx context.Context, orgShortNameId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterRequest(c.Server, orgShortNameId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListManagedDomains(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListManagedDomainsRequest(c.Server, orgShortNameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateManagedDomainWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateManagedDomainRequestWithBody(c.Server, orgShortNameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateManagedDomain(ctx context.Context, orgShortNameId string, body CreateManagedDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateManagedDomainRequest(c.Server, orgShortNameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteManagedDomain(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteManagedDomainRequest(c.Server, orgShortNameId, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetManagedDomain(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetManagedDomainRequest(c.Server, orgShortNameId, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateManagedDomainWithBody(ctx context.Context, orgShortNameId string, domainId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateManagedDomainRequestWithBody(c.Server, orgShortNameId, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateManagedDomain(ctx context.Context, orgShortNameId string, domainId string, body UpdateManagedDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateManagedDomainRequest(c.Server, orgShortNameId, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyManagedDomain(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyManagedDomainRequest(c.Server, orgShortNameId, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserInviteWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserInviteRequestWithBody(c.Server, orgShortNameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserInvite(ctx context.Context, orgShortNameId string, body CreateUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserInviteRequest(c.Server, orgShortNameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserInvite(ctx context.Context, orgShortNameId string, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserInviteRequest(c.Server, orgShortNameId, inviteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSsoBypassKey(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSsoBypassKeyRequest(c.Server, orgShortNameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSsoBypassKey(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSsoBypassKeyRequest(c.Server, orgShortNameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertSsoBypassKey(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertSsoBypassKeyRequest(c.Server, orgShortNameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSsoConnections(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSsoConnectionsRequest(c.Server, orgShortNameId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSsoConnectionWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSsoConnectionRequestWithBody(c.Server, orgShortNameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSsoConnection(ctx context.Context, orgShortNameId string, body CreateSsoConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSsoConnectionRequest(c.Server, orgShortNameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSsoConnection(ctx context.Context, orgShortNameId string, connectionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSsoConnectionRequest(c.Server, orgShortNameId, connectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSsoConnection(ctx context.Context, orgShortNameId string, connectionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSsoConnectionRequest(c.Server, orgShortNameId, connectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSsoConnectionWithBody(ctx context.Context, orgShortNameId string, connectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSsoConnectionRequestWithBody(c.Server, orgShortNameId, connectionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSsoConnection(ctx context.Context, orgShortNameId string, connectionId string, body UpdateSsoConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSsoConnectionRequest(c.Server, orgShortNameId, connectionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrgUsers(ctx context.Context, orgShortNameId string, params *ListOrgUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrgUsersRequest(c.Server, orgShortNameId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgUser(ctx context.Context, orgShortNameId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgUserRequest(c.Server, orgShortNameId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, orgShortNameId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, orgShortNameId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateOrgUserRoleWithBody(ctx context.Context, orgShortNameId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateOrgUserRoleRequestWithBody(c.Server, orgShortNameId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateOrgUserRole(ctx context.Context, orgShortNameId string, userId string, body MutateOrgUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateOrgUserRoleRequest(c.Server, orgShortNameId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaces(ctx context.Context, orgShortNameId string, params *ListWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspacesRequest(c.Server, orgShortNameId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceWithBody(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequestWithBody(c.Server, orgShortNameId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspace(ctx context.Context, orgShortNameId string, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequest(c.Server, orgShortNameId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspace(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequest(c.Server, orgShortNameId, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, orgShortNameId, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, orgShortNameId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequestWithBody(c.Server, orgShortNameId, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspace(ctx context.Context, orgShortNameId string, workspaceId string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequest(c.Server, orgShortNameId, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspacePipelines(ctx context.Context, orgShortNameId string, workspaceId string, params *ListWorkspacePipelinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspacePipelinesRequest(c.Server, orgShortNameId, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaceUsers(ctx context.Context, orgShortNameId string, workspaceId string, params *ListWorkspaceUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspaceUsersRequest(c.Server, orgShortNameId, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspaceUser(ctx context.Context, orgShortNameId string, workspaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceUserRequest(c.Server, orgShortNameId, workspaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateWorkspaceUserRoleWithBody(ctx context.Context, orgShortNameId string, workspaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateWorkspaceUserRoleRequestWithBody(c.Server, orgShortNameId, workspaceId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateWorkspaceUserRole(ctx context.Context, orgShortNameId string, workspaceId string, userId string, body MutateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateWorkspaceUserRoleRequest(c.Server, orgShortNameId, workspaceId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfUser(ctx context.Context, params *GetSelfUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSelfUserInviteWithBody(ctx context.Context, inviteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSelfUserInviteRequestWithBody(c.Server, inviteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSelfUserInvite(ctx context.Context, inviteId string, body UpdateSelfUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSelfUserInviteRequest(c.Server, inviteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetUserInviteRequest generates requests for GetUserInvite
func NewGetUserInviteRequest(server string, inviteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateSsoLoginRequest calls the generic ValidateSsoLogin builder with application/json body
func NewValidateSsoLoginRequest(server string, body ValidateSsoLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateSsoLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateSsoLoginRequestWithBody generates requests for ValidateSsoLogin with any type of body
func NewValidateSsoLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/post-login-callback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSharedClusterRequest generates requests for GetSharedCluster
func NewGetSharedClusterRequest(server string, params *GetSharedClusterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/shared")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, params.Region); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cloudProvider", runtime.ParamLocationQuery, params.CloudProvider); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterOptionsRequest generates requests for GetClusterOptions
func NewGetClusterOptionsRequest(server string, params *GetClusterOptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/options/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Provider != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentOptionsRequest generates requests for GetDeploymentOptions
func NewGetDeploymentOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/options/deployment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationAuthIdsRequest generates requests for ListOrganizationAuthIds
func NewListOrganizationAuthIdsRequest(server string, params *ListOrganizationAuthIdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizationAuthIds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(server string, params *ListOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TrialStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trialStatus", runtime.ParamLocationQuery, *params.TrialStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ProductTier != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productTier", runtime.ParamLocationQuery, *params.ProductTier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Product != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, orgShortNameId string, params *GetOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IsLookUpOnly != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isLookUpOnly", runtime.ParamLocationQuery, *params.IsLookUpOnly); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(server string, orgShortNameId string, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(server, orgShortNameId, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(server string, orgShortNameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationAuditLogsRequest generates requests for GetOrganizationAuditLogs
func NewGetOrganizationAuditLogsRequest(server string, orgShortNameId string, params *GetOrganizationAuditLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/audit-logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Earliest != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "earliest", runtime.ParamLocationQuery, *params.Earliest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListClustersRequest generates requests for ListClusters
func NewListClustersRequest(server string, orgShortNameId string, params *ListClustersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Provider != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAwsClusterRequest calls the generic CreateAwsCluster builder with application/json body
func NewCreateAwsClusterRequest(server string, orgShortNameId string, body CreateAwsClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAwsClusterRequestWithBody(server, orgShortNameId, "application/json", bodyReader)
}

// NewCreateAwsClusterRequestWithBody generates requests for CreateAwsCluster with any type of body
func NewCreateAwsClusterRequestWithBody(server string, orgShortNameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/aws", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAwsClusterRequest calls the generic UpdateAwsCluster builder with application/json body
func NewUpdateAwsClusterRequest(server string, orgShortNameId string, clusterId string, body UpdateAwsClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAwsClusterRequestWithBody(server, orgShortNameId, clusterId, "application/json", bodyReader)
}

// NewUpdateAwsClusterRequestWithBody generates requests for UpdateAwsCluster with any type of body
func NewUpdateAwsClusterRequestWithBody(server string, orgShortNameId string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/aws/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAzureClusterRequest calls the generic CreateAzureCluster builder with application/json body
func NewCreateAzureClusterRequest(server string, orgShortNameId string, body CreateAzureClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAzureClusterRequestWithBody(server, orgShortNameId, "application/json", bodyReader)
}

// NewCreateAzureClusterRequestWithBody generates requests for CreateAzureCluster with any type of body
func NewCreateAzureClusterRequestWithBody(server string, orgShortNameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/azure", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAzureClusterRequest calls the generic UpdateAzureCluster builder with application/json body
func NewUpdateAzureClusterRequest(server string, orgShortNameId string, clusterId string, body UpdateAzureClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAzureClusterRequestWithBody(server, orgShortNameId, clusterId, "application/json", bodyReader)
}

// NewUpdateAzureClusterRequestWithBody generates requests for UpdateAzureCluster with any type of body
func NewUpdateAzureClusterRequestWithBody(server string, orgShortNameId string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/azure/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateGcpClusterRequest calls the generic CreateGcpCluster builder with application/json body
func NewCreateGcpClusterRequest(server string, orgShortNameId string, body CreateGcpClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGcpClusterRequestWithBody(server, orgShortNameId, "application/json", bodyReader)
}

// NewCreateGcpClusterRequestWithBody generates requests for CreateGcpCluster with any type of body
func NewCreateGcpClusterRequestWithBody(server string, orgShortNameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/gcp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateGcpClusterRequest calls the generic UpdateGcpCluster builder with application/json body
func NewUpdateGcpClusterRequest(server string, orgShortNameId string, clusterId string, body UpdateGcpClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGcpClusterRequestWithBody(server, orgShortNameId, clusterId, "application/json", bodyReader)
}

// NewUpdateGcpClusterRequestWithBody generates requests for UpdateGcpCluster with any type of body
func NewUpdateGcpClusterRequestWithBody(server string, orgShortNameId string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/gcp/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterRequest generates requests for DeleteCluster
func NewDeleteClusterRequest(server string, orgShortNameId string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterRequest generates requests for GetCluster
func NewGetClusterRequest(server string, orgShortNameId string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListManagedDomainsRequest generates requests for ListManagedDomains
func NewListManagedDomainsRequest(server string, orgShortNameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/domains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateManagedDomainRequest calls the generic CreateManagedDomain builder with application/json body
func NewCreateManagedDomainRequest(server string, orgShortNameId string, body CreateManagedDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateManagedDomainRequestWithBody(server, orgShortNameId, "application/json", bodyReader)
}

// NewCreateManagedDomainRequestWithBody generates requests for CreateManagedDomain with any type of body
func NewCreateManagedDomainRequestWithBody(server string, orgShortNameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/domains", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteManagedDomainRequest generates requests for DeleteManagedDomain
func NewDeleteManagedDomainRequest(server string, orgShortNameId string, domainId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "domainId", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/domains/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetManagedDomainRequest generates requests for GetManagedDomain
func NewGetManagedDomainRequest(server string, orgShortNameId string, domainId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "domainId", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/domains/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateManagedDomainRequest calls the generic UpdateManagedDomain builder with application/json body
func NewUpdateManagedDomainRequest(server string, orgShortNameId string, domainId string, body UpdateManagedDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateManagedDomainRequestWithBody(server, orgShortNameId, domainId, "application/json", bodyReader)
}

// NewUpdateManagedDomainRequestWithBody generates requests for UpdateManagedDomain with any type of body
func NewUpdateManagedDomainRequestWithBody(server string, orgShortNameId string, domainId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "domainId", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/domains/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyManagedDomainRequest generates requests for VerifyManagedDomain
func NewVerifyManagedDomainRequest(server string, orgShortNameId string, domainId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "domainId", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/domains/%s/verify", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserInviteRequest calls the generic CreateUserInvite builder with application/json body
func NewCreateUserInviteRequest(server string, orgShortNameId string, body CreateUserInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserInviteRequestWithBody(server, orgShortNameId, "application/json", bodyReader)
}

// NewCreateUserInviteRequestWithBody generates requests for CreateUserInvite with any type of body
func NewCreateUserInviteRequestWithBody(server string, orgShortNameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/invites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserInviteRequest generates requests for DeleteUserInvite
func NewDeleteUserInviteRequest(server string, orgShortNameId string, inviteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/invites/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSsoBypassKeyRequest generates requests for DeleteSsoBypassKey
func NewDeleteSsoBypassKeyRequest(server string, orgShortNameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/sso-bypass-key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSsoBypassKeyRequest generates requests for GetSsoBypassKey
func NewGetSsoBypassKeyRequest(server string, orgShortNameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/sso-bypass-key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertSsoBypassKeyRequest generates requests for UpsertSsoBypassKey
func NewUpsertSsoBypassKeyRequest(server string, orgShortNameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/sso-bypass-key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSsoConnectionsRequest generates requests for ListSsoConnections
func NewListSsoConnectionsRequest(server string, orgShortNameId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/sso-connections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSsoConnectionRequest calls the generic CreateSsoConnection builder with application/json body
func NewCreateSsoConnectionRequest(server string, orgShortNameId string, body CreateSsoConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSsoConnectionRequestWithBody(server, orgShortNameId, "application/json", bodyReader)
}

// NewCreateSsoConnectionRequestWithBody generates requests for CreateSsoConnection with any type of body
func NewCreateSsoConnectionRequestWithBody(server string, orgShortNameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/sso-connections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSsoConnectionRequest generates requests for DeleteSsoConnection
func NewDeleteSsoConnectionRequest(server string, orgShortNameId string, connectionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connectionId", runtime.ParamLocationPath, connectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/sso-connections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSsoConnectionRequest generates requests for GetSsoConnection
func NewGetSsoConnectionRequest(server string, orgShortNameId string, connectionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connectionId", runtime.ParamLocationPath, connectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/sso-connections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSsoConnectionRequest calls the generic UpdateSsoConnection builder with application/json body
func NewUpdateSsoConnectionRequest(server string, orgShortNameId string, connectionId string, body UpdateSsoConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSsoConnectionRequestWithBody(server, orgShortNameId, connectionId, "application/json", bodyReader)
}

// NewUpdateSsoConnectionRequestWithBody generates requests for UpdateSsoConnection with any type of body
func NewUpdateSsoConnectionRequestWithBody(server string, orgShortNameId string, connectionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "connectionId", runtime.ParamLocationPath, connectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/sso-connections/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrgUsersRequest generates requests for ListOrgUsers
func NewListOrgUsersRequest(server string, orgShortNameId string, params *ListOrgUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasInvites != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hasInvites", runtime.ParamLocationQuery, *params.HasInvites); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOrgUserRequest generates requests for DeleteOrgUser
func NewDeleteOrgUserRequest(server string, orgShortNameId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, orgShortNameId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMutateOrgUserRoleRequest calls the generic MutateOrgUserRole builder with application/json body
func NewMutateOrgUserRoleRequest(server string, orgShortNameId string, userId string, body MutateOrgUserRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMutateOrgUserRoleRequestWithBody(server, orgShortNameId, userId, "application/json", bodyReader)
}

// NewMutateOrgUserRoleRequestWithBody generates requests for MutateOrgUserRole with any type of body
func NewMutateOrgUserRoleRequestWithBody(server string, orgShortNameId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/role", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspacesRequest generates requests for ListWorkspaces
func NewListWorkspacesRequest(server string, orgShortNameId string, params *ListWorkspacesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.WorkspaceIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspaceIds", runtime.ParamLocationQuery, *params.WorkspaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkspaceRequest calls the generic CreateWorkspace builder with application/json body
func NewCreateWorkspaceRequest(server string, orgShortNameId string, body CreateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkspaceRequestWithBody(server, orgShortNameId, "application/json", bodyReader)
}

// NewCreateWorkspaceRequestWithBody generates requests for CreateWorkspace with any type of body
func NewCreateWorkspaceRequestWithBody(server string, orgShortNameId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceRequest generates requests for DeleteWorkspace
func NewDeleteWorkspaceRequest(server string, orgShortNameId string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceRequest generates requests for GetWorkspace
func NewGetWorkspaceRequest(server string, orgShortNameId string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, orgShortNameId string, workspaceId string, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceRequestWithBody(server, orgShortNameId, workspaceId, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, orgShortNameId string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspacePipelinesRequest generates requests for ListWorkspacePipelines
func NewListWorkspacePipelinesRequest(server string, orgShortNameId string, workspaceId string, params *ListWorkspacePipelinesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/pipelines", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NumRuns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "numRuns", runtime.ParamLocationQuery, *params.NumRuns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameLike != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__like", runtime.ParamLocationQuery, *params.NameLike); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Owner != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsPaused != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isPaused", runtime.ParamLocationQuery, *params.IsPaused); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isActive", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastRunStateIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastRunState__in", runtime.ParamLocationQuery, *params.LastRunStateIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RunStateIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "runState__in", runtime.ParamLocationQuery, *params.RunStateIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RunAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "runAfter", runtime.ParamLocationQuery, *params.RunAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TagIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__in", runtime.ParamLocationQuery, *params.TagIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DeploymentIdIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deploymentId__in", runtime.ParamLocationQuery, *params.DeploymentIdIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWorkspaceUsersRequest generates requests for ListWorkspaceUsers
func NewListWorkspaceUsersRequest(server string, orgShortNameId string, workspaceId string, params *ListWorkspaceUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWorkspaceUserRequest generates requests for DeleteWorkspaceUser
func NewDeleteWorkspaceUserRequest(server string, orgShortNameId string, workspaceId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMutateWorkspaceUserRoleRequest calls the generic MutateWorkspaceUserRole builder with application/json body
func NewMutateWorkspaceUserRoleRequest(server string, orgShortNameId string, workspaceId string, userId string, body MutateWorkspaceUserRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMutateWorkspaceUserRoleRequestWithBody(server, orgShortNameId, workspaceId, userId, "application/json", bodyReader)
}

// NewMutateWorkspaceUserRoleRequestWithBody generates requests for MutateWorkspaceUserRole with any type of body
func NewMutateWorkspaceUserRoleRequestWithBody(server string, orgShortNameId string, workspaceId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgShortNameId", runtime.ParamLocationPath, orgShortNameId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/users/%s/role", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSelfUserRequest generates requests for GetSelfUser
func NewGetSelfUserRequest(server string, params *GetSelfUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CreateIfNotExist != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createIfNotExist", runtime.ParamLocationQuery, *params.CreateIfNotExist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSelfUserInviteRequest calls the generic UpdateSelfUserInvite builder with application/json body
func NewUpdateSelfUserInviteRequest(server string, inviteId string, body UpdateSelfUserInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSelfUserInviteRequestWithBody(server, inviteId, "application/json", bodyReader)
}

// NewUpdateSelfUserInviteRequestWithBody generates requests for UpdateSelfUserInvite with any type of body
func NewUpdateSelfUserInviteRequestWithBody(server string, inviteId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/self/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetUserInvite request
	GetUserInviteWithResponse(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*GetUserInviteResponse, error)

	// ValidateSsoLogin request with any body
	ValidateSsoLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateSsoLoginResponse, error)

	ValidateSsoLoginWithResponse(ctx context.Context, body ValidateSsoLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateSsoLoginResponse, error)

	// GetSharedCluster request
	GetSharedClusterWithResponse(ctx context.Context, params *GetSharedClusterParams, reqEditors ...RequestEditorFn) (*GetSharedClusterResponse, error)

	// GetClusterOptions request
	GetClusterOptionsWithResponse(ctx context.Context, params *GetClusterOptionsParams, reqEditors ...RequestEditorFn) (*GetClusterOptionsResponse, error)

	// GetDeploymentOptions request
	GetDeploymentOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDeploymentOptionsResponse, error)

	// ListOrganizationAuthIds request
	ListOrganizationAuthIdsWithResponse(ctx context.Context, params *ListOrganizationAuthIdsParams, reqEditors ...RequestEditorFn) (*ListOrganizationAuthIdsResponse, error)

	// ListOrganizations request
	ListOrganizationsWithResponse(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error)

	// CreateOrganization request with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	// GetOrganization request
	GetOrganizationWithResponse(ctx context.Context, orgShortNameId string, params *GetOrganizationParams, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error)

	// UpdateOrganization request with any body
	UpdateOrganizationWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	UpdateOrganizationWithResponse(ctx context.Context, orgShortNameId string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	// GetOrganizationAuditLogs request
	GetOrganizationAuditLogsWithResponse(ctx context.Context, orgShortNameId string, params *GetOrganizationAuditLogsParams, reqEditors ...RequestEditorFn) (*GetOrganizationAuditLogsResponse, error)

	// ListClusters request
	ListClustersWithResponse(ctx context.Context, orgShortNameId string, params *ListClustersParams, reqEditors ...RequestEditorFn) (*ListClustersResponse, error)

	// CreateAwsCluster request with any body
	CreateAwsClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAwsClusterResponse, error)

	CreateAwsClusterWithResponse(ctx context.Context, orgShortNameId string, body CreateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAwsClusterResponse, error)

	// UpdateAwsCluster request with any body
	UpdateAwsClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAwsClusterResponse, error)

	UpdateAwsClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, body UpdateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAwsClusterResponse, error)

	// CreateAzureCluster request with any body
	CreateAzureClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAzureClusterResponse, error)

	CreateAzureClusterWithResponse(ctx context.Context, orgShortNameId string, body CreateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAzureClusterResponse, error)

	// UpdateAzureCluster request with any body
	UpdateAzureClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAzureClusterResponse, error)

	UpdateAzureClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, body UpdateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAzureClusterResponse, error)

	// CreateGcpCluster request with any body
	CreateGcpClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGcpClusterResponse, error)

	CreateGcpClusterWithResponse(ctx context.Context, orgShortNameId string, body CreateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGcpClusterResponse, error)

	// UpdateGcpCluster request with any body
	UpdateGcpClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGcpClusterResponse, error)

	UpdateGcpClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, body UpdateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGcpClusterResponse, error)

	// DeleteCluster request
	DeleteClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error)

	// GetCluster request
	GetClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterResponse, error)

	// ListManagedDomains request
	ListManagedDomainsWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*ListManagedDomainsResponse, error)

	// CreateManagedDomain request with any body
	CreateManagedDomainWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateManagedDomainResponse, error)

	CreateManagedDomainWithResponse(ctx context.Context, orgShortNameId string, body CreateManagedDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateManagedDomainResponse, error)

	// DeleteManagedDomain request
	DeleteManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*DeleteManagedDomainResponse, error)

	// GetManagedDomain request
	GetManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*GetManagedDomainResponse, error)

	// UpdateManagedDomain request with any body
	UpdateManagedDomainWithBodyWithResponse(ctx context.Context, orgShortNameId string, domainId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateManagedDomainResponse, error)

	UpdateManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, body UpdateManagedDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateManagedDomainResponse, error)

	// VerifyManagedDomain request
	VerifyManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*VerifyManagedDomainResponse, error)

	// CreateUserInvite request with any body
	CreateUserInviteWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserInviteResponse, error)

	CreateUserInviteWithResponse(ctx context.Context, orgShortNameId string, body CreateUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserInviteResponse, error)

	// DeleteUserInvite request
	DeleteUserInviteWithResponse(ctx context.Context, orgShortNameId string, inviteId string, reqEditors ...RequestEditorFn) (*DeleteUserInviteResponse, error)

	// DeleteSsoBypassKey request
	DeleteSsoBypassKeyWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*DeleteSsoBypassKeyResponse, error)

	// GetSsoBypassKey request
	GetSsoBypassKeyWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*GetSsoBypassKeyResponse, error)

	// UpsertSsoBypassKey request
	UpsertSsoBypassKeyWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*UpsertSsoBypassKeyResponse, error)

	// ListSsoConnections request
	ListSsoConnectionsWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*ListSsoConnectionsResponse, error)

	// CreateSsoConnection request with any body
	CreateSsoConnectionWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSsoConnectionResponse, error)

	CreateSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, body CreateSsoConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSsoConnectionResponse, error)

	// DeleteSsoConnection request
	DeleteSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, connectionId string, reqEditors ...RequestEditorFn) (*DeleteSsoConnectionResponse, error)

	// GetSsoConnection request
	GetSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, connectionId string, reqEditors ...RequestEditorFn) (*GetSsoConnectionResponse, error)

	// UpdateSsoConnection request with any body
	UpdateSsoConnectionWithBodyWithResponse(ctx context.Context, orgShortNameId string, connectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSsoConnectionResponse, error)

	UpdateSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, connectionId string, body UpdateSsoConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSsoConnectionResponse, error)

	// ListOrgUsers request
	ListOrgUsersWithResponse(ctx context.Context, orgShortNameId string, params *ListOrgUsersParams, reqEditors ...RequestEditorFn) (*ListOrgUsersResponse, error)

	// DeleteOrgUser request
	DeleteOrgUserWithResponse(ctx context.Context, orgShortNameId string, userId string, reqEditors ...RequestEditorFn) (*DeleteOrgUserResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, orgShortNameId string, userId string, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// MutateOrgUserRole request with any body
	MutateOrgUserRoleWithBodyWithResponse(ctx context.Context, orgShortNameId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateOrgUserRoleResponse, error)

	MutateOrgUserRoleWithResponse(ctx context.Context, orgShortNameId string, userId string, body MutateOrgUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateOrgUserRoleResponse, error)

	// ListWorkspaces request
	ListWorkspacesWithResponse(ctx context.Context, orgShortNameId string, params *ListWorkspacesParams, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error)

	// CreateWorkspace request with any body
	CreateWorkspaceWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error)

	CreateWorkspaceWithResponse(ctx context.Context, orgShortNameId string, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error)

	// DeleteWorkspace request
	DeleteWorkspaceWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error)

	// GetWorkspace request
	GetWorkspaceWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	// UpdateWorkspace request with any body
	UpdateWorkspaceWithBodyWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	UpdateWorkspaceWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	// ListWorkspacePipelines request
	ListWorkspacePipelinesWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, params *ListWorkspacePipelinesParams, reqEditors ...RequestEditorFn) (*ListWorkspacePipelinesResponse, error)

	// ListWorkspaceUsers request
	ListWorkspaceUsersWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, params *ListWorkspaceUsersParams, reqEditors ...RequestEditorFn) (*ListWorkspaceUsersResponse, error)

	// DeleteWorkspaceUser request
	DeleteWorkspaceUserWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, userId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceUserResponse, error)

	// MutateWorkspaceUserRole request with any body
	MutateWorkspaceUserRoleWithBodyWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateWorkspaceUserRoleResponse, error)

	MutateWorkspaceUserRoleWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, userId string, body MutateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateWorkspaceUserRoleResponse, error)

	// GetSelfUser request
	GetSelfUserWithResponse(ctx context.Context, params *GetSelfUserParams, reqEditors ...RequestEditorFn) (*GetSelfUserResponse, error)

	// UpdateSelfUserInvite request with any body
	UpdateSelfUserInviteWithBodyWithResponse(ctx context.Context, inviteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSelfUserInviteResponse, error)

	UpdateSelfUserInviteWithResponse(ctx context.Context, inviteId string, body UpdateSelfUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSelfUserInviteResponse, error)
}

type GetUserInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateSsoLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoLoginCallback
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ValidateSsoLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateSsoLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharedClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedCluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSharedClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharedClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClusterOptions
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetClusterOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentOptions
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDeploymentOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationAuthIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListOrganizationAuthIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationAuthIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationAuditLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]int
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationAuditLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationAuditLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClustersPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAwsClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateAwsClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAwsClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAwsClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateAwsClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAwsClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAzureClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateAzureClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAzureClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAzureClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateAzureClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAzureClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGcpClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateGcpClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGcpClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGcpClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateGcpClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGcpClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterDetailed
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListManagedDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ManagedDomain
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListManagedDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListManagedDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateManagedDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagedDomain
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateManagedDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateManagedDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteManagedDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagedDomain
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteManagedDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteManagedDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetManagedDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagedDomain
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetManagedDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetManagedDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateManagedDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagedDomain
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateManagedDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateManagedDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyManagedDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagedDomain
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r VerifyManagedDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyManagedDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateUserInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUserInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSsoBypassKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSsoBypassKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSsoBypassKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSsoBypassKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoBypassKey
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSsoBypassKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSsoBypassKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertSsoBypassKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoBypassKey
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpsertSsoBypassKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertSsoBypassKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSsoConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SsoConnection
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListSsoConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSsoConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSsoConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoConnection
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateSsoConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSsoConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSsoConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoConnection
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSsoConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSsoConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSsoConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoConnection
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSsoConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSsoConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSsoConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoConnection
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateSsoConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSsoConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrgUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListOrgUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrgUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteOrgUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MutateOrgUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRole
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r MutateOrgUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MutateOrgUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspacesPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspacePipelinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListWorkspacePipelines
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListWorkspacePipelinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspacePipelinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspaceUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MutateWorkspaceUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRole
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r MutateWorkspaceUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MutateWorkspaceUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Self
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSelfUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSelfUserInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateSelfUserInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSelfUserInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetUserInviteWithResponse request returning *GetUserInviteResponse
func (c *ClientWithResponses) GetUserInviteWithResponse(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*GetUserInviteResponse, error) {
	rsp, err := c.GetUserInvite(ctx, inviteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInviteResponse(rsp)
}

// ValidateSsoLoginWithBodyWithResponse request with arbitrary body returning *ValidateSsoLoginResponse
func (c *ClientWithResponses) ValidateSsoLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateSsoLoginResponse, error) {
	rsp, err := c.ValidateSsoLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateSsoLoginResponse(rsp)
}

func (c *ClientWithResponses) ValidateSsoLoginWithResponse(ctx context.Context, body ValidateSsoLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateSsoLoginResponse, error) {
	rsp, err := c.ValidateSsoLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateSsoLoginResponse(rsp)
}

// GetSharedClusterWithResponse request returning *GetSharedClusterResponse
func (c *ClientWithResponses) GetSharedClusterWithResponse(ctx context.Context, params *GetSharedClusterParams, reqEditors ...RequestEditorFn) (*GetSharedClusterResponse, error) {
	rsp, err := c.GetSharedCluster(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharedClusterResponse(rsp)
}

// GetClusterOptionsWithResponse request returning *GetClusterOptionsResponse
func (c *ClientWithResponses) GetClusterOptionsWithResponse(ctx context.Context, params *GetClusterOptionsParams, reqEditors ...RequestEditorFn) (*GetClusterOptionsResponse, error) {
	rsp, err := c.GetClusterOptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterOptionsResponse(rsp)
}

// GetDeploymentOptionsWithResponse request returning *GetDeploymentOptionsResponse
func (c *ClientWithResponses) GetDeploymentOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDeploymentOptionsResponse, error) {
	rsp, err := c.GetDeploymentOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentOptionsResponse(rsp)
}

// ListOrganizationAuthIdsWithResponse request returning *ListOrganizationAuthIdsResponse
func (c *ClientWithResponses) ListOrganizationAuthIdsWithResponse(ctx context.Context, params *ListOrganizationAuthIdsParams, reqEditors ...RequestEditorFn) (*ListOrganizationAuthIdsResponse, error) {
	rsp, err := c.ListOrganizationAuthIds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationAuthIdsResponse(rsp)
}

// ListOrganizationsWithResponse request returning *ListOrganizationsResponse
func (c *ClientWithResponses) ListOrganizationsWithResponse(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error) {
	rsp, err := c.ListOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, orgShortNameId string, params *GetOrganizationParams, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, orgShortNameId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// UpdateOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationResponse
func (c *ClientWithResponses) UpdateOrganizationWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationWithBody(ctx, orgShortNameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationWithResponse(ctx context.Context, orgShortNameId string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganization(ctx, orgShortNameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

// GetOrganizationAuditLogsWithResponse request returning *GetOrganizationAuditLogsResponse
func (c *ClientWithResponses) GetOrganizationAuditLogsWithResponse(ctx context.Context, orgShortNameId string, params *GetOrganizationAuditLogsParams, reqEditors ...RequestEditorFn) (*GetOrganizationAuditLogsResponse, error) {
	rsp, err := c.GetOrganizationAuditLogs(ctx, orgShortNameId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationAuditLogsResponse(rsp)
}

// ListClustersWithResponse request returning *ListClustersResponse
func (c *ClientWithResponses) ListClustersWithResponse(ctx context.Context, orgShortNameId string, params *ListClustersParams, reqEditors ...RequestEditorFn) (*ListClustersResponse, error) {
	rsp, err := c.ListClusters(ctx, orgShortNameId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClustersResponse(rsp)
}

// CreateAwsClusterWithBodyWithResponse request with arbitrary body returning *CreateAwsClusterResponse
func (c *ClientWithResponses) CreateAwsClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAwsClusterResponse, error) {
	rsp, err := c.CreateAwsClusterWithBody(ctx, orgShortNameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAwsClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateAwsClusterWithResponse(ctx context.Context, orgShortNameId string, body CreateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAwsClusterResponse, error) {
	rsp, err := c.CreateAwsCluster(ctx, orgShortNameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAwsClusterResponse(rsp)
}

// UpdateAwsClusterWithBodyWithResponse request with arbitrary body returning *UpdateAwsClusterResponse
func (c *ClientWithResponses) UpdateAwsClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAwsClusterResponse, error) {
	rsp, err := c.UpdateAwsClusterWithBody(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAwsClusterResponse(rsp)
}

func (c *ClientWithResponses) UpdateAwsClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, body UpdateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAwsClusterResponse, error) {
	rsp, err := c.UpdateAwsCluster(ctx, orgShortNameId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAwsClusterResponse(rsp)
}

// CreateAzureClusterWithBodyWithResponse request with arbitrary body returning *CreateAzureClusterResponse
func (c *ClientWithResponses) CreateAzureClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAzureClusterResponse, error) {
	rsp, err := c.CreateAzureClusterWithBody(ctx, orgShortNameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAzureClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateAzureClusterWithResponse(ctx context.Context, orgShortNameId string, body CreateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAzureClusterResponse, error) {
	rsp, err := c.CreateAzureCluster(ctx, orgShortNameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAzureClusterResponse(rsp)
}

// UpdateAzureClusterWithBodyWithResponse request with arbitrary body returning *UpdateAzureClusterResponse
func (c *ClientWithResponses) UpdateAzureClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAzureClusterResponse, error) {
	rsp, err := c.UpdateAzureClusterWithBody(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAzureClusterResponse(rsp)
}

func (c *ClientWithResponses) UpdateAzureClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, body UpdateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAzureClusterResponse, error) {
	rsp, err := c.UpdateAzureCluster(ctx, orgShortNameId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAzureClusterResponse(rsp)
}

// CreateGcpClusterWithBodyWithResponse request with arbitrary body returning *CreateGcpClusterResponse
func (c *ClientWithResponses) CreateGcpClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGcpClusterResponse, error) {
	rsp, err := c.CreateGcpClusterWithBody(ctx, orgShortNameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGcpClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateGcpClusterWithResponse(ctx context.Context, orgShortNameId string, body CreateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGcpClusterResponse, error) {
	rsp, err := c.CreateGcpCluster(ctx, orgShortNameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGcpClusterResponse(rsp)
}

// UpdateGcpClusterWithBodyWithResponse request with arbitrary body returning *UpdateGcpClusterResponse
func (c *ClientWithResponses) UpdateGcpClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGcpClusterResponse, error) {
	rsp, err := c.UpdateGcpClusterWithBody(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGcpClusterResponse(rsp)
}

func (c *ClientWithResponses) UpdateGcpClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, body UpdateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGcpClusterResponse, error) {
	rsp, err := c.UpdateGcpCluster(ctx, orgShortNameId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGcpClusterResponse(rsp)
}

// DeleteClusterWithResponse request returning *DeleteClusterResponse
func (c *ClientWithResponses) DeleteClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error) {
	rsp, err := c.DeleteCluster(ctx, orgShortNameId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterResponse(rsp)
}

// GetClusterWithResponse request returning *GetClusterResponse
func (c *ClientWithResponses) GetClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterResponse, error) {
	rsp, err := c.GetCluster(ctx, orgShortNameId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterResponse(rsp)
}

// ListManagedDomainsWithResponse request returning *ListManagedDomainsResponse
func (c *ClientWithResponses) ListManagedDomainsWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*ListManagedDomainsResponse, error) {
	rsp, err := c.ListManagedDomains(ctx, orgShortNameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListManagedDomainsResponse(rsp)
}

// CreateManagedDomainWithBodyWithResponse request with arbitrary body returning *CreateManagedDomainResponse
func (c *ClientWithResponses) CreateManagedDomainWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateManagedDomainResponse, error) {
	rsp, err := c.CreateManagedDomainWithBody(ctx, orgShortNameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateManagedDomainResponse(rsp)
}

func (c *ClientWithResponses) CreateManagedDomainWithResponse(ctx context.Context, orgShortNameId string, body CreateManagedDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateManagedDomainResponse, error) {
	rsp, err := c.CreateManagedDomain(ctx, orgShortNameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateManagedDomainResponse(rsp)
}

// DeleteManagedDomainWithResponse request returning *DeleteManagedDomainResponse
func (c *ClientWithResponses) DeleteManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*DeleteManagedDomainResponse, error) {
	rsp, err := c.DeleteManagedDomain(ctx, orgShortNameId, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteManagedDomainResponse(rsp)
}

// GetManagedDomainWithResponse request returning *GetManagedDomainResponse
func (c *ClientWithResponses) GetManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*GetManagedDomainResponse, error) {
	rsp, err := c.GetManagedDomain(ctx, orgShortNameId, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetManagedDomainResponse(rsp)
}

// UpdateManagedDomainWithBodyWithResponse request with arbitrary body returning *UpdateManagedDomainResponse
func (c *ClientWithResponses) UpdateManagedDomainWithBodyWithResponse(ctx context.Context, orgShortNameId string, domainId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateManagedDomainResponse, error) {
	rsp, err := c.UpdateManagedDomainWithBody(ctx, orgShortNameId, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateManagedDomainResponse(rsp)
}

func (c *ClientWithResponses) UpdateManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, body UpdateManagedDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateManagedDomainResponse, error) {
	rsp, err := c.UpdateManagedDomain(ctx, orgShortNameId, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateManagedDomainResponse(rsp)
}

// VerifyManagedDomainWithResponse request returning *VerifyManagedDomainResponse
func (c *ClientWithResponses) VerifyManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...RequestEditorFn) (*VerifyManagedDomainResponse, error) {
	rsp, err := c.VerifyManagedDomain(ctx, orgShortNameId, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyManagedDomainResponse(rsp)
}

// CreateUserInviteWithBodyWithResponse request with arbitrary body returning *CreateUserInviteResponse
func (c *ClientWithResponses) CreateUserInviteWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserInviteResponse, error) {
	rsp, err := c.CreateUserInviteWithBody(ctx, orgShortNameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserInviteResponse(rsp)
}

func (c *ClientWithResponses) CreateUserInviteWithResponse(ctx context.Context, orgShortNameId string, body CreateUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserInviteResponse, error) {
	rsp, err := c.CreateUserInvite(ctx, orgShortNameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserInviteResponse(rsp)
}

// DeleteUserInviteWithResponse request returning *DeleteUserInviteResponse
func (c *ClientWithResponses) DeleteUserInviteWithResponse(ctx context.Context, orgShortNameId string, inviteId string, reqEditors ...RequestEditorFn) (*DeleteUserInviteResponse, error) {
	rsp, err := c.DeleteUserInvite(ctx, orgShortNameId, inviteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserInviteResponse(rsp)
}

// DeleteSsoBypassKeyWithResponse request returning *DeleteSsoBypassKeyResponse
func (c *ClientWithResponses) DeleteSsoBypassKeyWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*DeleteSsoBypassKeyResponse, error) {
	rsp, err := c.DeleteSsoBypassKey(ctx, orgShortNameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSsoBypassKeyResponse(rsp)
}

// GetSsoBypassKeyWithResponse request returning *GetSsoBypassKeyResponse
func (c *ClientWithResponses) GetSsoBypassKeyWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*GetSsoBypassKeyResponse, error) {
	rsp, err := c.GetSsoBypassKey(ctx, orgShortNameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSsoBypassKeyResponse(rsp)
}

// UpsertSsoBypassKeyWithResponse request returning *UpsertSsoBypassKeyResponse
func (c *ClientWithResponses) UpsertSsoBypassKeyWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*UpsertSsoBypassKeyResponse, error) {
	rsp, err := c.UpsertSsoBypassKey(ctx, orgShortNameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertSsoBypassKeyResponse(rsp)
}

// ListSsoConnectionsWithResponse request returning *ListSsoConnectionsResponse
func (c *ClientWithResponses) ListSsoConnectionsWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...RequestEditorFn) (*ListSsoConnectionsResponse, error) {
	rsp, err := c.ListSsoConnections(ctx, orgShortNameId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSsoConnectionsResponse(rsp)
}

// CreateSsoConnectionWithBodyWithResponse request with arbitrary body returning *CreateSsoConnectionResponse
func (c *ClientWithResponses) CreateSsoConnectionWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSsoConnectionResponse, error) {
	rsp, err := c.CreateSsoConnectionWithBody(ctx, orgShortNameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSsoConnectionResponse(rsp)
}

func (c *ClientWithResponses) CreateSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, body CreateSsoConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSsoConnectionResponse, error) {
	rsp, err := c.CreateSsoConnection(ctx, orgShortNameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSsoConnectionResponse(rsp)
}

// DeleteSsoConnectionWithResponse request returning *DeleteSsoConnectionResponse
func (c *ClientWithResponses) DeleteSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, connectionId string, reqEditors ...RequestEditorFn) (*DeleteSsoConnectionResponse, error) {
	rsp, err := c.DeleteSsoConnection(ctx, orgShortNameId, connectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSsoConnectionResponse(rsp)
}

// GetSsoConnectionWithResponse request returning *GetSsoConnectionResponse
func (c *ClientWithResponses) GetSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, connectionId string, reqEditors ...RequestEditorFn) (*GetSsoConnectionResponse, error) {
	rsp, err := c.GetSsoConnection(ctx, orgShortNameId, connectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSsoConnectionResponse(rsp)
}

// UpdateSsoConnectionWithBodyWithResponse request with arbitrary body returning *UpdateSsoConnectionResponse
func (c *ClientWithResponses) UpdateSsoConnectionWithBodyWithResponse(ctx context.Context, orgShortNameId string, connectionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSsoConnectionResponse, error) {
	rsp, err := c.UpdateSsoConnectionWithBody(ctx, orgShortNameId, connectionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSsoConnectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, connectionId string, body UpdateSsoConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSsoConnectionResponse, error) {
	rsp, err := c.UpdateSsoConnection(ctx, orgShortNameId, connectionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSsoConnectionResponse(rsp)
}

// ListOrgUsersWithResponse request returning *ListOrgUsersResponse
func (c *ClientWithResponses) ListOrgUsersWithResponse(ctx context.Context, orgShortNameId string, params *ListOrgUsersParams, reqEditors ...RequestEditorFn) (*ListOrgUsersResponse, error) {
	rsp, err := c.ListOrgUsers(ctx, orgShortNameId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrgUsersResponse(rsp)
}

// DeleteOrgUserWithResponse request returning *DeleteOrgUserResponse
func (c *ClientWithResponses) DeleteOrgUserWithResponse(ctx context.Context, orgShortNameId string, userId string, reqEditors ...RequestEditorFn) (*DeleteOrgUserResponse, error) {
	rsp, err := c.DeleteOrgUser(ctx, orgShortNameId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, orgShortNameId string, userId string, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, orgShortNameId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// MutateOrgUserRoleWithBodyWithResponse request with arbitrary body returning *MutateOrgUserRoleResponse
func (c *ClientWithResponses) MutateOrgUserRoleWithBodyWithResponse(ctx context.Context, orgShortNameId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateOrgUserRoleResponse, error) {
	rsp, err := c.MutateOrgUserRoleWithBody(ctx, orgShortNameId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateOrgUserRoleResponse(rsp)
}

func (c *ClientWithResponses) MutateOrgUserRoleWithResponse(ctx context.Context, orgShortNameId string, userId string, body MutateOrgUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateOrgUserRoleResponse, error) {
	rsp, err := c.MutateOrgUserRole(ctx, orgShortNameId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateOrgUserRoleResponse(rsp)
}

// ListWorkspacesWithResponse request returning *ListWorkspacesResponse
func (c *ClientWithResponses) ListWorkspacesWithResponse(ctx context.Context, orgShortNameId string, params *ListWorkspacesParams, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error) {
	rsp, err := c.ListWorkspaces(ctx, orgShortNameId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspacesResponse(rsp)
}

// CreateWorkspaceWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceResponse
func (c *ClientWithResponses) CreateWorkspaceWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspaceWithBody(ctx, orgShortNameId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkspaceWithResponse(ctx context.Context, orgShortNameId string, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspace(ctx, orgShortNameId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

// DeleteWorkspaceWithResponse request returning *DeleteWorkspaceResponse
func (c *ClientWithResponses) DeleteWorkspaceWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspace(ctx, orgShortNameId, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

// GetWorkspaceWithResponse request returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, orgShortNameId, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspaceWithBody(ctx, orgShortNameId, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspace(ctx, orgShortNameId, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

// ListWorkspacePipelinesWithResponse request returning *ListWorkspacePipelinesResponse
func (c *ClientWithResponses) ListWorkspacePipelinesWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, params *ListWorkspacePipelinesParams, reqEditors ...RequestEditorFn) (*ListWorkspacePipelinesResponse, error) {
	rsp, err := c.ListWorkspacePipelines(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspacePipelinesResponse(rsp)
}

// ListWorkspaceUsersWithResponse request returning *ListWorkspaceUsersResponse
func (c *ClientWithResponses) ListWorkspaceUsersWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, params *ListWorkspaceUsersParams, reqEditors ...RequestEditorFn) (*ListWorkspaceUsersResponse, error) {
	rsp, err := c.ListWorkspaceUsers(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspaceUsersResponse(rsp)
}

// DeleteWorkspaceUserWithResponse request returning *DeleteWorkspaceUserResponse
func (c *ClientWithResponses) DeleteWorkspaceUserWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, userId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceUserResponse, error) {
	rsp, err := c.DeleteWorkspaceUser(ctx, orgShortNameId, workspaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceUserResponse(rsp)
}

// MutateWorkspaceUserRoleWithBodyWithResponse request with arbitrary body returning *MutateWorkspaceUserRoleResponse
func (c *ClientWithResponses) MutateWorkspaceUserRoleWithBodyWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateWorkspaceUserRoleResponse, error) {
	rsp, err := c.MutateWorkspaceUserRoleWithBody(ctx, orgShortNameId, workspaceId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateWorkspaceUserRoleResponse(rsp)
}

func (c *ClientWithResponses) MutateWorkspaceUserRoleWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, userId string, body MutateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateWorkspaceUserRoleResponse, error) {
	rsp, err := c.MutateWorkspaceUserRole(ctx, orgShortNameId, workspaceId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateWorkspaceUserRoleResponse(rsp)
}

// GetSelfUserWithResponse request returning *GetSelfUserResponse
func (c *ClientWithResponses) GetSelfUserWithResponse(ctx context.Context, params *GetSelfUserParams, reqEditors ...RequestEditorFn) (*GetSelfUserResponse, error) {
	rsp, err := c.GetSelfUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfUserResponse(rsp)
}

// UpdateSelfUserInviteWithBodyWithResponse request with arbitrary body returning *UpdateSelfUserInviteResponse
func (c *ClientWithResponses) UpdateSelfUserInviteWithBodyWithResponse(ctx context.Context, inviteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSelfUserInviteResponse, error) {
	rsp, err := c.UpdateSelfUserInviteWithBody(ctx, inviteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSelfUserInviteResponse(rsp)
}

func (c *ClientWithResponses) UpdateSelfUserInviteWithResponse(ctx context.Context, inviteId string, body UpdateSelfUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSelfUserInviteResponse, error) {
	rsp, err := c.UpdateSelfUserInvite(ctx, inviteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSelfUserInviteResponse(rsp)
}

// ParseGetUserInviteResponse parses an HTTP response from a GetUserInviteWithResponse call
func ParseGetUserInviteResponse(rsp *http.Response) (*GetUserInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseValidateSsoLoginResponse parses an HTTP response from a ValidateSsoLoginWithResponse call
func ParseValidateSsoLoginResponse(rsp *http.Response) (*ValidateSsoLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateSsoLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoLoginCallback
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSharedClusterResponse parses an HTTP response from a GetSharedClusterWithResponse call
func ParseGetSharedClusterResponse(rsp *http.Response) (*GetSharedClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharedClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClusterOptionsResponse parses an HTTP response from a GetClusterOptionsWithResponse call
func ParseGetClusterOptionsResponse(rsp *http.Response) (*GetClusterOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClusterOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDeploymentOptionsResponse parses an HTTP response from a GetDeploymentOptionsWithResponse call
func ParseGetDeploymentOptionsResponse(rsp *http.Response) (*GetDeploymentOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListOrganizationAuthIdsResponse parses an HTTP response from a ListOrganizationAuthIdsWithResponse call
func ParseListOrganizationAuthIdsResponse(rsp *http.Response) (*ListOrganizationAuthIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationAuthIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListOrganizationsResponse parses an HTTP response from a ListOrganizationsWithResponse call
func ParseListOrganizationsResponse(rsp *http.Response) (*ListOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationResponse parses an HTTP response from a UpdateOrganizationWithResponse call
func ParseUpdateOrganizationResponse(rsp *http.Response) (*UpdateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrganizationAuditLogsResponse parses an HTTP response from a GetOrganizationAuditLogsWithResponse call
func ParseGetOrganizationAuditLogsResponse(rsp *http.Response) (*GetOrganizationAuditLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationAuditLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListClustersResponse parses an HTTP response from a ListClustersWithResponse call
func ParseListClustersResponse(rsp *http.Response) (*ListClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClustersPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAwsClusterResponse parses an HTTP response from a CreateAwsClusterWithResponse call
func ParseCreateAwsClusterResponse(rsp *http.Response) (*CreateAwsClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAwsClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAwsClusterResponse parses an HTTP response from a UpdateAwsClusterWithResponse call
func ParseUpdateAwsClusterResponse(rsp *http.Response) (*UpdateAwsClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAwsClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAzureClusterResponse parses an HTTP response from a CreateAzureClusterWithResponse call
func ParseCreateAzureClusterResponse(rsp *http.Response) (*CreateAzureClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAzureClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAzureClusterResponse parses an HTTP response from a UpdateAzureClusterWithResponse call
func ParseUpdateAzureClusterResponse(rsp *http.Response) (*UpdateAzureClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAzureClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateGcpClusterResponse parses an HTTP response from a CreateGcpClusterWithResponse call
func ParseCreateGcpClusterResponse(rsp *http.Response) (*CreateGcpClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGcpClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateGcpClusterResponse parses an HTTP response from a UpdateGcpClusterWithResponse call
func ParseUpdateGcpClusterResponse(rsp *http.Response) (*UpdateGcpClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGcpClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteClusterResponse parses an HTTP response from a DeleteClusterWithResponse call
func ParseDeleteClusterResponse(rsp *http.Response) (*DeleteClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClusterResponse parses an HTTP response from a GetClusterWithResponse call
func ParseGetClusterResponse(rsp *http.Response) (*GetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterDetailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListManagedDomainsResponse parses an HTTP response from a ListManagedDomainsWithResponse call
func ParseListManagedDomainsResponse(rsp *http.Response) (*ListManagedDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListManagedDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ManagedDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateManagedDomainResponse parses an HTTP response from a CreateManagedDomainWithResponse call
func ParseCreateManagedDomainResponse(rsp *http.Response) (*CreateManagedDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateManagedDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagedDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteManagedDomainResponse parses an HTTP response from a DeleteManagedDomainWithResponse call
func ParseDeleteManagedDomainResponse(rsp *http.Response) (*DeleteManagedDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteManagedDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagedDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetManagedDomainResponse parses an HTTP response from a GetManagedDomainWithResponse call
func ParseGetManagedDomainResponse(rsp *http.Response) (*GetManagedDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetManagedDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagedDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateManagedDomainResponse parses an HTTP response from a UpdateManagedDomainWithResponse call
func ParseUpdateManagedDomainResponse(rsp *http.Response) (*UpdateManagedDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateManagedDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagedDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVerifyManagedDomainResponse parses an HTTP response from a VerifyManagedDomainWithResponse call
func ParseVerifyManagedDomainResponse(rsp *http.Response) (*VerifyManagedDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyManagedDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagedDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateUserInviteResponse parses an HTTP response from a CreateUserInviteWithResponse call
func ParseCreateUserInviteResponse(rsp *http.Response) (*CreateUserInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserInviteResponse parses an HTTP response from a DeleteUserInviteWithResponse call
func ParseDeleteUserInviteResponse(rsp *http.Response) (*DeleteUserInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSsoBypassKeyResponse parses an HTTP response from a DeleteSsoBypassKeyWithResponse call
func ParseDeleteSsoBypassKeyResponse(rsp *http.Response) (*DeleteSsoBypassKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSsoBypassKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSsoBypassKeyResponse parses an HTTP response from a GetSsoBypassKeyWithResponse call
func ParseGetSsoBypassKeyResponse(rsp *http.Response) (*GetSsoBypassKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSsoBypassKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoBypassKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpsertSsoBypassKeyResponse parses an HTTP response from a UpsertSsoBypassKeyWithResponse call
func ParseUpsertSsoBypassKeyResponse(rsp *http.Response) (*UpsertSsoBypassKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertSsoBypassKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoBypassKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSsoConnectionsResponse parses an HTTP response from a ListSsoConnectionsWithResponse call
func ParseListSsoConnectionsResponse(rsp *http.Response) (*ListSsoConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSsoConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SsoConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateSsoConnectionResponse parses an HTTP response from a CreateSsoConnectionWithResponse call
func ParseCreateSsoConnectionResponse(rsp *http.Response) (*CreateSsoConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSsoConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSsoConnectionResponse parses an HTTP response from a DeleteSsoConnectionWithResponse call
func ParseDeleteSsoConnectionResponse(rsp *http.Response) (*DeleteSsoConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSsoConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSsoConnectionResponse parses an HTTP response from a GetSsoConnectionWithResponse call
func ParseGetSsoConnectionResponse(rsp *http.Response) (*GetSsoConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSsoConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSsoConnectionResponse parses an HTTP response from a UpdateSsoConnectionWithResponse call
func ParseUpdateSsoConnectionResponse(rsp *http.Response) (*UpdateSsoConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSsoConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListOrgUsersResponse parses an HTTP response from a ListOrgUsersWithResponse call
func ParseListOrgUsersResponse(rsp *http.Response) (*ListOrgUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrgUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgUserResponse parses an HTTP response from a DeleteOrgUserWithResponse call
func ParseDeleteOrgUserResponse(rsp *http.Response) (*DeleteOrgUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMutateOrgUserRoleResponse parses an HTTP response from a MutateOrgUserRoleWithResponse call
func ParseMutateOrgUserRoleResponse(rsp *http.Response) (*MutateOrgUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MutateOrgUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWorkspacesResponse parses an HTTP response from a ListWorkspacesWithResponse call
func ParseListWorkspacesResponse(rsp *http.Response) (*ListWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspacesPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateWorkspaceResponse parses an HTTP response from a CreateWorkspaceWithResponse call
func ParseCreateWorkspaceResponse(rsp *http.Response) (*CreateWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceResponse parses an HTTP response from a DeleteWorkspaceWithResponse call
func ParseDeleteWorkspaceResponse(rsp *http.Response) (*DeleteWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWorkspacePipelinesResponse parses an HTTP response from a ListWorkspacePipelinesWithResponse call
func ParseListWorkspacePipelinesResponse(rsp *http.Response) (*ListWorkspacePipelinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspacePipelinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListWorkspacePipelines
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWorkspaceUsersResponse parses an HTTP response from a ListWorkspaceUsersWithResponse call
func ParseListWorkspaceUsersResponse(rsp *http.Response) (*ListWorkspaceUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspaceUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceUserResponse parses an HTTP response from a DeleteWorkspaceUserWithResponse call
func ParseDeleteWorkspaceUserResponse(rsp *http.Response) (*DeleteWorkspaceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMutateWorkspaceUserRoleResponse parses an HTTP response from a MutateWorkspaceUserRoleWithResponse call
func ParseMutateWorkspaceUserRoleResponse(rsp *http.Response) (*MutateWorkspaceUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MutateWorkspaceUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSelfUserResponse parses an HTTP response from a GetSelfUserWithResponse call
func ParseGetSelfUserResponse(rsp *http.Response) (*GetSelfUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Self
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSelfUserInviteResponse parses an HTTP response from a UpdateSelfUserInviteWithResponse call
func ParseUpdateSelfUserInviteResponse(rsp *http.Response) (*UpdateSelfUserInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSelfUserInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
