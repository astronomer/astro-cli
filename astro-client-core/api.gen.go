// Package astrocore provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package astrocore

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	JWTScopes = "JWT.Scopes"
)

// Defines values for ApiTokenType.
const (
	ApiTokenTypeDEPLOYMENT   ApiTokenType = "DEPLOYMENT"
	ApiTokenTypeORGANIZATION ApiTokenType = "ORGANIZATION"
	ApiTokenTypeWORKSPACE    ApiTokenType = "WORKSPACE"
)

// Defines values for ApiTokenRoleEntityType.
const (
	ApiTokenRoleEntityTypeDEPLOYMENT   ApiTokenRoleEntityType = "DEPLOYMENT"
	ApiTokenRoleEntityTypeORGANIZATION ApiTokenRoleEntityType = "ORGANIZATION"
	ApiTokenRoleEntityTypeWORKSPACE    ApiTokenRoleEntityType = "WORKSPACE"
)

// Defines values for BasicSubjectProfileSubjectType.
const (
	BasicSubjectProfileSubjectTypeSERVICEKEY BasicSubjectProfileSubjectType = "SERVICEKEY"
	BasicSubjectProfileSubjectTypeUSER       BasicSubjectProfileSubjectType = "USER"
)

// Defines values for ClusterCloudProvider.
const (
	ClusterCloudProviderAws   ClusterCloudProvider = "aws"
	ClusterCloudProviderAzure ClusterCloudProvider = "azure"
	ClusterCloudProviderGcp   ClusterCloudProvider = "gcp"
)

// Defines values for ClusterStatus.
const (
	ClusterStatusCREATED      ClusterStatus = "CREATED"
	ClusterStatusCREATEFAILED ClusterStatus = "CREATE_FAILED"
	ClusterStatusCREATING     ClusterStatus = "CREATING"
	ClusterStatusDELETED      ClusterStatus = "DELETED"
	ClusterStatusDELETEFAILED ClusterStatus = "DELETE_FAILED"
	ClusterStatusDELETING     ClusterStatus = "DELETING"
	ClusterStatusFORCEDELETED ClusterStatus = "FORCE_DELETED"
	ClusterStatusUPDATEFAILED ClusterStatus = "UPDATE_FAILED"
	ClusterStatusUPDATING     ClusterStatus = "UPDATING"
)

// Defines values for ClusterType.
const (
	ClusterTypeBRINGYOUROWNCLOUD ClusterType = "BRING_YOUR_OWN_CLOUD"
	ClusterTypeHOSTED            ClusterType = "HOSTED"
	ClusterTypeSHARED            ClusterType = "SHARED"
)

// Defines values for ClusterDetailedCloudProvider.
const (
	ClusterDetailedCloudProviderAws   ClusterDetailedCloudProvider = "aws"
	ClusterDetailedCloudProviderAzure ClusterDetailedCloudProvider = "azure"
	ClusterDetailedCloudProviderGcp   ClusterDetailedCloudProvider = "gcp"
)

// Defines values for ClusterDetailedStatus.
const (
	ClusterDetailedStatusCREATED      ClusterDetailedStatus = "CREATED"
	ClusterDetailedStatusCREATEFAILED ClusterDetailedStatus = "CREATE_FAILED"
	ClusterDetailedStatusCREATING     ClusterDetailedStatus = "CREATING"
	ClusterDetailedStatusDELETED      ClusterDetailedStatus = "DELETED"
	ClusterDetailedStatusDELETEFAILED ClusterDetailedStatus = "DELETE_FAILED"
	ClusterDetailedStatusDELETING     ClusterDetailedStatus = "DELETING"
	ClusterDetailedStatusFORCEDELETED ClusterDetailedStatus = "FORCE_DELETED"
	ClusterDetailedStatusUPDATEFAILED ClusterDetailedStatus = "UPDATE_FAILED"
	ClusterDetailedStatusUPDATING     ClusterDetailedStatus = "UPDATING"
)

// Defines values for ClusterDetailedType.
const (
	ClusterDetailedTypeBRINGYOUROWNCLOUD ClusterDetailedType = "BRING_YOUR_OWN_CLOUD"
	ClusterDetailedTypeHOSTED            ClusterDetailedType = "HOSTED"
	ClusterDetailedTypeSHARED            ClusterDetailedType = "SHARED"
)

// Defines values for ClusterRouteSource.
const (
	ClusterRouteSourceMANUAL ClusterRouteSource = "MANUAL"
)

// Defines values for ClusterRouteTargetType.
const (
	ClusterRouteTargetTypeAWSPCX ClusterRouteTargetType = "AWS_PCX"
)

// Defines values for CreateAwsClusterRequestType.
const (
	CreateAwsClusterRequestTypeBRINGYOUROWNCLOUD CreateAwsClusterRequestType = "BRING_YOUR_OWN_CLOUD"
	CreateAwsClusterRequestTypeHOSTED            CreateAwsClusterRequestType = "HOSTED"
	CreateAwsClusterRequestTypeSHARED            CreateAwsClusterRequestType = "SHARED"
)

// Defines values for CreateAzureClusterRequestType.
const (
	CreateAzureClusterRequestTypeBRINGYOUROWNCLOUD CreateAzureClusterRequestType = "BRING_YOUR_OWN_CLOUD"
	CreateAzureClusterRequestTypeHOSTED            CreateAzureClusterRequestType = "HOSTED"
	CreateAzureClusterRequestTypeSHARED            CreateAzureClusterRequestType = "SHARED"
)

// Defines values for CreateClusterRouteRequestSource.
const (
	CreateClusterRouteRequestSourceMANUAL CreateClusterRouteRequestSource = "MANUAL"
)

// Defines values for CreateClusterRouteRequestTargetType.
const (
	CreateClusterRouteRequestTargetTypeAWSPCX CreateClusterRouteRequestTargetType = "AWS_PCX"
)

// Defines values for CreateCustomRoleRequestScopeType.
const (
	CreateCustomRoleRequestScopeTypeDEPLOYMENT CreateCustomRoleRequestScopeType = "DEPLOYMENT"
)

// Defines values for CreateDedicatedDeploymentRequestExecutor.
const (
	CreateDedicatedDeploymentRequestExecutorCELERY     CreateDedicatedDeploymentRequestExecutor = "CELERY"
	CreateDedicatedDeploymentRequestExecutorKUBERNETES CreateDedicatedDeploymentRequestExecutor = "KUBERNETES"
)

// Defines values for CreateDedicatedDeploymentRequestSchedulerSize.
const (
	CreateDedicatedDeploymentRequestSchedulerSizeLARGE  CreateDedicatedDeploymentRequestSchedulerSize = "LARGE"
	CreateDedicatedDeploymentRequestSchedulerSizeMEDIUM CreateDedicatedDeploymentRequestSchedulerSize = "MEDIUM"
	CreateDedicatedDeploymentRequestSchedulerSizeSMALL  CreateDedicatedDeploymentRequestSchedulerSize = "SMALL"
)

// Defines values for CreateDedicatedDeploymentRequestType.
const (
	CreateDedicatedDeploymentRequestTypeDEDICATED CreateDedicatedDeploymentRequestType = "DEDICATED"
	CreateDedicatedDeploymentRequestTypeHYBRID    CreateDedicatedDeploymentRequestType = "HYBRID"
	CreateDedicatedDeploymentRequestTypeSTANDARD  CreateDedicatedDeploymentRequestType = "STANDARD"
)

// Defines values for CreateDeployRequestType.
const (
	CreateDeployRequestTypeDAG   CreateDeployRequestType = "DAG"
	CreateDeployRequestTypeIMAGE CreateDeployRequestType = "IMAGE"
)

// Defines values for CreateEnvironmentObjectLinkRequestScope.
const (
	CreateEnvironmentObjectLinkRequestScopeDEPLOYMENT CreateEnvironmentObjectLinkRequestScope = "DEPLOYMENT"
)

// Defines values for CreateEnvironmentObjectRequestObjectType.
const (
	CreateEnvironmentObjectRequestObjectTypeAIRFLOWVARIABLE CreateEnvironmentObjectRequestObjectType = "AIRFLOW_VARIABLE"
	CreateEnvironmentObjectRequestObjectTypeCONNECTION      CreateEnvironmentObjectRequestObjectType = "CONNECTION"
)

// Defines values for CreateEnvironmentObjectRequestScope.
const (
	CreateEnvironmentObjectRequestScopeDEPLOYMENT CreateEnvironmentObjectRequestScope = "DEPLOYMENT"
	CreateEnvironmentObjectRequestScopeWORKSPACE  CreateEnvironmentObjectRequestScope = "WORKSPACE"
)

// Defines values for CreateGcpClusterRequestType.
const (
	CreateGcpClusterRequestTypeBRINGYOUROWNCLOUD CreateGcpClusterRequestType = "BRING_YOUR_OWN_CLOUD"
	CreateGcpClusterRequestTypeHOSTED            CreateGcpClusterRequestType = "HOSTED"
	CreateGcpClusterRequestTypeSHARED            CreateGcpClusterRequestType = "SHARED"
)

// Defines values for CreateHybridDeploymentRequestExecutor.
const (
	CreateHybridDeploymentRequestExecutorCELERY     CreateHybridDeploymentRequestExecutor = "CELERY"
	CreateHybridDeploymentRequestExecutorKUBERNETES CreateHybridDeploymentRequestExecutor = "KUBERNETES"
)

// Defines values for CreateHybridDeploymentRequestType.
const (
	CreateHybridDeploymentRequestTypeDEDICATED CreateHybridDeploymentRequestType = "DEDICATED"
	CreateHybridDeploymentRequestTypeHYBRID    CreateHybridDeploymentRequestType = "HYBRID"
	CreateHybridDeploymentRequestTypeSTANDARD  CreateHybridDeploymentRequestType = "STANDARD"
)

// Defines values for CreateStandardDeploymentRequestCloudProvider.
const (
	CreateStandardDeploymentRequestCloudProviderAWS   CreateStandardDeploymentRequestCloudProvider = "AWS"
	CreateStandardDeploymentRequestCloudProviderAZURE CreateStandardDeploymentRequestCloudProvider = "AZURE"
	CreateStandardDeploymentRequestCloudProviderGCP   CreateStandardDeploymentRequestCloudProvider = "GCP"
)

// Defines values for CreateStandardDeploymentRequestExecutor.
const (
	CreateStandardDeploymentRequestExecutorCELERY     CreateStandardDeploymentRequestExecutor = "CELERY"
	CreateStandardDeploymentRequestExecutorKUBERNETES CreateStandardDeploymentRequestExecutor = "KUBERNETES"
)

// Defines values for CreateStandardDeploymentRequestSchedulerSize.
const (
	CreateStandardDeploymentRequestSchedulerSizeLARGE  CreateStandardDeploymentRequestSchedulerSize = "LARGE"
	CreateStandardDeploymentRequestSchedulerSizeMEDIUM CreateStandardDeploymentRequestSchedulerSize = "MEDIUM"
	CreateStandardDeploymentRequestSchedulerSizeSMALL  CreateStandardDeploymentRequestSchedulerSize = "SMALL"
)

// Defines values for CreateStandardDeploymentRequestType.
const (
	CreateStandardDeploymentRequestTypeDEDICATED CreateStandardDeploymentRequestType = "DEDICATED"
	CreateStandardDeploymentRequestTypeHYBRID    CreateStandardDeploymentRequestType = "HYBRID"
	CreateStandardDeploymentRequestTypeSTANDARD  CreateStandardDeploymentRequestType = "STANDARD"
)

// Defines values for DefaultRoleScopeType.
const (
	DefaultRoleScopeTypeDEPLOYMENT   DefaultRoleScopeType = "DEPLOYMENT"
	DefaultRoleScopeTypeORGANIZATION DefaultRoleScopeType = "ORGANIZATION"
	DefaultRoleScopeTypeSYSTEM       DefaultRoleScopeType = "SYSTEM"
	DefaultRoleScopeTypeWORKSPACE    DefaultRoleScopeType = "WORKSPACE"
)

// Defines values for DeployStatus.
const (
	DeployStatusDEPLOYED    DeployStatus = "DEPLOYED"
	DeployStatusFAILED      DeployStatus = "FAILED"
	DeployStatusINITIALIZED DeployStatus = "INITIALIZED"
)

// Defines values for DeployType.
const (
	DeployTypeDAG   DeployType = "DAG"
	DeployTypeIMAGE DeployType = "IMAGE"
)

// Defines values for DeployGitProvider.
const (
	DeployGitProviderGITHUB DeployGitProvider = "GITHUB"
)

// Defines values for DeployStepStatus.
const (
	DeployStepStatusCOMPLETED DeployStepStatus = "COMPLETED"
	DeployStepStatusFAILED    DeployStepStatus = "FAILED"
	DeployStepStatusPENDING   DeployStepStatus = "PENDING"
	DeployStepStatusRUNNING   DeployStepStatus = "RUNNING"
)

// Defines values for DeploymentClusterCloudProvider.
const (
	DeploymentClusterCloudProviderAWS   DeploymentClusterCloudProvider = "AWS"
	DeploymentClusterCloudProviderAZURE DeploymentClusterCloudProvider = "AZURE"
	DeploymentClusterCloudProviderGCP   DeploymentClusterCloudProvider = "GCP"
)

// Defines values for DeploymentExecutor.
const (
	DeploymentExecutorCELERY     DeploymentExecutor = "CELERY"
	DeploymentExecutorKUBERNETES DeploymentExecutor = "KUBERNETES"
)

// Defines values for DeploymentSchedulerSize.
const (
	DeploymentSchedulerSizeLARGE  DeploymentSchedulerSize = "LARGE"
	DeploymentSchedulerSizeMEDIUM DeploymentSchedulerSize = "MEDIUM"
	DeploymentSchedulerSizeSMALL  DeploymentSchedulerSize = "SMALL"
)

// Defines values for DeploymentStatus.
const (
	DeploymentStatusCREATING    DeploymentStatus = "CREATING"
	DeploymentStatusDEPLOYING   DeploymentStatus = "DEPLOYING"
	DeploymentStatusHEALTHY     DeploymentStatus = "HEALTHY"
	DeploymentStatusHIBERNATING DeploymentStatus = "HIBERNATING"
	DeploymentStatusUNHEALTHY   DeploymentStatus = "UNHEALTHY"
)

// Defines values for DeploymentType.
const (
	DeploymentTypeDEDICATED DeploymentType = "DEDICATED"
	DeploymentTypeHYBRID    DeploymentType = "HYBRID"
	DeploymentTypeSTANDARD  DeploymentType = "STANDARD"
)

// Defines values for DeploymentHibernationStatusNextEventType.
const (
	HIBERNATE DeploymentHibernationStatusNextEventType = "HIBERNATE"
	WAKE      DeploymentHibernationStatusNextEventType = "WAKE"
)

// Defines values for DeploymentIncidentSeverity.
const (
	Critical   DeploymentIncidentSeverity = "critical"
	Info       DeploymentIncidentSeverity = "info"
	Operations DeploymentIncidentSeverity = "operations"
	Warning    DeploymentIncidentSeverity = "warning"
)

// Defines values for DeploymentLogEntrySource.
const (
	DeploymentLogEntrySourceScheduler DeploymentLogEntrySource = "scheduler"
	DeploymentLogEntrySourceTriggerer DeploymentLogEntrySource = "triggerer"
	DeploymentLogEntrySourceWebserver DeploymentLogEntrySource = "webserver"
	DeploymentLogEntrySourceWorker    DeploymentLogEntrySource = "worker"
)

// Defines values for DeploymentRepositoryPathGitProvider.
const (
	DeploymentRepositoryPathGitProviderGITHUB DeploymentRepositoryPathGitProvider = "GITHUB"
)

// Defines values for EntitlementRequiredPlan.
const (
	EntitlementRequiredPlanAZUREMANAGEDPREVIEW EntitlementRequiredPlan = "AZURE_MANAGED_PREVIEW"
	EntitlementRequiredPlanBASIC               EntitlementRequiredPlan = "BASIC"
	EntitlementRequiredPlanBUSINESS            EntitlementRequiredPlan = "BUSINESS"
	EntitlementRequiredPlanBUSINESSCRITICAL    EntitlementRequiredPlan = "BUSINESS_CRITICAL"
	EntitlementRequiredPlanENTERPRISE          EntitlementRequiredPlan = "ENTERPRISE"
	EntitlementRequiredPlanINTERNAL            EntitlementRequiredPlan = "INTERNAL"
	EntitlementRequiredPlanPOV                 EntitlementRequiredPlan = "POV"
	EntitlementRequiredPlanPREMIUM             EntitlementRequiredPlan = "PREMIUM"
	EntitlementRequiredPlanSTANDARD            EntitlementRequiredPlan = "STANDARD"
	EntitlementRequiredPlanTEAM                EntitlementRequiredPlan = "TEAM"
	EntitlementRequiredPlanTRIAL               EntitlementRequiredPlan = "TRIAL"
)

// Defines values for EnvironmentObjectObjectType.
const (
	EnvironmentObjectObjectTypeAIRFLOWVARIABLE EnvironmentObjectObjectType = "AIRFLOW_VARIABLE"
	EnvironmentObjectObjectTypeCONNECTION      EnvironmentObjectObjectType = "CONNECTION"
)

// Defines values for EnvironmentObjectScope.
const (
	EnvironmentObjectScopeDEPLOYMENT EnvironmentObjectScope = "DEPLOYMENT"
	EnvironmentObjectScopeWORKSPACE  EnvironmentObjectScope = "WORKSPACE"
)

// Defines values for EnvironmentObjectLinkScope.
const (
	EnvironmentObjectLinkScopeDEPLOYMENT EnvironmentObjectLinkScope = "DEPLOYMENT"
)

// Defines values for GitHubAccountAccountType.
const (
	GitHubAccountAccountTypeORGANIZATION GitHubAccountAccountType = "ORGANIZATION"
	GitHubAccountAccountTypePERSONAL     GitHubAccountAccountType = "PERSONAL"
)

// Defines values for ManagedDomainStatus.
const (
	PENDING  ManagedDomainStatus = "PENDING"
	VERIFIED ManagedDomainStatus = "VERIFIED"
)

// Defines values for MutateWorkerQueueRequestAstroMachine.
const (
	MutateWorkerQueueRequestAstroMachineA10  MutateWorkerQueueRequestAstroMachine = "A10"
	MutateWorkerQueueRequestAstroMachineA120 MutateWorkerQueueRequestAstroMachine = "A120"
	MutateWorkerQueueRequestAstroMachineA160 MutateWorkerQueueRequestAstroMachine = "A160"
	MutateWorkerQueueRequestAstroMachineA20  MutateWorkerQueueRequestAstroMachine = "A20"
	MutateWorkerQueueRequestAstroMachineA40  MutateWorkerQueueRequestAstroMachine = "A40"
	MutateWorkerQueueRequestAstroMachineA5   MutateWorkerQueueRequestAstroMachine = "A5"
	MutateWorkerQueueRequestAstroMachineA60  MutateWorkerQueueRequestAstroMachine = "A60"
)

// Defines values for OrganizationPaymentMethod.
const (
	AWSMARKETPLACE   OrganizationPaymentMethod = "AWS_MARKETPLACE"
	AZUREMARKETPLACE OrganizationPaymentMethod = "AZURE_MARKETPLACE"
	CREDITCARD       OrganizationPaymentMethod = "CREDIT_CARD"
	GCPMARKETPLACE   OrganizationPaymentMethod = "GCP_MARKETPLACE"
	INVOICE          OrganizationPaymentMethod = "INVOICE"
)

// Defines values for OrganizationProduct.
const (
	OrganizationProductHOSTED OrganizationProduct = "HOSTED"
	OrganizationProductHYBRID OrganizationProduct = "HYBRID"
)

// Defines values for OrganizationStatus.
const (
	ACTIVE    OrganizationStatus = "ACTIVE"
	INACTIVE  OrganizationStatus = "INACTIVE"
	SUSPENDED OrganizationStatus = "SUSPENDED"
)

// Defines values for OrganizationSupportPlan.
const (
	OrganizationSupportPlanAZUREMANAGEDPREVIEW OrganizationSupportPlan = "AZURE_MANAGED_PREVIEW"
	OrganizationSupportPlanBASIC               OrganizationSupportPlan = "BASIC"
	OrganizationSupportPlanBASICPAYGO          OrganizationSupportPlan = "BASIC_PAYGO"
	OrganizationSupportPlanBUSINESS            OrganizationSupportPlan = "BUSINESS"
	OrganizationSupportPlanBUSINESSCRITICAL    OrganizationSupportPlan = "BUSINESS_CRITICAL"
	OrganizationSupportPlanENTERPRISE          OrganizationSupportPlan = "ENTERPRISE"
	OrganizationSupportPlanINTERNAL            OrganizationSupportPlan = "INTERNAL"
	OrganizationSupportPlanPOV                 OrganizationSupportPlan = "POV"
	OrganizationSupportPlanPREMIUM             OrganizationSupportPlan = "PREMIUM"
	OrganizationSupportPlanSTANDARD            OrganizationSupportPlan = "STANDARD"
	OrganizationSupportPlanTEAM                OrganizationSupportPlan = "TEAM"
	OrganizationSupportPlanTRIAL               OrganizationSupportPlan = "TRIAL"
)

// Defines values for RoleScopeType.
const (
	RoleScopeTypeDEPLOYMENT   RoleScopeType = "DEPLOYMENT"
	RoleScopeTypeORGANIZATION RoleScopeType = "ORGANIZATION"
	RoleScopeTypeWORKSPACE    RoleScopeType = "WORKSPACE"
)

// Defines values for RoleBindingEntityType.
const (
	RoleBindingEntityTypeDEPLOYMENT RoleBindingEntityType = "DEPLOYMENT"
)

// Defines values for RoleBindingSubjectType.
const (
	RoleBindingSubjectTypeSERVICEKEY RoleBindingSubjectType = "SERVICEKEY"
	RoleBindingSubjectTypeTEAM       RoleBindingSubjectType = "TEAM"
	RoleBindingSubjectTypeUSER       RoleBindingSubjectType = "USER"
)

// Defines values for RoleTemplateScopeType.
const (
	RoleTemplateScopeTypeDEPLOYMENT   RoleTemplateScopeType = "DEPLOYMENT"
	RoleTemplateScopeTypeORGANIZATION RoleTemplateScopeType = "ORGANIZATION"
	RoleTemplateScopeTypeSYSTEM       RoleTemplateScopeType = "SYSTEM"
	RoleTemplateScopeTypeWORKSPACE    RoleTemplateScopeType = "WORKSPACE"
)

// Defines values for RoleWithPermissionScopeType.
const (
	RoleWithPermissionScopeTypeDEPLOYMENT   RoleWithPermissionScopeType = "DEPLOYMENT"
	RoleWithPermissionScopeTypeORGANIZATION RoleWithPermissionScopeType = "ORGANIZATION"
	RoleWithPermissionScopeTypeWORKSPACE    RoleWithPermissionScopeType = "WORKSPACE"
)

// Defines values for SchedulerMachineName.
const (
	SchedulerMachineNameLARGE  SchedulerMachineName = "LARGE"
	SchedulerMachineNameMEDIUM SchedulerMachineName = "MEDIUM"
	SchedulerMachineNameSMALL  SchedulerMachineName = "SMALL"
)

// Defines values for SelfSignupType.
const (
	SelfSignupTypeRegular SelfSignupType = "Regular"
	SelfSignupTypeTrial   SelfSignupType = "Trial"
)

// Defines values for SharedClusterCloudProvider.
const (
	SharedClusterCloudProviderAws   SharedClusterCloudProvider = "aws"
	SharedClusterCloudProviderAzure SharedClusterCloudProvider = "azure"
	SharedClusterCloudProviderGcp   SharedClusterCloudProvider = "gcp"
)

// Defines values for SharedClusterStatus.
const (
	SharedClusterStatusCREATED      SharedClusterStatus = "CREATED"
	SharedClusterStatusCREATEFAILED SharedClusterStatus = "CREATE_FAILED"
	SharedClusterStatusCREATING     SharedClusterStatus = "CREATING"
	SharedClusterStatusDELETED      SharedClusterStatus = "DELETED"
	SharedClusterStatusDELETEFAILED SharedClusterStatus = "DELETE_FAILED"
	SharedClusterStatusDELETING     SharedClusterStatus = "DELETING"
	SharedClusterStatusFORCEDELETED SharedClusterStatus = "FORCE_DELETED"
	SharedClusterStatusUPDATEFAILED SharedClusterStatus = "UPDATE_FAILED"
	SharedClusterStatusUPDATING     SharedClusterStatus = "UPDATING"
)

// Defines values for UpdateEnvironmentObjectLinkRequestScope.
const (
	UpdateEnvironmentObjectLinkRequestScopeDEPLOYMENT UpdateEnvironmentObjectLinkRequestScope = "DEPLOYMENT"
)

// Defines values for UpdateEnvironmentObjectRequestObjectType.
const (
	UpdateEnvironmentObjectRequestObjectTypeAIRFLOWVARIABLE UpdateEnvironmentObjectRequestObjectType = "AIRFLOW_VARIABLE"
	UpdateEnvironmentObjectRequestObjectTypeCONNECTION      UpdateEnvironmentObjectRequestObjectType = "CONNECTION"
)

// Defines values for UpdateEnvironmentObjectRequestScope.
const (
	UpdateEnvironmentObjectRequestScopeDEPLOYMENT UpdateEnvironmentObjectRequestScope = "DEPLOYMENT"
	UpdateEnvironmentObjectRequestScopeWORKSPACE  UpdateEnvironmentObjectRequestScope = "WORKSPACE"
)

// Defines values for UpdateHostedDeploymentRequestExecutor.
const (
	UpdateHostedDeploymentRequestExecutorCELERY     UpdateHostedDeploymentRequestExecutor = "CELERY"
	UpdateHostedDeploymentRequestExecutorKUBERNETES UpdateHostedDeploymentRequestExecutor = "KUBERNETES"
)

// Defines values for UpdateHostedDeploymentRequestSchedulerSize.
const (
	LARGE  UpdateHostedDeploymentRequestSchedulerSize = "LARGE"
	MEDIUM UpdateHostedDeploymentRequestSchedulerSize = "MEDIUM"
	SMALL  UpdateHostedDeploymentRequestSchedulerSize = "SMALL"
)

// Defines values for UpdateHostedDeploymentRequestType.
const (
	UpdateHostedDeploymentRequestTypeDEDICATED UpdateHostedDeploymentRequestType = "DEDICATED"
	UpdateHostedDeploymentRequestTypeHYBRID    UpdateHostedDeploymentRequestType = "HYBRID"
	UpdateHostedDeploymentRequestTypeSTANDARD  UpdateHostedDeploymentRequestType = "STANDARD"
)

// Defines values for UpdateHybridDeploymentRequestExecutor.
const (
	UpdateHybridDeploymentRequestExecutorCELERY     UpdateHybridDeploymentRequestExecutor = "CELERY"
	UpdateHybridDeploymentRequestExecutorKUBERNETES UpdateHybridDeploymentRequestExecutor = "KUBERNETES"
)

// Defines values for UpdateHybridDeploymentRequestType.
const (
	UpdateHybridDeploymentRequestTypeDEDICATED UpdateHybridDeploymentRequestType = "DEDICATED"
	UpdateHybridDeploymentRequestTypeHYBRID    UpdateHybridDeploymentRequestType = "HYBRID"
	UpdateHybridDeploymentRequestTypeSTANDARD  UpdateHybridDeploymentRequestType = "STANDARD"
)

// Defines values for UpdateInviteRequestInviteStatus.
const (
	Accept UpdateInviteRequestInviteStatus = "accept"
	Reject UpdateInviteRequestInviteStatus = "reject"
)

// Defines values for UserSignupType.
const (
	UserSignupTypeRegular UserSignupType = "Regular"
	UserSignupTypeTrial   UserSignupType = "Trial"
)

// Defines values for WorkerMachineName.
const (
	WorkerMachineNameA10  WorkerMachineName = "A10"
	WorkerMachineNameA120 WorkerMachineName = "A120"
	WorkerMachineNameA160 WorkerMachineName = "A160"
	WorkerMachineNameA20  WorkerMachineName = "A20"
	WorkerMachineNameA40  WorkerMachineName = "A40"
	WorkerMachineNameA5   WorkerMachineName = "A5"
	WorkerMachineNameA60  WorkerMachineName = "A60"
)

// Defines values for GetSharedClusterParamsCloudProvider.
const (
	GetSharedClusterParamsCloudProviderAws   GetSharedClusterParamsCloudProvider = "aws"
	GetSharedClusterParamsCloudProviderAzure GetSharedClusterParamsCloudProvider = "azure"
	GetSharedClusterParamsCloudProviderGcp   GetSharedClusterParamsCloudProvider = "gcp"
)

// Defines values for GetClusterOptionsParamsProvider.
const (
	GetClusterOptionsParamsProviderAws   GetClusterOptionsParamsProvider = "aws"
	GetClusterOptionsParamsProviderAzure GetClusterOptionsParamsProvider = "azure"
	GetClusterOptionsParamsProviderGcp   GetClusterOptionsParamsProvider = "gcp"
)

// Defines values for GetClusterOptionsParamsType.
const (
	GetClusterOptionsParamsTypeBRINGYOUROWNCLOUD GetClusterOptionsParamsType = "BRING_YOUR_OWN_CLOUD"
	GetClusterOptionsParamsTypeHOSTED            GetClusterOptionsParamsType = "HOSTED"
	GetClusterOptionsParamsTypeSHARED            GetClusterOptionsParamsType = "SHARED"
)

// Defines values for ListOrganizationsParamsTrialStatus.
const (
	Active  ListOrganizationsParamsTrialStatus = "active"
	All     ListOrganizationsParamsTrialStatus = "all"
	Expired ListOrganizationsParamsTrialStatus = "expired"
	None    ListOrganizationsParamsTrialStatus = "none"
)

// Defines values for ListOrganizationsParamsSupportPlan.
const (
	ListOrganizationsParamsSupportPlanBASIC            ListOrganizationsParamsSupportPlan = "BASIC"
	ListOrganizationsParamsSupportPlanBUSINESSCRITICAL ListOrganizationsParamsSupportPlan = "BUSINESS_CRITICAL"
	ListOrganizationsParamsSupportPlanINTERNAL         ListOrganizationsParamsSupportPlan = "INTERNAL"
	ListOrganizationsParamsSupportPlanPOV              ListOrganizationsParamsSupportPlan = "POV"
	ListOrganizationsParamsSupportPlanPREMIUM          ListOrganizationsParamsSupportPlan = "PREMIUM"
	ListOrganizationsParamsSupportPlanSTANDARD         ListOrganizationsParamsSupportPlan = "STANDARD"
	ListOrganizationsParamsSupportPlanTRIAL            ListOrganizationsParamsSupportPlan = "TRIAL"
)

// Defines values for ListOrganizationsParamsProduct.
const (
	ListOrganizationsParamsProductHOSTED ListOrganizationsParamsProduct = "HOSTED"
	ListOrganizationsParamsProductHYBRID ListOrganizationsParamsProduct = "HYBRID"
)

// Defines values for ListOrganizationsParamsSorts.
const (
	ListOrganizationsParamsSortsAuthServiceIdAsc  ListOrganizationsParamsSorts = "authServiceId:asc"
	ListOrganizationsParamsSortsAuthServiceIdDesc ListOrganizationsParamsSorts = "authServiceId:desc"
	ListOrganizationsParamsSortsCreatedAtAsc      ListOrganizationsParamsSorts = "createdAt:asc"
	ListOrganizationsParamsSortsCreatedAtDesc     ListOrganizationsParamsSorts = "createdAt:desc"
	ListOrganizationsParamsSortsIdAsc             ListOrganizationsParamsSorts = "id:asc"
	ListOrganizationsParamsSortsIdDesc            ListOrganizationsParamsSorts = "id:desc"
	ListOrganizationsParamsSortsNameAsc           ListOrganizationsParamsSorts = "name:asc"
	ListOrganizationsParamsSortsNameDesc          ListOrganizationsParamsSorts = "name:desc"
	ListOrganizationsParamsSortsProductAsc        ListOrganizationsParamsSorts = "product:asc"
	ListOrganizationsParamsSortsProductDesc       ListOrganizationsParamsSorts = "product:desc"
	ListOrganizationsParamsSortsShortNameAsc      ListOrganizationsParamsSorts = "shortName:asc"
	ListOrganizationsParamsSortsShortNameDesc     ListOrganizationsParamsSorts = "shortName:desc"
	ListOrganizationsParamsSortsSupportPlanAsc    ListOrganizationsParamsSorts = "supportPlan:asc"
	ListOrganizationsParamsSortsSupportPlanDesc   ListOrganizationsParamsSorts = "supportPlan:desc"
	ListOrganizationsParamsSortsUpdatedAtAsc      ListOrganizationsParamsSorts = "updatedAt:asc"
	ListOrganizationsParamsSortsUpdatedAtDesc     ListOrganizationsParamsSorts = "updatedAt:desc"
)

// Defines values for ListOrganizationApiTokensParamsSorts.
const (
	ListOrganizationApiTokensParamsSortsCreatedAtAsc     ListOrganizationApiTokensParamsSorts = "createdAt:asc"
	ListOrganizationApiTokensParamsSortsCreatedAtDesc    ListOrganizationApiTokensParamsSorts = "createdAt:desc"
	ListOrganizationApiTokensParamsSortsCreatedByIdAsc   ListOrganizationApiTokensParamsSorts = "createdById:asc"
	ListOrganizationApiTokensParamsSortsCreatedByIdDesc  ListOrganizationApiTokensParamsSorts = "createdById:desc"
	ListOrganizationApiTokensParamsSortsDescriptionAsc   ListOrganizationApiTokensParamsSorts = "description:asc"
	ListOrganizationApiTokensParamsSortsDescriptionDesc  ListOrganizationApiTokensParamsSorts = "description:desc"
	ListOrganizationApiTokensParamsSortsIdAsc            ListOrganizationApiTokensParamsSorts = "id:asc"
	ListOrganizationApiTokensParamsSortsIdDesc           ListOrganizationApiTokensParamsSorts = "id:desc"
	ListOrganizationApiTokensParamsSortsNameAsc          ListOrganizationApiTokensParamsSorts = "name:asc"
	ListOrganizationApiTokensParamsSortsNameDesc         ListOrganizationApiTokensParamsSorts = "name:desc"
	ListOrganizationApiTokensParamsSortsShortTokenAsc    ListOrganizationApiTokensParamsSorts = "shortToken:asc"
	ListOrganizationApiTokensParamsSortsShortTokenDesc   ListOrganizationApiTokensParamsSorts = "shortToken:desc"
	ListOrganizationApiTokensParamsSortsTokenStartAtAsc  ListOrganizationApiTokensParamsSorts = "tokenStartAt:asc"
	ListOrganizationApiTokensParamsSortsTokenStartAtDesc ListOrganizationApiTokensParamsSorts = "tokenStartAt:desc"
	ListOrganizationApiTokensParamsSortsUpdatedAtAsc     ListOrganizationApiTokensParamsSorts = "updatedAt:asc"
	ListOrganizationApiTokensParamsSortsUpdatedAtDesc    ListOrganizationApiTokensParamsSorts = "updatedAt:desc"
	ListOrganizationApiTokensParamsSortsUpdatedByIdAsc   ListOrganizationApiTokensParamsSorts = "updatedById:asc"
	ListOrganizationApiTokensParamsSortsUpdatedByIdDesc  ListOrganizationApiTokensParamsSorts = "updatedById:desc"
)

// Defines values for ListClustersParamsProvider.
const (
	ListClustersParamsProviderAws   ListClustersParamsProvider = "aws"
	ListClustersParamsProviderAzure ListClustersParamsProvider = "azure"
	ListClustersParamsProviderGcp   ListClustersParamsProvider = "gcp"
)

// Defines values for ListClustersParamsTypes.
const (
	BRINGYOUROWNCLOUD ListClustersParamsTypes = "BRING_YOUR_OWN_CLOUD"
	HOSTED            ListClustersParamsTypes = "HOSTED"
	SHARED            ListClustersParamsTypes = "SHARED"
)

// Defines values for ListClustersParamsStatuses.
const (
	CREATED      ListClustersParamsStatuses = "CREATED"
	CREATEFAILED ListClustersParamsStatuses = "CREATE_FAILED"
	CREATING     ListClustersParamsStatuses = "CREATING"
	DELETED      ListClustersParamsStatuses = "DELETED"
	DELETEFAILED ListClustersParamsStatuses = "DELETE_FAILED"
	DELETING     ListClustersParamsStatuses = "DELETING"
	FORCEDELETED ListClustersParamsStatuses = "FORCE_DELETED"
	UPDATEFAILED ListClustersParamsStatuses = "UPDATE_FAILED"
	UPDATING     ListClustersParamsStatuses = "UPDATING"
)

// Defines values for ListClustersParamsSorts.
const (
	ListClustersParamsSortsCloudProviderAsc        ListClustersParamsSorts = "cloudProvider:asc"
	ListClustersParamsSortsCloudProviderDesc       ListClustersParamsSorts = "cloudProvider:desc"
	ListClustersParamsSortsCreatedAtAsc            ListClustersParamsSorts = "createdAt:asc"
	ListClustersParamsSortsCreatedAtDesc           ListClustersParamsSorts = "createdAt:desc"
	ListClustersParamsSortsDbInstanceTypeAsc       ListClustersParamsSorts = "dbInstanceType:asc"
	ListClustersParamsSortsDbInstanceTypeDesc      ListClustersParamsSorts = "dbInstanceType:desc"
	ListClustersParamsSortsIdAsc                   ListClustersParamsSorts = "id:asc"
	ListClustersParamsSortsIdDesc                  ListClustersParamsSorts = "id:desc"
	ListClustersParamsSortsNameAsc                 ListClustersParamsSorts = "name:asc"
	ListClustersParamsSortsNameDesc                ListClustersParamsSorts = "name:desc"
	ListClustersParamsSortsOrganizationIdAsc       ListClustersParamsSorts = "organizationId:asc"
	ListClustersParamsSortsOrganizationIdDesc      ListClustersParamsSorts = "organizationId:desc"
	ListClustersParamsSortsPodSubnetRangeAsc       ListClustersParamsSorts = "podSubnetRange:asc"
	ListClustersParamsSortsPodSubnetRangeDesc      ListClustersParamsSorts = "podSubnetRange:desc"
	ListClustersParamsSortsProviderAccountAsc      ListClustersParamsSorts = "providerAccount:asc"
	ListClustersParamsSortsProviderAccountDesc     ListClustersParamsSorts = "providerAccount:desc"
	ListClustersParamsSortsRegionAsc               ListClustersParamsSorts = "region:asc"
	ListClustersParamsSortsRegionDesc              ListClustersParamsSorts = "region:desc"
	ListClustersParamsSortsServicePeeringRangeAsc  ListClustersParamsSorts = "servicePeeringRange:asc"
	ListClustersParamsSortsServicePeeringRangeDesc ListClustersParamsSorts = "servicePeeringRange:desc"
	ListClustersParamsSortsServiceSubnetRangeAsc   ListClustersParamsSorts = "serviceSubnetRange:asc"
	ListClustersParamsSortsServiceSubnetRangeDesc  ListClustersParamsSorts = "serviceSubnetRange:desc"
	ListClustersParamsSortsTemplateVersionAsc      ListClustersParamsSorts = "templateVersion:asc"
	ListClustersParamsSortsTemplateVersionDesc     ListClustersParamsSorts = "templateVersion:desc"
	ListClustersParamsSortsUpdatedAtAsc            ListClustersParamsSorts = "updatedAt:asc"
	ListClustersParamsSortsUpdatedAtDesc           ListClustersParamsSorts = "updatedAt:desc"
	ListClustersParamsSortsVpcSubnetRangeAsc       ListClustersParamsSorts = "vpcSubnetRange:asc"
	ListClustersParamsSortsVpcSubnetRangeDesc      ListClustersParamsSorts = "vpcSubnetRange:desc"
)

// Defines values for ListClusterRoutesParamsSorts.
const (
	ListClusterRoutesParamsSortsCreatedAtAsc    ListClusterRoutesParamsSorts = "createdAt:asc"
	ListClusterRoutesParamsSortsCreatedAtDesc   ListClusterRoutesParamsSorts = "createdAt:desc"
	ListClusterRoutesParamsSortsDescriptionAsc  ListClusterRoutesParamsSorts = "description:asc"
	ListClusterRoutesParamsSortsDescriptionDesc ListClusterRoutesParamsSorts = "description:desc"
	ListClusterRoutesParamsSortsIdAsc           ListClusterRoutesParamsSorts = "id:asc"
	ListClusterRoutesParamsSortsIdDesc          ListClusterRoutesParamsSorts = "id:desc"
	ListClusterRoutesParamsSortsNameAsc         ListClusterRoutesParamsSorts = "name:asc"
	ListClusterRoutesParamsSortsNameDesc        ListClusterRoutesParamsSorts = "name:desc"
)

// Defines values for GetDeploymentOptionsParamsDeploymentType.
const (
	GetDeploymentOptionsParamsDeploymentTypeDEDICATED GetDeploymentOptionsParamsDeploymentType = "DEDICATED"
	GetDeploymentOptionsParamsDeploymentTypeHYBRID    GetDeploymentOptionsParamsDeploymentType = "HYBRID"
	GetDeploymentOptionsParamsDeploymentTypeSTANDARD  GetDeploymentOptionsParamsDeploymentType = "STANDARD"
)

// Defines values for GetDeploymentOptionsParamsExecutor.
const (
	CELERY     GetDeploymentOptionsParamsExecutor = "CELERY"
	KUBERNETES GetDeploymentOptionsParamsExecutor = "KUBERNETES"
)

// Defines values for GetDeploymentOptionsParamsCloudProvider.
const (
	AWS   GetDeploymentOptionsParamsCloudProvider = "AWS"
	AZURE GetDeploymentOptionsParamsCloudProvider = "AZURE"
	GCP   GetDeploymentOptionsParamsCloudProvider = "GCP"
)

// Defines values for ListDeploymentsParamsSorts.
const (
	ListDeploymentsParamsSortsClusterIdAsc       ListDeploymentsParamsSorts = "clusterId:asc"
	ListDeploymentsParamsSortsClusterIdDesc      ListDeploymentsParamsSorts = "clusterId:desc"
	ListDeploymentsParamsSortsCreatedAtAsc       ListDeploymentsParamsSorts = "createdAt:asc"
	ListDeploymentsParamsSortsCreatedAtDesc      ListDeploymentsParamsSorts = "createdAt:desc"
	ListDeploymentsParamsSortsDescriptionAsc     ListDeploymentsParamsSorts = "description:asc"
	ListDeploymentsParamsSortsDescriptionDesc    ListDeploymentsParamsSorts = "description:desc"
	ListDeploymentsParamsSortsIdAsc              ListDeploymentsParamsSorts = "id:asc"
	ListDeploymentsParamsSortsIdDesc             ListDeploymentsParamsSorts = "id:desc"
	ListDeploymentsParamsSortsNameAsc            ListDeploymentsParamsSorts = "name:asc"
	ListDeploymentsParamsSortsNameDesc           ListDeploymentsParamsSorts = "name:desc"
	ListDeploymentsParamsSortsReleaseNameAsc     ListDeploymentsParamsSorts = "releaseName:asc"
	ListDeploymentsParamsSortsReleaseNameDesc    ListDeploymentsParamsSorts = "releaseName:desc"
	ListDeploymentsParamsSortsRuntimeVersionAsc  ListDeploymentsParamsSorts = "runtimeVersion:asc"
	ListDeploymentsParamsSortsRuntimeVersionDesc ListDeploymentsParamsSorts = "runtimeVersion:desc"
	ListDeploymentsParamsSortsUpdatedAtAsc       ListDeploymentsParamsSorts = "updatedAt:asc"
	ListDeploymentsParamsSortsUpdatedAtDesc      ListDeploymentsParamsSorts = "updatedAt:desc"
	ListDeploymentsParamsSortsWorkspaceIdAsc     ListDeploymentsParamsSorts = "workspaceId:asc"
	ListDeploymentsParamsSortsWorkspaceIdDesc    ListDeploymentsParamsSorts = "workspaceId:desc"
)

// Defines values for ListDeploymentApiTokensParamsTokenTypes.
const (
	ListDeploymentApiTokensParamsTokenTypesDEPLOYMENT   ListDeploymentApiTokensParamsTokenTypes = "DEPLOYMENT"
	ListDeploymentApiTokensParamsTokenTypesORGANIZATION ListDeploymentApiTokensParamsTokenTypes = "ORGANIZATION"
	ListDeploymentApiTokensParamsTokenTypesWORKSPACE    ListDeploymentApiTokensParamsTokenTypes = "WORKSPACE"
)

// Defines values for ListDeploymentApiTokensParamsSorts.
const (
	ListDeploymentApiTokensParamsSortsCreatedAtAsc     ListDeploymentApiTokensParamsSorts = "createdAt:asc"
	ListDeploymentApiTokensParamsSortsCreatedAtDesc    ListDeploymentApiTokensParamsSorts = "createdAt:desc"
	ListDeploymentApiTokensParamsSortsCreatedByIdAsc   ListDeploymentApiTokensParamsSorts = "createdById:asc"
	ListDeploymentApiTokensParamsSortsCreatedByIdDesc  ListDeploymentApiTokensParamsSorts = "createdById:desc"
	ListDeploymentApiTokensParamsSortsDescriptionAsc   ListDeploymentApiTokensParamsSorts = "description:asc"
	ListDeploymentApiTokensParamsSortsDescriptionDesc  ListDeploymentApiTokensParamsSorts = "description:desc"
	ListDeploymentApiTokensParamsSortsIdAsc            ListDeploymentApiTokensParamsSorts = "id:asc"
	ListDeploymentApiTokensParamsSortsIdDesc           ListDeploymentApiTokensParamsSorts = "id:desc"
	ListDeploymentApiTokensParamsSortsNameAsc          ListDeploymentApiTokensParamsSorts = "name:asc"
	ListDeploymentApiTokensParamsSortsNameDesc         ListDeploymentApiTokensParamsSorts = "name:desc"
	ListDeploymentApiTokensParamsSortsShortTokenAsc    ListDeploymentApiTokensParamsSorts = "shortToken:asc"
	ListDeploymentApiTokensParamsSortsShortTokenDesc   ListDeploymentApiTokensParamsSorts = "shortToken:desc"
	ListDeploymentApiTokensParamsSortsTokenStartAtAsc  ListDeploymentApiTokensParamsSorts = "tokenStartAt:asc"
	ListDeploymentApiTokensParamsSortsTokenStartAtDesc ListDeploymentApiTokensParamsSorts = "tokenStartAt:desc"
	ListDeploymentApiTokensParamsSortsUpdatedAtAsc     ListDeploymentApiTokensParamsSorts = "updatedAt:asc"
	ListDeploymentApiTokensParamsSortsUpdatedAtDesc    ListDeploymentApiTokensParamsSorts = "updatedAt:desc"
	ListDeploymentApiTokensParamsSortsUpdatedByIdAsc   ListDeploymentApiTokensParamsSorts = "updatedById:asc"
	ListDeploymentApiTokensParamsSortsUpdatedByIdDesc  ListDeploymentApiTokensParamsSorts = "updatedById:desc"
)

// Defines values for ListDeployStepsParamsSorts.
const (
	ListDeployStepsParamsSortsCreatedAtAsc  ListDeployStepsParamsSorts = "createdAt:asc"
	ListDeployStepsParamsSortsCreatedAtDesc ListDeployStepsParamsSorts = "createdAt:desc"
	ListDeployStepsParamsSortsEndedAtAsc    ListDeployStepsParamsSorts = "endedAt:asc"
	ListDeployStepsParamsSortsEndedAtDesc   ListDeployStepsParamsSorts = "endedAt:desc"
	ListDeployStepsParamsSortsStartedAtAsc  ListDeployStepsParamsSorts = "startedAt:asc"
	ListDeployStepsParamsSortsStartedAtDesc ListDeployStepsParamsSorts = "startedAt:desc"
	ListDeployStepsParamsSortsStatusAsc     ListDeployStepsParamsSorts = "status:asc"
	ListDeployStepsParamsSortsStatusDesc    ListDeployStepsParamsSorts = "status:desc"
	ListDeployStepsParamsSortsTypeAsc       ListDeployStepsParamsSorts = "type:asc"
	ListDeployStepsParamsSortsTypeDesc      ListDeployStepsParamsSorts = "type:desc"
	ListDeployStepsParamsSortsUpdatedAtAsc  ListDeployStepsParamsSorts = "updatedAt:asc"
	ListDeployStepsParamsSortsUpdatedAtDesc ListDeployStepsParamsSorts = "updatedAt:desc"
)

// Defines values for GetDeploymentLogsParamsSources.
const (
	GetDeploymentLogsParamsSourcesScheduler GetDeploymentLogsParamsSources = "scheduler"
	GetDeploymentLogsParamsSourcesTriggerer GetDeploymentLogsParamsSources = "triggerer"
	GetDeploymentLogsParamsSourcesWebserver GetDeploymentLogsParamsSources = "webserver"
	GetDeploymentLogsParamsSourcesWorker    GetDeploymentLogsParamsSources = "worker"
)

// Defines values for ListDeploymentTeamsParamsSorts.
const (
	ListDeploymentTeamsParamsSortsCreatedAtAsc        ListDeploymentTeamsParamsSorts = "createdAt:asc"
	ListDeploymentTeamsParamsSortsCreatedAtDesc       ListDeploymentTeamsParamsSorts = "createdAt:desc"
	ListDeploymentTeamsParamsSortsDeploymentRolesAsc  ListDeploymentTeamsParamsSorts = "deploymentRoles:asc"
	ListDeploymentTeamsParamsSortsDeploymentRolesDesc ListDeploymentTeamsParamsSorts = "deploymentRoles:desc"
	ListDeploymentTeamsParamsSortsDescriptionAsc      ListDeploymentTeamsParamsSorts = "description:asc"
	ListDeploymentTeamsParamsSortsDescriptionDesc     ListDeploymentTeamsParamsSorts = "description:desc"
	ListDeploymentTeamsParamsSortsNameAsc             ListDeploymentTeamsParamsSorts = "name:asc"
	ListDeploymentTeamsParamsSortsNameDesc            ListDeploymentTeamsParamsSorts = "name:desc"
	ListDeploymentTeamsParamsSortsUpdatedAtAsc        ListDeploymentTeamsParamsSorts = "updatedAt:asc"
	ListDeploymentTeamsParamsSortsUpdatedAtDesc       ListDeploymentTeamsParamsSorts = "updatedAt:desc"
)

// Defines values for ListDeploymentUsersParamsSorts.
const (
	ListDeploymentUsersParamsSortsCreatedAtAsc       ListDeploymentUsersParamsSorts = "createdAt:asc"
	ListDeploymentUsersParamsSortsCreatedAtDesc      ListDeploymentUsersParamsSorts = "createdAt:desc"
	ListDeploymentUsersParamsSortsDeploymentRoleAsc  ListDeploymentUsersParamsSorts = "deploymentRole:asc"
	ListDeploymentUsersParamsSortsDeploymentRoleDesc ListDeploymentUsersParamsSorts = "deploymentRole:desc"
	ListDeploymentUsersParamsSortsFullNameAsc        ListDeploymentUsersParamsSorts = "fullName:asc"
	ListDeploymentUsersParamsSortsFullNameDesc       ListDeploymentUsersParamsSorts = "fullName:desc"
	ListDeploymentUsersParamsSortsStatusAsc          ListDeploymentUsersParamsSorts = "status:asc"
	ListDeploymentUsersParamsSortsStatusDesc         ListDeploymentUsersParamsSorts = "status:desc"
	ListDeploymentUsersParamsSortsUpdatedAtAsc       ListDeploymentUsersParamsSorts = "updatedAt:asc"
	ListDeploymentUsersParamsSortsUpdatedAtDesc      ListDeploymentUsersParamsSorts = "updatedAt:desc"
	ListDeploymentUsersParamsSortsUsernameAsc        ListDeploymentUsersParamsSorts = "username:asc"
	ListDeploymentUsersParamsSortsUsernameDesc       ListDeploymentUsersParamsSorts = "username:desc"
)

// Defines values for ListEnvironmentObjectsParamsSorts.
const (
	ListEnvironmentObjectsParamsSortsCreatedAtAsc   ListEnvironmentObjectsParamsSorts = "createdAt:asc"
	ListEnvironmentObjectsParamsSortsCreatedAtDesc  ListEnvironmentObjectsParamsSorts = "createdAt:desc"
	ListEnvironmentObjectsParamsSortsObjectKeyAsc   ListEnvironmentObjectsParamsSorts = "objectKey:asc"
	ListEnvironmentObjectsParamsSortsObjectKeyDesc  ListEnvironmentObjectsParamsSorts = "objectKey:desc"
	ListEnvironmentObjectsParamsSortsObjectTypeAsc  ListEnvironmentObjectsParamsSorts = "objectType:asc"
	ListEnvironmentObjectsParamsSortsObjectTypeDesc ListEnvironmentObjectsParamsSorts = "objectType:desc"
	ListEnvironmentObjectsParamsSortsUpdatedAtAsc   ListEnvironmentObjectsParamsSorts = "updatedAt:asc"
	ListEnvironmentObjectsParamsSortsUpdatedAtDesc  ListEnvironmentObjectsParamsSorts = "updatedAt:desc"
)

// Defines values for ListEnvironmentObjectsParamsObjectType.
const (
	ListEnvironmentObjectsParamsObjectTypeAIRFLOWVARIABLE ListEnvironmentObjectsParamsObjectType = "AIRFLOW_VARIABLE"
	ListEnvironmentObjectsParamsObjectTypeCONNECTION      ListEnvironmentObjectsParamsObjectType = "CONNECTION"
)

// Defines values for ListRoleTemplatesParamsScopeTypes.
const (
	ListRoleTemplatesParamsScopeTypesDEPLOYMENT   ListRoleTemplatesParamsScopeTypes = "DEPLOYMENT"
	ListRoleTemplatesParamsScopeTypesORGANIZATION ListRoleTemplatesParamsScopeTypes = "ORGANIZATION"
	ListRoleTemplatesParamsScopeTypesWORKSPACE    ListRoleTemplatesParamsScopeTypes = "WORKSPACE"
)

// Defines values for ListRolesParamsScopeTypes.
const (
	ListRolesParamsScopeTypesDEPLOYMENT   ListRolesParamsScopeTypes = "DEPLOYMENT"
	ListRolesParamsScopeTypesORGANIZATION ListRolesParamsScopeTypes = "ORGANIZATION"
	ListRolesParamsScopeTypesWORKSPACE    ListRolesParamsScopeTypes = "WORKSPACE"
)

// Defines values for ListRolesParamsSorts.
const (
	ListRolesParamsSortsCreatedAtAsc    ListRolesParamsSorts = "createdAt:asc"
	ListRolesParamsSortsCreatedAtDesc   ListRolesParamsSorts = "createdAt:desc"
	ListRolesParamsSortsDescriptionAsc  ListRolesParamsSorts = "description:asc"
	ListRolesParamsSortsDescriptionDesc ListRolesParamsSorts = "description:desc"
	ListRolesParamsSortsNameAsc         ListRolesParamsSorts = "name:asc"
	ListRolesParamsSortsNameDesc        ListRolesParamsSorts = "name:desc"
	ListRolesParamsSortsScopeTypeAsc    ListRolesParamsSorts = "scopeType:asc"
	ListRolesParamsSortsScopeTypeDesc   ListRolesParamsSorts = "scopeType:desc"
	ListRolesParamsSortsUpdatedAtAsc    ListRolesParamsSorts = "updatedAt:asc"
	ListRolesParamsSortsUpdatedAtDesc   ListRolesParamsSorts = "updatedAt:desc"
)

// Defines values for ListRoleBindingsParamsSubjectTypes.
const (
	SERVICEKEY ListRoleBindingsParamsSubjectTypes = "SERVICEKEY"
	TEAM       ListRoleBindingsParamsSubjectTypes = "TEAM"
	USER       ListRoleBindingsParamsSubjectTypes = "USER"
)

// Defines values for ListRoleBindingsParamsSorts.
const (
	ListRoleBindingsParamsSortsCreatedAtAsc    ListRoleBindingsParamsSorts = "createdAt:asc"
	ListRoleBindingsParamsSortsCreatedAtDesc   ListRoleBindingsParamsSorts = "createdAt:desc"
	ListRoleBindingsParamsSortsSubjectTypeAsc  ListRoleBindingsParamsSorts = "subjectType:asc"
	ListRoleBindingsParamsSortsSubjectTypeDesc ListRoleBindingsParamsSorts = "subjectType:desc"
	ListRoleBindingsParamsSortsUpdatedAtAsc    ListRoleBindingsParamsSorts = "updatedAt:asc"
	ListRoleBindingsParamsSortsUpdatedAtDesc   ListRoleBindingsParamsSorts = "updatedAt:desc"
)

// Defines values for ListOrganizationTeamsParamsSorts.
const (
	ListOrganizationTeamsParamsSortsCreatedAtAsc       ListOrganizationTeamsParamsSorts = "createdAt:asc"
	ListOrganizationTeamsParamsSortsCreatedAtDesc      ListOrganizationTeamsParamsSorts = "createdAt:desc"
	ListOrganizationTeamsParamsSortsDescriptionAsc     ListOrganizationTeamsParamsSorts = "description:asc"
	ListOrganizationTeamsParamsSortsDescriptionDesc    ListOrganizationTeamsParamsSorts = "description:desc"
	ListOrganizationTeamsParamsSortsMembersCountAsc    ListOrganizationTeamsParamsSorts = "membersCount:asc"
	ListOrganizationTeamsParamsSortsMembersCountDesc   ListOrganizationTeamsParamsSorts = "membersCount:desc"
	ListOrganizationTeamsParamsSortsNameAsc            ListOrganizationTeamsParamsSorts = "name:asc"
	ListOrganizationTeamsParamsSortsNameDesc           ListOrganizationTeamsParamsSorts = "name:desc"
	ListOrganizationTeamsParamsSortsUpdatedAtAsc       ListOrganizationTeamsParamsSorts = "updatedAt:asc"
	ListOrganizationTeamsParamsSortsUpdatedAtDesc      ListOrganizationTeamsParamsSorts = "updatedAt:desc"
	ListOrganizationTeamsParamsSortsWorkspaceCountAsc  ListOrganizationTeamsParamsSorts = "workspaceCount:asc"
	ListOrganizationTeamsParamsSortsWorkspaceCountDesc ListOrganizationTeamsParamsSorts = "workspaceCount:desc"
)

// Defines values for ListOrgUsersParamsSorts.
const (
	ListOrgUsersParamsSortsCreatedAtAsc  ListOrgUsersParamsSorts = "createdAt:asc"
	ListOrgUsersParamsSortsCreatedAtDesc ListOrgUsersParamsSorts = "createdAt:desc"
	ListOrgUsersParamsSortsFullNameAsc   ListOrgUsersParamsSorts = "fullName:asc"
	ListOrgUsersParamsSortsFullNameDesc  ListOrgUsersParamsSorts = "fullName:desc"
	ListOrgUsersParamsSortsIdAsc         ListOrgUsersParamsSorts = "id:asc"
	ListOrgUsersParamsSortsIdDesc        ListOrgUsersParamsSorts = "id:desc"
	ListOrgUsersParamsSortsOrgRoleAsc    ListOrgUsersParamsSorts = "orgRole:asc"
	ListOrgUsersParamsSortsOrgRoleDesc   ListOrgUsersParamsSorts = "orgRole:desc"
	ListOrgUsersParamsSortsStatusAsc     ListOrgUsersParamsSorts = "status:asc"
	ListOrgUsersParamsSortsStatusDesc    ListOrgUsersParamsSorts = "status:desc"
	ListOrgUsersParamsSortsUpdatedAtAsc  ListOrgUsersParamsSorts = "updatedAt:asc"
	ListOrgUsersParamsSortsUpdatedAtDesc ListOrgUsersParamsSorts = "updatedAt:desc"
	ListOrgUsersParamsSortsUsernameAsc   ListOrgUsersParamsSorts = "username:asc"
	ListOrgUsersParamsSortsUsernameDesc  ListOrgUsersParamsSorts = "username:desc"
)

// Defines values for ListWorkspacesParamsSorts.
const (
	ListWorkspacesParamsSortsCreatedAtAsc       ListWorkspacesParamsSorts = "createdAt:asc"
	ListWorkspacesParamsSortsCreatedAtDesc      ListWorkspacesParamsSorts = "createdAt:desc"
	ListWorkspacesParamsSortsDescriptionAsc     ListWorkspacesParamsSorts = "description:asc"
	ListWorkspacesParamsSortsDescriptionDesc    ListWorkspacesParamsSorts = "description:desc"
	ListWorkspacesParamsSortsIdAsc              ListWorkspacesParamsSorts = "id:asc"
	ListWorkspacesParamsSortsIdDesc             ListWorkspacesParamsSorts = "id:desc"
	ListWorkspacesParamsSortsNameAsc            ListWorkspacesParamsSorts = "name:asc"
	ListWorkspacesParamsSortsNameDesc           ListWorkspacesParamsSorts = "name:desc"
	ListWorkspacesParamsSortsOrganizationIdAsc  ListWorkspacesParamsSorts = "organizationId:asc"
	ListWorkspacesParamsSortsOrganizationIdDesc ListWorkspacesParamsSorts = "organizationId:desc"
	ListWorkspacesParamsSortsUpdatedAtAsc       ListWorkspacesParamsSorts = "updatedAt:asc"
	ListWorkspacesParamsSortsUpdatedAtDesc      ListWorkspacesParamsSorts = "updatedAt:desc"
)

// Defines values for ListWorkspaceApiTokensParamsTokenTypes.
const (
	ORGANIZATION ListWorkspaceApiTokensParamsTokenTypes = "ORGANIZATION"
	WORKSPACE    ListWorkspaceApiTokensParamsTokenTypes = "WORKSPACE"
)

// Defines values for ListWorkspaceApiTokensParamsSorts.
const (
	ListWorkspaceApiTokensParamsSortsCreatedAtAsc     ListWorkspaceApiTokensParamsSorts = "createdAt:asc"
	ListWorkspaceApiTokensParamsSortsCreatedAtDesc    ListWorkspaceApiTokensParamsSorts = "createdAt:desc"
	ListWorkspaceApiTokensParamsSortsCreatedByIdAsc   ListWorkspaceApiTokensParamsSorts = "createdById:asc"
	ListWorkspaceApiTokensParamsSortsCreatedByIdDesc  ListWorkspaceApiTokensParamsSorts = "createdById:desc"
	ListWorkspaceApiTokensParamsSortsDescriptionAsc   ListWorkspaceApiTokensParamsSorts = "description:asc"
	ListWorkspaceApiTokensParamsSortsDescriptionDesc  ListWorkspaceApiTokensParamsSorts = "description:desc"
	ListWorkspaceApiTokensParamsSortsIdAsc            ListWorkspaceApiTokensParamsSorts = "id:asc"
	ListWorkspaceApiTokensParamsSortsIdDesc           ListWorkspaceApiTokensParamsSorts = "id:desc"
	ListWorkspaceApiTokensParamsSortsNameAsc          ListWorkspaceApiTokensParamsSorts = "name:asc"
	ListWorkspaceApiTokensParamsSortsNameDesc         ListWorkspaceApiTokensParamsSorts = "name:desc"
	ListWorkspaceApiTokensParamsSortsShortTokenAsc    ListWorkspaceApiTokensParamsSorts = "shortToken:asc"
	ListWorkspaceApiTokensParamsSortsShortTokenDesc   ListWorkspaceApiTokensParamsSorts = "shortToken:desc"
	ListWorkspaceApiTokensParamsSortsTokenStartAtAsc  ListWorkspaceApiTokensParamsSorts = "tokenStartAt:asc"
	ListWorkspaceApiTokensParamsSortsTokenStartAtDesc ListWorkspaceApiTokensParamsSorts = "tokenStartAt:desc"
	ListWorkspaceApiTokensParamsSortsUpdatedAtAsc     ListWorkspaceApiTokensParamsSorts = "updatedAt:asc"
	ListWorkspaceApiTokensParamsSortsUpdatedAtDesc    ListWorkspaceApiTokensParamsSorts = "updatedAt:desc"
	ListWorkspaceApiTokensParamsSortsUpdatedByIdAsc   ListWorkspaceApiTokensParamsSorts = "updatedById:asc"
	ListWorkspaceApiTokensParamsSortsUpdatedByIdDesc  ListWorkspaceApiTokensParamsSorts = "updatedById:desc"
)

// Defines values for ListWorkspaceTeamsParamsSorts.
const (
	ListWorkspaceTeamsParamsSortsCreatedAtAsc       ListWorkspaceTeamsParamsSorts = "createdAt:asc"
	ListWorkspaceTeamsParamsSortsCreatedAtDesc      ListWorkspaceTeamsParamsSorts = "createdAt:desc"
	ListWorkspaceTeamsParamsSortsDescriptionAsc     ListWorkspaceTeamsParamsSorts = "description:asc"
	ListWorkspaceTeamsParamsSortsDescriptionDesc    ListWorkspaceTeamsParamsSorts = "description:desc"
	ListWorkspaceTeamsParamsSortsNameAsc            ListWorkspaceTeamsParamsSorts = "name:asc"
	ListWorkspaceTeamsParamsSortsNameDesc           ListWorkspaceTeamsParamsSorts = "name:desc"
	ListWorkspaceTeamsParamsSortsUpdatedAtAsc       ListWorkspaceTeamsParamsSorts = "updatedAt:asc"
	ListWorkspaceTeamsParamsSortsUpdatedAtDesc      ListWorkspaceTeamsParamsSorts = "updatedAt:desc"
	ListWorkspaceTeamsParamsSortsWorkspaceRolesAsc  ListWorkspaceTeamsParamsSorts = "workspaceRoles:asc"
	ListWorkspaceTeamsParamsSortsWorkspaceRolesDesc ListWorkspaceTeamsParamsSorts = "workspaceRoles:desc"
)

// Defines values for ListWorkspaceUsersParamsSorts.
const (
	ListWorkspaceUsersParamsSortsCreatedAtAsc      ListWorkspaceUsersParamsSorts = "createdAt:asc"
	ListWorkspaceUsersParamsSortsCreatedAtDesc     ListWorkspaceUsersParamsSorts = "createdAt:desc"
	ListWorkspaceUsersParamsSortsFullNameAsc       ListWorkspaceUsersParamsSorts = "fullName:asc"
	ListWorkspaceUsersParamsSortsFullNameDesc      ListWorkspaceUsersParamsSorts = "fullName:desc"
	ListWorkspaceUsersParamsSortsStatusAsc         ListWorkspaceUsersParamsSorts = "status:asc"
	ListWorkspaceUsersParamsSortsStatusDesc        ListWorkspaceUsersParamsSorts = "status:desc"
	ListWorkspaceUsersParamsSortsUpdatedAtAsc      ListWorkspaceUsersParamsSorts = "updatedAt:asc"
	ListWorkspaceUsersParamsSortsUpdatedAtDesc     ListWorkspaceUsersParamsSorts = "updatedAt:desc"
	ListWorkspaceUsersParamsSortsUsernameAsc       ListWorkspaceUsersParamsSorts = "username:asc"
	ListWorkspaceUsersParamsSortsUsernameDesc      ListWorkspaceUsersParamsSorts = "username:desc"
	ListWorkspaceUsersParamsSortsWorkspaceRoleAsc  ListWorkspaceUsersParamsSorts = "workspaceRole:asc"
	ListWorkspaceUsersParamsSortsWorkspaceRoleDesc ListWorkspaceUsersParamsSorts = "workspaceRole:desc"
)

// Defines values for ListSelfUserRepositoriesParamsGitProvider.
const (
	ListSelfUserRepositoriesParamsGitProviderGITHUB ListSelfUserRepositoriesParamsGitProvider = "GITHUB"
)

// Defines values for GetSelfUserRepositoryBranchParamsGitProvider.
const (
	GetSelfUserRepositoryBranchParamsGitProviderGITHUB GetSelfUserRepositoryBranchParamsGitProvider = "GITHUB"
)

// Defines values for GetSelfUserGitAppAuthorizationParamsGitProvider.
const (
	GetSelfUserGitAppAuthorizationParamsGitProviderGITHUB GetSelfUserGitAppAuthorizationParamsGitProvider = "GITHUB"
)

// Defines values for GetSelfUserGitAppInstallationParamsGitProvider.
const (
	GetSelfUserGitAppInstallationParamsGitProviderGITHUB GetSelfUserGitAppInstallationParamsGitProvider = "GITHUB"
)

// AddTeamMembersRequest defines model for AddTeamMembersRequest.
type AddTeamMembersRequest struct {
	MemberIds []string `json:"memberIds"`
}

// ApiToken defines model for ApiToken.
type ApiToken struct {
	CreatedAt          time.Time            `json:"createdAt"`
	CreatedBy          *BasicSubjectProfile `json:"createdBy,omitempty"`
	CreatedById        string               `json:"createdById"`
	DeletedAt          *time.Time           `json:"deletedAt,omitempty"`
	Description        string               `json:"description"`
	EndAt              *time.Time           `json:"endAt,omitempty"`
	ExpiryPeriodInDays *int                 `json:"expiryPeriodInDays,omitempty"`
	Id                 string               `json:"id"`
	LastUsedAt         *time.Time           `json:"lastUsedAt,omitempty"`
	Name               string               `json:"name"`
	OrganizationId     *string              `json:"organizationId,omitempty"`
	OrganizationName   *string              `json:"organizationName,omitempty"`
	Roles              []ApiTokenRole       `json:"roles"`
	ShortToken         string               `json:"shortToken"`
	StartAt            time.Time            `json:"startAt"`
	Token              *string              `json:"token,omitempty"`
	Type               ApiTokenType         `json:"type"`
	UpdatedAt          time.Time            `json:"updatedAt"`
	UpdatedBy          *BasicSubjectProfile `json:"updatedBy,omitempty"`
	UpdatedById        string               `json:"updatedById"`
}

// ApiTokenType defines model for ApiToken.Type.
type ApiTokenType string

// ApiTokenDeploymentRoleRequest defines model for ApiTokenDeploymentRoleRequest.
type ApiTokenDeploymentRoleRequest struct {
	EntityId string `json:"entityId"`
	Role     string `json:"role"`
}

// ApiTokenRole defines model for ApiTokenRole.
type ApiTokenRole struct {
	EntityId   string                 `json:"entityId"`
	EntityType ApiTokenRoleEntityType `json:"entityType"`
	Role       string                 `json:"role"`
}

// ApiTokenRoleEntityType defines model for ApiTokenRole.EntityType.
type ApiTokenRoleEntityType string

// ApiTokenWorkspaceRoleRequest defines model for ApiTokenWorkspaceRoleRequest.
type ApiTokenWorkspaceRoleRequest struct {
	EntityId string `json:"entityId"`
	Role     string `json:"role"`
}

// BasicSubjectProfile defines model for BasicSubjectProfile.
type BasicSubjectProfile struct {
	ApiTokenName *string                         `json:"apiTokenName,omitempty"`
	AvatarUrl    *string                         `json:"avatarUrl,omitempty"`
	FullName     *string                         `json:"fullName,omitempty"`
	Id           string                          `json:"id"`
	SubjectType  *BasicSubjectProfileSubjectType `json:"subjectType,omitempty"`
	Username     *string                         `json:"username,omitempty"`
}

// BasicSubjectProfileSubjectType defines model for BasicSubjectProfile.SubjectType.
type BasicSubjectProfileSubjectType string

// Cluster defines model for Cluster.
type Cluster struct {
	AppliedHarmonyVersion  *string              `json:"appliedHarmonyVersion,omitempty"`
	AppliedTemplateVersion string               `json:"appliedTemplateVersion"`
	CloudProvider          ClusterCloudProvider `json:"cloudProvider"`
	Cohort                 *string              `json:"cohort,omitempty"`
	CreatedAt              time.Time            `json:"createdAt"`
	DbInstanceType         string               `json:"dbInstanceType"`
	DbInstanceVersion      string               `json:"dbInstanceVersion"`
	DeletedAt              *string              `json:"deletedAt,omitempty"`
	HarmonyVersion         *string              `json:"harmonyVersion,omitempty"`
	Id                     string               `json:"id"`
	IsCordoned             *bool                `json:"isCordoned,omitempty"`
	IsDryRun               bool                 `json:"isDryRun"`
	IsLimited              bool                 `json:"isLimited"`
	K8sTags                []ClusterTag         `json:"k8sTags"`
	Metadata               ClusterMetadata      `json:"metadata"`
	Name                   string               `json:"name"`
	NodePools              []NodePool           `json:"nodePools"`
	OrganizationId         string               `json:"organizationId"`
	PodSubnetRange         string               `json:"podSubnetRange"`
	ProviderAccount        string               `json:"providerAccount"`
	RdsSnapshotIdentifier  *string              `json:"rdsSnapshotIdentifier,omitempty"`
	Region                 string               `json:"region"`
	ServicePeeringRange    string               `json:"servicePeeringRange"`
	ServiceSubnetRange     string               `json:"serviceSubnetRange"`
	Status                 ClusterStatus        `json:"status"`
	TemplateUrl            string               `json:"templateUrl"`
	TemplateVersion        string               `json:"templateVersion"`
	TemporalRunId          string               `json:"temporalRunId"`
	TenantId               string               `json:"tenantId"`
	Type                   ClusterType          `json:"type"`
	UpdatedAt              time.Time            `json:"updatedAt"`
	VpcSubnetRange         string               `json:"vpcSubnetRange"`
	Workspaces             []string             `json:"workspaces"`
}

// ClusterCloudProvider defines model for Cluster.CloudProvider.
type ClusterCloudProvider string

// ClusterStatus defines model for Cluster.Status.
type ClusterStatus string

// ClusterType defines model for Cluster.Type.
type ClusterType string

// ClusterDetailed defines model for ClusterDetailed.
type ClusterDetailed struct {
	AppliedHarmonyVersion  *string                      `json:"appliedHarmonyVersion,omitempty"`
	AppliedTemplateVersion string                       `json:"appliedTemplateVersion"`
	CloudProvider          ClusterDetailedCloudProvider `json:"cloudProvider"`
	Cohort                 *string                      `json:"cohort,omitempty"`
	CreatedAt              time.Time                    `json:"createdAt"`
	CreatedBy              BasicSubjectProfile          `json:"createdBy"`
	DbInstanceType         string                       `json:"dbInstanceType"`
	DbInstanceVersion      string                       `json:"dbInstanceVersion"`
	DeletedAt              *string                      `json:"deletedAt,omitempty"`
	HarmonyVersion         *string                      `json:"harmonyVersion,omitempty"`
	Id                     string                       `json:"id"`
	IsCordoned             *bool                        `json:"isCordoned,omitempty"`
	IsDryRun               bool                         `json:"isDryRun"`
	IsLimited              bool                         `json:"isLimited"`
	K8sTags                []ClusterTag                 `json:"k8sTags"`
	Metadata               ClusterMetadata              `json:"metadata"`
	Name                   string                       `json:"name"`
	NodePools              []NodePool                   `json:"nodePools"`

	// OrgShortName Deprecated: orgShortName has been replaced with organizationShortName
	OrgShortName               *string               `json:"orgShortName,omitempty"`
	OrganizationId             string                `json:"organizationId"`
	OrganizationName           string                `json:"organizationName"`
	OrganizationShortName      string                `json:"organizationShortName"`
	OrganizationSupportPlan    string                `json:"organizationSupportPlan"`
	OrganizationTrialExpiresAt *string               `json:"organizationTrialExpiresAt,omitempty"`
	PodSubnetRange             string                `json:"podSubnetRange"`
	ProviderAccount            string                `json:"providerAccount"`
	RdsSnapshotIdentifier      *string               `json:"rdsSnapshotIdentifier,omitempty"`
	Region                     string                `json:"region"`
	ServicePeeringRange        string                `json:"servicePeeringRange"`
	ServiceSubnetRange         string                `json:"serviceSubnetRange"`
	Status                     ClusterDetailedStatus `json:"status"`
	TemplateUrl                string                `json:"templateUrl"`
	TemplateVersion            string                `json:"templateVersion"`
	TemporalRunId              string                `json:"temporalRunId"`
	TenantId                   string                `json:"tenantId"`
	Type                       ClusterDetailedType   `json:"type"`
	UpdatedAt                  time.Time             `json:"updatedAt"`
	UpdatedBy                  BasicSubjectProfile   `json:"updatedBy"`
	VpcSubnetRange             string                `json:"vpcSubnetRange"`
	Workspaces                 []string              `json:"workspaces"`
}

// ClusterDetailedCloudProvider defines model for ClusterDetailed.CloudProvider.
type ClusterDetailedCloudProvider string

// ClusterDetailedStatus defines model for ClusterDetailed.Status.
type ClusterDetailedStatus string

// ClusterDetailedType defines model for ClusterDetailed.Type.
type ClusterDetailedType string

// ClusterMetadata defines model for ClusterMetadata.
type ClusterMetadata struct {
	ExternalIPs   *[]string `json:"externalIPs,omitempty"`
	OidcIssuerUrl *string   `json:"oidcIssuerUrl,omitempty"`
}

// ClusterOptions defines model for ClusterOptions.
type ClusterOptions struct {
	DatabaseInstances          []ProviderInstanceType `json:"databaseInstances"`
	DefaultDatabaseInstance    ProviderInstanceType   `json:"defaultDatabaseInstance"`
	DefaultNodeInstance        ProviderInstanceType   `json:"defaultNodeInstance"`
	DefaultPodSubnetRange      *string                `json:"defaultPodSubnetRange,omitempty"`
	DefaultRegion              ProviderRegion         `json:"defaultRegion"`
	DefaultServicePeeringRange *string                `json:"defaultServicePeeringRange,omitempty"`
	DefaultServiceSubnetRange  *string                `json:"defaultServiceSubnetRange,omitempty"`
	DefaultVpcSubnetRange      string                 `json:"defaultVpcSubnetRange"`
	NodeCountDefault           int                    `json:"nodeCountDefault"`
	NodeCountMax               int                    `json:"nodeCountMax"`
	NodeCountMin               int                    `json:"nodeCountMin"`
	NodeInstances              []ProviderInstanceType `json:"nodeInstances"`
	Provider                   string                 `json:"provider"`
	Regions                    []ProviderRegion       `json:"regions"`
	TemplateVersions           []TemplateVersion      `json:"templateVersions"`
}

// ClusterRoute defines model for ClusterRoute.
type ClusterRoute struct {
	ConnectionId    *string                `json:"connectionId,omitempty"`
	CreatedAt       time.Time              `json:"createdAt"`
	CreatedById     string                 `json:"createdById"`
	Description     *string                `json:"description,omitempty"`
	DestinationCidr string                 `json:"destinationCidr"`
	Id              string                 `json:"id"`
	Name            string                 `json:"name"`
	Source          ClusterRouteSource     `json:"source"`
	Target          string                 `json:"target"`
	TargetType      ClusterRouteTargetType `json:"targetType"`
}

// ClusterRouteSource defines model for ClusterRoute.Source.
type ClusterRouteSource string

// ClusterRouteTargetType defines model for ClusterRoute.TargetType.
type ClusterRouteTargetType string

// ClusterRoutesPaginated defines model for ClusterRoutesPaginated.
type ClusterRoutesPaginated struct {
	ClusterRoutes []ClusterRoute `json:"clusterRoutes"`
	Limit         int            `json:"limit"`
	Offset        int            `json:"offset"`
	TotalCount    int            `json:"totalCount"`
}

// ClusterTag defines model for ClusterTag.
type ClusterTag struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ClustersPaginated defines model for ClustersPaginated.
type ClustersPaginated struct {
	Clusters   []Cluster `json:"clusters"`
	Limit      int       `json:"limit"`
	Offset     int       `json:"offset"`
	TotalCount int       `json:"totalCount"`
}

// ConnectionAuthType defines model for ConnectionAuthType.
type ConnectionAuthType struct {
	AirflowType         string                        `json:"airflowType"`
	AuthMethodName      string                        `json:"authMethodName"`
	Description         string                        `json:"description"`
	GuidePath           *string                       `json:"guidePath,omitempty"`
	Id                  string                        `json:"id"`
	Name                string                        `json:"name"`
	Parameters          []ConnectionAuthTypeParameter `json:"parameters"`
	ProviderLogo        *string                       `json:"providerLogo,omitempty"`
	ProviderPackageName string                        `json:"providerPackageName"`
}

// ConnectionAuthTypeParameter defines model for ConnectionAuthTypeParameter.
type ConnectionAuthTypeParameter struct {
	AirflowParamName string  `json:"airflowParamName"`
	DataType         string  `json:"dataType"`
	Description      string  `json:"description"`
	Example          *string `json:"example,omitempty"`
	FriendlyName     string  `json:"friendlyName"`
	IsInExtra        bool    `json:"isInExtra"`
	IsRequired       bool    `json:"isRequired"`
	IsSecret         bool    `json:"isSecret"`
}

// CreateAwsClusterRequest defines model for CreateAwsClusterRequest.
type CreateAwsClusterRequest struct {
	DbInstanceType  string                      `json:"dbInstanceType"`
	IsDryRun        *bool                       `json:"isDryRun,omitempty"`
	K8sTags         *[]ClusterTag               `json:"k8sTags,omitempty"`
	Name            string                      `json:"name"`
	NodePools       *[]CreateNodePoolRequest    `json:"nodePools,omitempty"`
	ProviderAccount *string                     `json:"providerAccount,omitempty"`
	Region          string                      `json:"region"`
	TemplateVersion string                      `json:"templateVersion"`
	Type            CreateAwsClusterRequestType `json:"type"`
	VpcSubnetRange  string                      `json:"vpcSubnetRange"`
}

// CreateAwsClusterRequestType defines model for CreateAwsClusterRequest.Type.
type CreateAwsClusterRequestType string

// CreateAzureClusterRequest defines model for CreateAzureClusterRequest.
type CreateAzureClusterRequest struct {
	DbInstanceType  string                        `json:"dbInstanceType"`
	IsDryRun        *bool                         `json:"isDryRun,omitempty"`
	K8sTags         *[]ClusterTag                 `json:"k8sTags,omitempty"`
	Name            string                        `json:"name"`
	NodePools       *[]CreateNodePoolRequest      `json:"nodePools,omitempty"`
	ProviderAccount *string                       `json:"providerAccount,omitempty"`
	Region          string                        `json:"region"`
	TemplateVersion string                        `json:"templateVersion"`
	TenantId        *string                       `json:"tenantId,omitempty"`
	Type            CreateAzureClusterRequestType `json:"type"`
	VpcSubnetRange  string                        `json:"vpcSubnetRange"`
}

// CreateAzureClusterRequestType defines model for CreateAzureClusterRequest.Type.
type CreateAzureClusterRequestType string

// CreateClusterRouteRequest defines model for CreateClusterRouteRequest.
type CreateClusterRouteRequest struct {
	ConnectionId    *string                             `json:"connectionId,omitempty"`
	Description     *string                             `json:"description,omitempty"`
	DestinationCidr string                              `json:"destinationCidr"`
	Name            string                              `json:"name"`
	Source          CreateClusterRouteRequestSource     `json:"source"`
	Target          *string                             `json:"target,omitempty"`
	TargetType      CreateClusterRouteRequestTargetType `json:"targetType"`
}

// CreateClusterRouteRequestSource defines model for CreateClusterRouteRequest.Source.
type CreateClusterRouteRequestSource string

// CreateClusterRouteRequestTargetType defines model for CreateClusterRouteRequest.TargetType.
type CreateClusterRouteRequestTargetType string

// CreateCustomRoleRequest defines model for CreateCustomRoleRequest.
type CreateCustomRoleRequest struct {
	Description            *string                          `json:"description,omitempty"`
	Name                   string                           `json:"name"`
	Permissions            []string                         `json:"permissions"`
	RestrictedWorkspaceIds *[]string                        `json:"restrictedWorkspaceIds,omitempty"`
	ScopeType              CreateCustomRoleRequestScopeType `json:"scopeType"`
}

// CreateCustomRoleRequestScopeType defines model for CreateCustomRoleRequest.ScopeType.
type CreateCustomRoleRequestScopeType string

// CreateDedicatedDeploymentRequest defines model for CreateDedicatedDeploymentRequest.
type CreateDedicatedDeploymentRequest struct {
	// AstroRuntimeVersion Version of the astro runtime to use
	AstroRuntimeVersion string `json:"astroRuntimeVersion"`

	// ClusterId Cluster where the deployment should be created on
	ClusterId     string    `json:"clusterId"`
	ContactEmails *[]string `json:"contactEmails,omitempty"`

	// DefaultTaskPodCpu Must be valid kubernetes cpu resource string, at least 0.25 in terms of cpu cores
	DefaultTaskPodCpu string `json:"defaultTaskPodCpu"`

	// DefaultTaskPodEphemeralStorage Must be valid kubernetes ephemeral storage resource string, in terms of Gibibytes (GiB)
	DefaultTaskPodEphemeralStorage *string `json:"defaultTaskPodEphemeralStorage,omitempty"`

	// DefaultTaskPodMemory Must be valid kubernetes memory resource string, at least 0.5Gi in terms of Gibibytes (GiB)
	DefaultTaskPodMemory string `json:"defaultTaskPodMemory"`

	// Description Optional description of the deployment
	Description *string `json:"description,omitempty"`

	// Executor Airflow executors, supported: CELERY, KUBERNETES
	Executor CreateDedicatedDeploymentRequestExecutor `json:"executor"`

	// IsCicdEnforced If true, deployment specifications can only be updated through API token, changes will not be allowed through UI. This option can be turned off by admin
	IsCicdEnforced bool `json:"isCicdEnforced"`

	// IsDagDeployEnabled If true, dags can be independently pushed through CLI
	IsDagDeployEnabled bool `json:"isDagDeployEnabled"`

	// IsDevelopmentOnly If true, deployment will be able to use development-only features, such as hibernation, but will not have guaranteed uptime SLAs
	IsDevelopmentOnly bool `json:"isDevelopmentOnly"`

	// IsHighAvailability If true, deployment will have backup components
	IsHighAvailability bool `json:"isHighAvailability"`

	// Name The deployment name
	Name string `json:"name"`

	// RepositoryBranch The branch of the repository path to use for Git deploys
	RepositoryBranch *string `json:"repositoryBranch,omitempty"`

	// RepositoryPathId The workspace's repository path to use for Git deploys
	RepositoryPathId *string `json:"repositoryPathId,omitempty"`

	// ResourceQuotaCpu Must be valid kubernetes cpu resource string, at least 1 in terms of cpu cores
	ResourceQuotaCpu string `json:"resourceQuotaCpu"`

	// ResourceQuotaMemory Must be valid kubernetes memory resource string, at least 2Gi in terms of Gibibytes (GiB)
	ResourceQuotaMemory string                        `json:"resourceQuotaMemory"`
	ScalingSpec         *DeploymentScalingSpecRequest `json:"scalingSpec,omitempty"`

	// SchedulerSize Size of scheduler, one of: SMALL, MEDIUM, LARGE
	SchedulerSize CreateDedicatedDeploymentRequestSchedulerSize `json:"schedulerSize"`

	// Type Types of the deployment, one of: DEDICATED, HYBRID, STANDARD
	Type CreateDedicatedDeploymentRequestType `json:"type"`

	// WorkerQueues Specification for worker queues, at least one is required if deployment executor is CELERY
	WorkerQueues *[]MutateWorkerQueueRequest `json:"workerQueues,omitempty"`

	// WorkloadIdentity The workload identity to use for the deployment
	WorkloadIdentity *string `json:"workloadIdentity,omitempty"`

	// WorkspaceId Workspace Id
	WorkspaceId string `json:"workspaceId"`
}

// CreateDedicatedDeploymentRequestExecutor Airflow executors, supported: CELERY, KUBERNETES
type CreateDedicatedDeploymentRequestExecutor string

// CreateDedicatedDeploymentRequestSchedulerSize Size of scheduler, one of: SMALL, MEDIUM, LARGE
type CreateDedicatedDeploymentRequestSchedulerSize string

// CreateDedicatedDeploymentRequestType Types of the deployment, one of: DEDICATED, HYBRID, STANDARD
type CreateDedicatedDeploymentRequestType string

// CreateDeployRequest defines model for CreateDeployRequest.
type CreateDeployRequest struct {
	Description *string                 `json:"description,omitempty"`
	ImageTag    *string                 `json:"imageTag,omitempty"`
	Type        CreateDeployRequestType `json:"type"`
}

// CreateDeployRequestType defines model for CreateDeployRequest.Type.
type CreateDeployRequestType string

// CreateDeploymentApiTokenRequest defines model for CreateDeploymentApiTokenRequest.
type CreateDeploymentApiTokenRequest struct {
	Description             *string `json:"description,omitempty"`
	Name                    string  `json:"name"`
	Role                    string  `json:"role"`
	TokenExpiryPeriodInDays *int    `json:"tokenExpiryPeriodInDays,omitempty"`
}

// CreateDeploymentRequest defines model for CreateDeploymentRequest.
type CreateDeploymentRequest struct {
	union json.RawMessage
}

// CreateEnvironmentObject defines model for CreateEnvironmentObject.
type CreateEnvironmentObject struct {
	Id string `json:"id"`
}

// CreateEnvironmentObjectAirflowVariableOverridesRequest defines model for CreateEnvironmentObjectAirflowVariableOverridesRequest.
type CreateEnvironmentObjectAirflowVariableOverridesRequest struct {
	Value *string `json:"value,omitempty"`
}

// CreateEnvironmentObjectAirflowVariableRequest defines model for CreateEnvironmentObjectAirflowVariableRequest.
type CreateEnvironmentObjectAirflowVariableRequest struct {
	IsSecret *bool   `json:"isSecret,omitempty"`
	Value    *string `json:"value,omitempty"`
}

// CreateEnvironmentObjectConnectionOverridesRequest defines model for CreateEnvironmentObjectConnectionOverridesRequest.
type CreateEnvironmentObjectConnectionOverridesRequest struct {
	Extra    *map[string]interface{} `json:"extra,omitempty"`
	Host     *string                 `json:"host,omitempty"`
	Login    *string                 `json:"login,omitempty"`
	Password *string                 `json:"password,omitempty"`
	Port     *int                    `json:"port,omitempty"`
	Schema   *string                 `json:"schema,omitempty"`
	Type     *string                 `json:"type,omitempty"`
}

// CreateEnvironmentObjectConnectionRequest defines model for CreateEnvironmentObjectConnectionRequest.
type CreateEnvironmentObjectConnectionRequest struct {
	AuthTypeId *string                 `json:"authTypeId,omitempty"`
	Extra      *map[string]interface{} `json:"extra,omitempty"`
	Host       *string                 `json:"host,omitempty"`
	Login      *string                 `json:"login,omitempty"`
	Password   *string                 `json:"password,omitempty"`
	Port       *int                    `json:"port,omitempty"`
	Schema     *string                 `json:"schema,omitempty"`
	Type       string                  `json:"type"`
}

// CreateEnvironmentObjectLinkRequest defines model for CreateEnvironmentObjectLinkRequest.
type CreateEnvironmentObjectLinkRequest struct {
	Overrides     *CreateEnvironmentObjectOverridesRequest `json:"overrides,omitempty"`
	Scope         CreateEnvironmentObjectLinkRequestScope  `json:"scope"`
	ScopeEntityId string                                   `json:"scopeEntityId"`
}

// CreateEnvironmentObjectLinkRequestScope defines model for CreateEnvironmentObjectLinkRequest.Scope.
type CreateEnvironmentObjectLinkRequestScope string

// CreateEnvironmentObjectOverridesRequest defines model for CreateEnvironmentObjectOverridesRequest.
type CreateEnvironmentObjectOverridesRequest struct {
	AirflowVariable *CreateEnvironmentObjectAirflowVariableOverridesRequest `json:"airflowVariable,omitempty"`
	Connection      *CreateEnvironmentObjectConnectionOverridesRequest      `json:"connection,omitempty"`
}

// CreateEnvironmentObjectRequest defines model for CreateEnvironmentObjectRequest.
type CreateEnvironmentObjectRequest struct {
	AirflowVariable     *CreateEnvironmentObjectAirflowVariableRequest `json:"airflowVariable,omitempty"`
	AutoLinkDeployments *bool                                          `json:"autoLinkDeployments,omitempty"`
	Connection          *CreateEnvironmentObjectConnectionRequest      `json:"connection,omitempty"`
	Links               *[]CreateEnvironmentObjectLinkRequest          `json:"links,omitempty"`
	ObjectKey           string                                         `json:"objectKey"`
	ObjectType          CreateEnvironmentObjectRequestObjectType       `json:"objectType"`
	Scope               CreateEnvironmentObjectRequestScope            `json:"scope"`
	ScopeEntityId       string                                         `json:"scopeEntityId"`
}

// CreateEnvironmentObjectRequestObjectType defines model for CreateEnvironmentObjectRequest.ObjectType.
type CreateEnvironmentObjectRequestObjectType string

// CreateEnvironmentObjectRequestScope defines model for CreateEnvironmentObjectRequest.Scope.
type CreateEnvironmentObjectRequestScope string

// CreateGcpClusterRequest defines model for CreateGcpClusterRequest.
type CreateGcpClusterRequest struct {
	DbInstanceType      string                      `json:"dbInstanceType"`
	IsDryRun            *bool                       `json:"isDryRun,omitempty"`
	K8sTags             *[]ClusterTag               `json:"k8sTags,omitempty"`
	Name                string                      `json:"name"`
	NodePools           *[]CreateNodePoolRequest    `json:"nodePools,omitempty"`
	PodSubnetRange      string                      `json:"podSubnetRange"`
	ProviderAccount     *string                     `json:"providerAccount,omitempty"`
	Region              string                      `json:"region"`
	ServicePeeringRange string                      `json:"servicePeeringRange"`
	ServiceSubnetRange  string                      `json:"serviceSubnetRange"`
	TemplateVersion     string                      `json:"templateVersion"`
	Type                CreateGcpClusterRequestType `json:"type"`
	VpcSubnetRange      string                      `json:"vpcSubnetRange"`
}

// CreateGcpClusterRequestType defines model for CreateGcpClusterRequest.Type.
type CreateGcpClusterRequestType string

// CreateHybridDeploymentRequest defines model for CreateHybridDeploymentRequest.
type CreateHybridDeploymentRequest struct {
	// AstroRuntimeVersion Version of the astro runtime to use
	AstroRuntimeVersion string `json:"astroRuntimeVersion"`

	// ClusterId Cluster where the deployment should be created on
	ClusterId     string    `json:"clusterId"`
	ContactEmails *[]string `json:"contactEmails,omitempty"`

	// Description Optional description of the deployment
	Description *string `json:"description,omitempty"`

	// Executor Airflow executors, supported: CELERY, KUBERNETES
	Executor CreateHybridDeploymentRequestExecutor `json:"executor"`

	// IsCicdEnforced If true, deployment specifications can only be updated through API token, changes will not be allowed through UI. This option can be turned off by admin
	IsCicdEnforced bool `json:"isCicdEnforced"`

	// IsDagDeployEnabled If true, dags can be independently pushed through CLI
	IsDagDeployEnabled bool `json:"isDagDeployEnabled"`

	// Name The deployment name
	Name              string                        `json:"name"`
	Scheduler         DeploymentInstanceSpecRequest `json:"scheduler"`
	TaskPodNodePoolId *string                       `json:"taskPodNodePoolId,omitempty"`

	// Type Types of the deployment, one of: DEDICATED, HYBRID, STANDARD
	Type CreateHybridDeploymentRequestType `json:"type"`

	// WorkerQueues Specification for worker queues, at least one is required if deployment executor is CELERY
	WorkerQueues *[]MutateWorkerQueueRequest `json:"workerQueues,omitempty"`

	// WorkloadIdentity The workload identity to use for the deployment
	WorkloadIdentity *string `json:"workloadIdentity,omitempty"`

	// WorkspaceId Workspace Id
	WorkspaceId string `json:"workspaceId"`
}

// CreateHybridDeploymentRequestExecutor Airflow executors, supported: CELERY, KUBERNETES
type CreateHybridDeploymentRequestExecutor string

// CreateHybridDeploymentRequestType Types of the deployment, one of: DEDICATED, HYBRID, STANDARD
type CreateHybridDeploymentRequestType string

// CreateNodePoolRequest defines model for CreateNodePoolRequest.
type CreateNodePoolRequest struct {
	IsDefault        bool   `json:"isDefault"`
	MaxNodeCount     int    `json:"maxNodeCount"`
	Name             string `json:"name"`
	NodeInstanceType string `json:"nodeInstanceType"`
}

// CreateOrganizationApiTokenRequest defines model for CreateOrganizationApiTokenRequest.
type CreateOrganizationApiTokenRequest struct {
	Description             *string `json:"description,omitempty"`
	Name                    string  `json:"name"`
	Role                    string  `json:"role"`
	TokenExpiryPeriodInDays *int    `json:"tokenExpiryPeriodInDays,omitempty"`
}

// CreateOrganizationRequest defines model for CreateOrganizationRequest.
type CreateOrganizationRequest struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	Name     string                  `json:"name"`
}

// CreateStandardDeploymentRequest defines model for CreateStandardDeploymentRequest.
type CreateStandardDeploymentRequest struct {
	// AstroRuntimeVersion Version of the astro runtime to use
	AstroRuntimeVersion string `json:"astroRuntimeVersion"`

	// CloudProvider Supported cloud providers are AWS, AZURE, GCP. Optional if cluster id is specified
	CloudProvider *CreateStandardDeploymentRequestCloudProvider `json:"cloudProvider,omitempty"`

	// ClusterId Optional if cloud provider and region is specified
	ClusterId     *string   `json:"clusterId,omitempty"`
	ContactEmails *[]string `json:"contactEmails,omitempty"`

	// DefaultTaskPodCpu Must be valid kubernetes cpu resource string, at least 0.25 in terms of cpu cores
	DefaultTaskPodCpu string `json:"defaultTaskPodCpu"`

	// DefaultTaskPodEphemeralStorage Must be valid kubernetes ephemeral storage resource string, in terms of Gibibytes (GiB)
	DefaultTaskPodEphemeralStorage *string `json:"defaultTaskPodEphemeralStorage,omitempty"`

	// DefaultTaskPodMemory Must be valid kubernetes memory resource string, at least 0.5Gi in terms of Gibibytes (GiB)
	DefaultTaskPodMemory string `json:"defaultTaskPodMemory"`

	// Description Optional description of the deployment
	Description *string `json:"description,omitempty"`

	// Executor Airflow executors, supported: CELERY, KUBERNETES
	Executor CreateStandardDeploymentRequestExecutor `json:"executor"`

	// IsCicdEnforced If true, deployment specifications can only be updated through API token, changes will not be allowed through UI. This option can be turned off by admin
	IsCicdEnforced bool `json:"isCicdEnforced"`

	// IsDagDeployEnabled If true, dags can be independently pushed through CLI
	IsDagDeployEnabled bool `json:"isDagDeployEnabled"`

	// IsDevelopmentOnly If true, deployment will be able to use development-only features, such as hibernation, but will not have guaranteed uptime SLAs
	IsDevelopmentOnly bool `json:"isDevelopmentOnly"`

	// IsHighAvailability If true, deployment will have backup components
	IsHighAvailability bool `json:"isHighAvailability"`

	// Name The deployment name
	Name string `json:"name"`

	// Region Cloud provider region. Optional if cluster id is specified
	Region *string `json:"region,omitempty"`

	// RepositoryBranch The branch of the repository path to use for Git deploys
	RepositoryBranch *string `json:"repositoryBranch,omitempty"`

	// RepositoryPathId The workspace's repository path to use for Git deploys
	RepositoryPathId *string `json:"repositoryPathId,omitempty"`

	// ResourceQuotaCpu Must be valid kubernetes cpu resource string, at least 1 in terms of cpu cores
	ResourceQuotaCpu string `json:"resourceQuotaCpu"`

	// ResourceQuotaMemory Must be valid kubernetes memory resource string, at least 2Gi in terms of Gibibytes (GiB)
	ResourceQuotaMemory string                        `json:"resourceQuotaMemory"`
	ScalingSpec         *DeploymentScalingSpecRequest `json:"scalingSpec,omitempty"`

	// SchedulerSize Size of scheduler, one of: SMALL, MEDIUM, LARGE
	SchedulerSize CreateStandardDeploymentRequestSchedulerSize `json:"schedulerSize"`

	// Type Types of the deployment, one of: DEDICATED, HYBRID, STANDARD
	Type CreateStandardDeploymentRequestType `json:"type"`

	// WorkerQueues At least one worker queue must be specified if deployment executor is CELERY
	WorkerQueues *[]MutateWorkerQueueRequest `json:"workerQueues,omitempty"`

	// WorkloadIdentity The workload identity to use for the deployment
	WorkloadIdentity *string `json:"workloadIdentity,omitempty"`

	// WorkspaceId Workspace Id
	WorkspaceId string `json:"workspaceId"`
}

// CreateStandardDeploymentRequestCloudProvider Supported cloud providers are AWS, AZURE, GCP. Optional if cluster id is specified
type CreateStandardDeploymentRequestCloudProvider string

// CreateStandardDeploymentRequestExecutor Airflow executors, supported: CELERY, KUBERNETES
type CreateStandardDeploymentRequestExecutor string

// CreateStandardDeploymentRequestSchedulerSize Size of scheduler, one of: SMALL, MEDIUM, LARGE
type CreateStandardDeploymentRequestSchedulerSize string

// CreateStandardDeploymentRequestType Types of the deployment, one of: DEDICATED, HYBRID, STANDARD
type CreateStandardDeploymentRequestType string

// CreateTeamRequest defines model for CreateTeamRequest.
type CreateTeamRequest struct {
	Description      *string   `json:"description,omitempty"`
	MemberIds        *[]string `json:"memberIds,omitempty"`
	Name             string    `json:"name"`
	OrganizationRole *string   `json:"organizationRole,omitempty"`
}

// CreateUserInviteRequest defines model for CreateUserInviteRequest.
type CreateUserInviteRequest struct {
	InviteeEmail string `json:"inviteeEmail"`
	Role         string `json:"role"`
}

// CreateWorkspaceApiTokenRequest defines model for CreateWorkspaceApiTokenRequest.
type CreateWorkspaceApiTokenRequest struct {
	Description             *string `json:"description,omitempty"`
	Name                    string  `json:"name"`
	Role                    string  `json:"role"`
	TokenExpiryPeriodInDays *int    `json:"tokenExpiryPeriodInDays,omitempty"`
}

// CreateWorkspaceRequest defines model for CreateWorkspaceRequest.
type CreateWorkspaceRequest struct {
	ApiKeyOnlyDeploymentsDefault *bool   `json:"apiKeyOnlyDeploymentsDefault,omitempty"`
	Description                  *string `json:"description,omitempty"`
	Name                         string  `json:"name"`
}

// CronExpressionSchema defines model for CronExpressionSchema.
type CronExpressionSchema struct {
	Value string `json:"value"`
}

// DagFilters defines model for DagFilters.
type DagFilters struct {
	Deployments map[string]string `json:"deployments"`
	Owners      []string          `json:"owners"`
	Tags        []string          `json:"tags"`
	Warnings    *[]string         `json:"warnings,omitempty"`
}

// DagSchedule defines model for DagSchedule.
type DagSchedule struct {
	CronExpression *CronExpressionSchema `json:"CronExpression,omitempty"`
	RelativeDelta  *RelativeDeltaSchema  `json:"RelativeDelta,omitempty"`
	TimeDelta      *TimeDeltaSchema      `json:"TimeDelta,omitempty"`
}

// DefaultPodSizeOption defines model for DefaultPodSizeOption.
type DefaultPodSizeOption struct {
	Cpu              ResourceRange `json:"cpu"`
	EphemeralStorage ResourceRange `json:"ephemeralStorage"`
	Memory           ResourceRange `json:"memory"`
}

// DefaultRole defines model for DefaultRole.
type DefaultRole struct {
	Description *string              `json:"description,omitempty"`
	Name        string               `json:"name"`
	Permissions []string             `json:"permissions"`
	ScopeType   DefaultRoleScopeType `json:"scopeType"`
}

// DefaultRoleScopeType defines model for DefaultRole.ScopeType.
type DefaultRoleScopeType string

// DefaultValueOptions defines model for DefaultValueOptions.
type DefaultValueOptions struct {
	SchedulerSize     string `json:"schedulerSize"`
	WorkerMachineName string `json:"workerMachineName"`
}

// Deploy defines model for Deploy.
type Deploy struct {
	AirflowVersion     *string              `json:"airflowVersion,omitempty"`
	CreatedAt          time.Time            `json:"createdAt"`
	CreatedBySubject   *BasicSubjectProfile `json:"createdBySubject,omitempty"`
	DagTarballVersion  *string              `json:"dagTarballVersion,omitempty"`
	DagsUploadUrl      *string              `json:"dagsUploadUrl,omitempty"`
	DeploymentId       string               `json:"deploymentId"`
	Description        *string              `json:"description,omitempty"`
	Git                *DeployGit           `json:"git,omitempty"`
	Id                 string               `json:"id"`
	ImageRepository    string               `json:"imageRepository"`
	ImageTag           string               `json:"imageTag"`
	IsDagDeployEnabled bool                 `json:"isDagDeployEnabled"`
	RollbackFromId     *string              `json:"rollbackFromId,omitempty"`
	RuntimeVersion     *string              `json:"runtimeVersion,omitempty"`
	Status             DeployStatus         `json:"status"`
	Steps              *[]DeployStep        `json:"steps,omitempty"`
	Type               DeployType           `json:"type"`
	UpdatedAt          *time.Time           `json:"updatedAt,omitempty"`
	UpdatedBySubject   *BasicSubjectProfile `json:"updatedBySubject,omitempty"`
}

// DeployStatus defines model for Deploy.Status.
type DeployStatus string

// DeployType defines model for Deploy.Type.
type DeployType string

// DeployGit defines model for DeployGit.
type DeployGit struct {
	Account        string            `json:"account"`
	AuthorName     string            `json:"authorName"`
	AuthorUrl      string            `json:"authorUrl"`
	AuthorUsername string            `json:"authorUsername"`
	Branch         string            `json:"branch"`
	CommitSha      string            `json:"commitSha"`
	CommitUrl      string            `json:"commitUrl"`
	Path           *string           `json:"path,omitempty"`
	Provider       DeployGitProvider `json:"provider"`
	Repo           string            `json:"repo"`
}

// DeployGitProvider defines model for DeployGit.Provider.
type DeployGitProvider string

// DeployRollbackRequest defines model for DeployRollbackRequest.
type DeployRollbackRequest struct {
	DeployId    string  `json:"deployId"`
	Description *string `json:"description,omitempty"`
}

// DeployStep defines model for DeployStep.
type DeployStep struct {
	CreatedAt time.Time        `json:"createdAt"`
	EmitsLogs *bool            `json:"emitsLogs,omitempty"`
	EndedAt   *string          `json:"endedAt,omitempty"`
	Id        string           `json:"id"`
	Label     *string          `json:"label,omitempty"`
	StartedAt *string          `json:"startedAt,omitempty"`
	Status    DeployStepStatus `json:"status"`
	UpdatedAt time.Time        `json:"updatedAt"`
}

// DeployStepStatus defines model for DeployStep.Status.
type DeployStepStatus string

// DeployStepLogEntry defines model for DeployStepLogEntry.
type DeployStepLogEntry struct {
	Message   string    `json:"message"`
	Timestamp time.Time `json:"timestamp"`
}

// DeployStepLogsPaginated defines model for DeployStepLogsPaginated.
type DeployStepLogsPaginated struct {
	Entries    []DeployStepLogEntry `json:"entries"`
	Limit      int                  `json:"limit"`
	Offset     int                  `json:"offset"`
	SearchId   string               `json:"searchId"`
	TotalCount int                  `json:"totalCount"`
}

// DeployStepsPaginated defines model for DeployStepsPaginated.
type DeployStepsPaginated struct {
	DeploySteps []DeployStep `json:"deploySteps"`
	Limit       int          `json:"limit"`
	Offset      int          `json:"offset"`
	TotalCount  int          `json:"totalCount"`
}

// Deployment defines model for Deployment.
type Deployment struct {
	AirflowVersion                 string                           `json:"airflowVersion"`
	ClusterCloudProvider           *DeploymentClusterCloudProvider  `json:"clusterCloudProvider,omitempty"`
	ClusterId                      string                           `json:"clusterId"`
	ClusterName                    *string                          `json:"clusterName,omitempty"`
	ClusterRegion                  *string                          `json:"clusterRegion,omitempty"`
	ContactEmails                  []string                         `json:"contactEmails"`
	CreatedAt                      time.Time                        `json:"createdAt"`
	CreatedBy                      *BasicSubjectProfile             `json:"createdBy,omitempty"`
	CurrentDagTarballVersion       *string                          `json:"currentDagTarballVersion,omitempty"`
	CurrentEnvironmentSignatures   *EnvironmentSignatures           `json:"currentEnvironmentSignatures,omitempty"`
	CurrentImageVersion            *string                          `json:"currentImageVersion,omitempty"`
	DefaultTaskPodCpu              *string                          `json:"defaultTaskPodCpu,omitempty"`
	DefaultTaskPodEphemeralStorage *string                          `json:"defaultTaskPodEphemeralStorage,omitempty"`
	DefaultTaskPodMemory           *string                          `json:"defaultTaskPodMemory,omitempty"`
	DeletedAt                      *time.Time                       `json:"deletedAt,omitempty"`
	DeployId                       string                           `json:"deployId"`
	DeploymentHealthStatus         *DeploymentHealthStatus          `json:"deploymentHealthStatus,omitempty"`
	Description                    *string                          `json:"description,omitempty"`
	DesiredDagTarballVersion       *string                          `json:"desiredDagTarballVersion,omitempty"`
	DesiredEnvironmentSignatures   *EnvironmentSignatures           `json:"desiredEnvironmentSignatures,omitempty"`
	DesiredImageVersion            *string                          `json:"desiredImageVersion,omitempty"`
	EnvironmentVariables           *[]DeploymentEnvironmentVariable `json:"environmentVariables,omitempty"`
	Executor                       *DeploymentExecutor              `json:"executor,omitempty"`
	ExternalIPs                    *[]string                        `json:"externalIPs,omitempty"`
	Id                             string                           `json:"id"`
	ImageId                        string                           `json:"imageId"`
	ImageRepository                string                           `json:"imageRepository"`
	ImageTag                       string                           `json:"imageTag"`
	IsCicdEnforced                 bool                             `json:"isCicdEnforced"`
	IsDagDeployEnabled             bool                             `json:"isDagDeployEnabled"`
	IsDevelopmentOnly              bool                             `json:"isDevelopmentOnly"`
	IsHighAvailability             *bool                            `json:"isHighAvailability,omitempty"`
	Name                           string                           `json:"name"`
	OidcIssuerUrl                  *string                          `json:"oidcIssuerUrl,omitempty"`
	OrganizationId                 string                           `json:"organizationId"`
	OrganizationName               string                           `json:"organizationName"`
	OrganizationShortName          string                           `json:"organizationShortName"`
	ReleaseName                    string                           `json:"releaseName"`
	RepositoryBranch               *string                          `json:"repositoryBranch,omitempty"`
	RepositoryPathDetails          *DeploymentRepositoryPath        `json:"repositoryPathDetails,omitempty"`
	RepositoryPathId               *string                          `json:"repositoryPathId,omitempty"`
	ResourceQuotaCpu               *string                          `json:"resourceQuotaCpu,omitempty"`
	ResourceQuotaMemory            *string                          `json:"resourceQuotaMemory,omitempty"`
	RuntimeVersion                 string                           `json:"runtimeVersion"`
	ScalingSpec                    *DeploymentScalingSpec           `json:"scalingSpec,omitempty"`
	ScalingStatus                  *DeploymentScalingStatus         `json:"scalingStatus,omitempty"`
	SchedulerAu                    *int                             `json:"schedulerAu,omitempty"`
	SchedulerCpu                   string                           `json:"schedulerCpu"`
	SchedulerMemory                string                           `json:"schedulerMemory"`
	SchedulerReplicas              int                              `json:"schedulerReplicas"`
	SchedulerSize                  *DeploymentSchedulerSize         `json:"schedulerSize,omitempty"`
	Status                         DeploymentStatus                 `json:"status"`
	StatusReason                   *string                          `json:"statusReason,omitempty"`
	TaskPodNodePoolId              *string                          `json:"taskPodNodePoolId,omitempty"`
	Type                           *DeploymentType                  `json:"type,omitempty"`
	UpdatedAt                      time.Time                        `json:"updatedAt"`
	UpdatedBy                      *BasicSubjectProfile             `json:"updatedBy,omitempty"`

	// WebServerAirflowApiUrl The Deployment's webserver's base url to directly access the Airflow api.
	WebServerAirflowApiUrl   string         `json:"webServerAirflowApiUrl"`
	WebServerCpu             string         `json:"webServerCpu"`
	WebServerIngressHostname string         `json:"webServerIngressHostname"`
	WebServerMemory          string         `json:"webServerMemory"`
	WebServerReplicas        *int           `json:"webServerReplicas,omitempty"`
	WebServerUrl             string         `json:"webServerUrl"`
	WorkerQueues             *[]WorkerQueue `json:"workerQueues,omitempty"`
	WorkloadIdentity         *string        `json:"workloadIdentity,omitempty"`
	WorkspaceId              string         `json:"workspaceId"`
	WorkspaceName            string         `json:"workspaceName"`
}

// DeploymentClusterCloudProvider defines model for Deployment.ClusterCloudProvider.
type DeploymentClusterCloudProvider string

// DeploymentExecutor defines model for Deployment.Executor.
type DeploymentExecutor string

// DeploymentSchedulerSize defines model for Deployment.SchedulerSize.
type DeploymentSchedulerSize string

// DeploymentStatus defines model for Deployment.Status.
type DeploymentStatus string

// DeploymentType defines model for Deployment.Type.
type DeploymentType string

// DeploymentEnvironmentVariable defines model for DeploymentEnvironmentVariable.
type DeploymentEnvironmentVariable struct {
	IsSecret  bool    `json:"isSecret"`
	Key       string  `json:"key"`
	UpdatedAt string  `json:"updatedAt"`
	Value     *string `json:"value,omitempty"`
}

// DeploymentEnvironmentVariableRequest defines model for DeploymentEnvironmentVariableRequest.
type DeploymentEnvironmentVariableRequest struct {
	IsSecret bool    `json:"isSecret"`
	Key      string  `json:"key"`
	Value    *string `json:"value,omitempty"`
}

// DeploymentHealthStatus defines model for DeploymentHealthStatus.
type DeploymentHealthStatus struct {
	HibernationStatus *HibernationStatus    `json:"hibernationStatus,omitempty"`
	Incidents         *[]DeploymentIncident `json:"incidents,omitempty"`
	Info              *DeploymentInfo       `json:"info,omitempty"`
}

// DeploymentHibernationOverride defines model for DeploymentHibernationOverride.
type DeploymentHibernationOverride struct {
	// Hibernate Whether to go into hibernation or not via the override rule
	Hibernate *bool `json:"hibernate,omitempty"`

	// IsActive Whether the override is currently active or not
	IsActive *bool `json:"isActive,omitempty"`

	// OverrideUntil Timestamp till the override on the hibernation schedule is in effect
	OverrideUntil *string `json:"overrideUntil,omitempty"`
}

// DeploymentHibernationOverrideRequest defines model for DeploymentHibernationOverrideRequest.
type DeploymentHibernationOverrideRequest struct {
	// Hibernate Whether to go into hibernation or not via the override rule
	Hibernate *bool `json:"hibernate,omitempty"`

	// OverrideUntil Timestamp till the override on the hibernation schedule is in effect
	OverrideUntil *string `json:"overrideUntil,omitempty"`
}

// DeploymentHibernationSchedule defines model for DeploymentHibernationSchedule.
type DeploymentHibernationSchedule struct {
	// Description To add contextual information for the schedule
	Description *string `json:"description,omitempty"`

	// HibernateAtCron Cron expression representing the hibernation schedule
	HibernateAtCron string `json:"hibernateAtCron"`

	// IsEnabled It is set to true if the hibernate/wake schedule is enabled
	IsEnabled bool `json:"isEnabled"`

	// WakeAtCron Cron expression representing the wake-up schedule
	WakeAtCron string `json:"wakeAtCron"`
}

// DeploymentHibernationSpec defines model for DeploymentHibernationSpec.
type DeploymentHibernationSpec struct {
	Override *DeploymentHibernationOverride `json:"override,omitempty"`

	// Schedules The list of schedules for the hibernation spec
	Schedules *[]DeploymentHibernationSchedule `json:"schedules,omitempty"`
}

// DeploymentHibernationSpecRequest defines model for DeploymentHibernationSpecRequest.
type DeploymentHibernationSpecRequest struct {
	Override *DeploymentHibernationOverrideRequest `json:"override,omitempty"`

	// Schedules The list of schedules for the hibernation spec
	Schedules *[]DeploymentHibernationSchedule `json:"schedules,omitempty"`
}

// DeploymentHibernationStatus defines model for DeploymentHibernationStatus.
type DeploymentHibernationStatus struct {
	// IsHibernating If the deployment is currently in hibernating state or not
	IsHibernating *bool `json:"isHibernating,omitempty"`

	// NextEventAt Timestamp of the next schedule hibernation event for the deployment
	NextEventAt *time.Time `json:"nextEventAt,omitempty"`

	// NextEventType Represents the type of the scheduled event for the deployment, one of HIBERNATE or WAKE
	NextEventType *DeploymentHibernationStatusNextEventType `json:"nextEventType,omitempty"`

	// Reason Reason indicating the current state of the deployment
	Reason *string `json:"reason,omitempty"`
}

// DeploymentHibernationStatusNextEventType Represents the type of the scheduled event for the deployment, one of HIBERNATE or WAKE
type DeploymentHibernationStatusNextEventType string

// DeploymentIncident defines model for DeploymentIncident.
type DeploymentIncident struct {
	CreatedAt     time.Time                  `json:"createdAt"`
	DeploymentId  string                     `json:"deploymentId"`
	Description   string                     `json:"description"`
	EnabledForOrg bool                       `json:"enabledForOrg"`
	IncidentData  *map[string]interface{}    `json:"incidentData,omitempty"`
	IncidentType  string                     `json:"incidentType"`
	ResolvedAt    *time.Time                 `json:"resolvedAt,omitempty"`
	Severity      DeploymentIncidentSeverity `json:"severity"`
	Subject       string                     `json:"subject"`
	UpdatedAt     *time.Time                 `json:"updatedAt,omitempty"`
	WorkspaceId   *string                    `json:"workspaceId,omitempty"`
}

// DeploymentIncidentSeverity defines model for DeploymentIncident.Severity.
type DeploymentIncidentSeverity string

// DeploymentInfo defines model for DeploymentInfo.
type DeploymentInfo struct {
	AirflowStatus *map[string]interface{} `json:"airflowStatus,omitempty"`
	Scaling       *map[string]interface{} `json:"scaling,omitempty"`
}

// DeploymentInstanceSpecRequest defines model for DeploymentInstanceSpecRequest.
type DeploymentInstanceSpecRequest struct {
	Au       int `json:"au"`
	Replicas int `json:"replicas"`
}

// DeploymentLog defines model for DeploymentLog.
type DeploymentLog struct {
	Limit         int                  `json:"limit"`
	MaxNumResults int                  `json:"maxNumResults"`
	Offset        int                  `json:"offset"`
	ResultCount   int                  `json:"resultCount"`
	Results       []DeploymentLogEntry `json:"results"`
	SearchId      string               `json:"searchId"`
}

// DeploymentLogEntry defines model for DeploymentLogEntry.
type DeploymentLogEntry struct {
	Raw       string                   `json:"raw"`
	Source    DeploymentLogEntrySource `json:"source"`
	Timestamp float32                  `json:"timestamp"`
}

// DeploymentLogEntrySource defines model for DeploymentLogEntry.Source.
type DeploymentLogEntrySource string

// DeploymentOptions defines model for DeploymentOptions.
type DeploymentOptions struct {
	DefaultValues           DefaultValueOptions       `json:"defaultValues"`
	Executors               []string                  `json:"executors"`
	LegacyAstro             LegacyAstroOptions        `json:"legacyAstro"`
	ResourceQuotas          ResourceQuotaOptions      `json:"resourceQuotas"`
	RuntimeReleases         []RuntimeRelease          `json:"runtimeReleases"`
	SchedulerMachines       []SchedulerMachine        `json:"schedulerMachines"`
	WorkerMachines          []WorkerMachine           `json:"workerMachines"`
	WorkerQueues            WorkerQueueOptions        `json:"workerQueues"`
	WorkloadIdentityOptions *[]WorkloadIdentityOption `json:"workloadIdentityOptions,omitempty"`
}

// DeploymentRepositoryPath defines model for DeploymentRepositoryPath.
type DeploymentRepositoryPath struct {
	GitAccount    string                              `json:"gitAccount"`
	GitPath       *string                             `json:"gitPath,omitempty"`
	GitProvider   DeploymentRepositoryPathGitProvider `json:"gitProvider"`
	GitRepository string                              `json:"gitRepository"`
}

// DeploymentRepositoryPathGitProvider defines model for DeploymentRepositoryPath.GitProvider.
type DeploymentRepositoryPathGitProvider string

// DeploymentScalingSpec defines model for DeploymentScalingSpec.
type DeploymentScalingSpec struct {
	HibernationSpec *DeploymentHibernationSpec `json:"hibernationSpec,omitempty"`
}

// DeploymentScalingSpecRequest defines model for DeploymentScalingSpecRequest.
type DeploymentScalingSpecRequest struct {
	HibernationSpec *DeploymentHibernationSpecRequest `json:"hibernationSpec,omitempty"`
}

// DeploymentScalingStatus defines model for DeploymentScalingStatus.
type DeploymentScalingStatus struct {
	HibernationStatus *DeploymentHibernationStatus `json:"hibernationStatus,omitempty"`
}

// DeploymentsPaginated defines model for DeploymentsPaginated.
type DeploymentsPaginated struct {
	Deployments []Deployment `json:"deployments"`
	Limit       int          `json:"limit"`
	Offset      int          `json:"offset"`
	TotalCount  int          `json:"totalCount"`
}

// DeploysPaginated defines model for DeploysPaginated.
type DeploysPaginated struct {
	Deploys    []Deploy `json:"deploys"`
	Limit      int      `json:"limit"`
	Offset     int      `json:"offset"`
	TotalCount int      `json:"totalCount"`
}

// Entitlement defines model for Entitlement.
type Entitlement struct {
	IsEnabled    bool                    `json:"isEnabled"`
	RequiredPlan EntitlementRequiredPlan `json:"requiredPlan"`
}

// EntitlementRequiredPlan defines model for Entitlement.RequiredPlan.
type EntitlementRequiredPlan string

// EnvironmentObject defines model for EnvironmentObject.
type EnvironmentObject struct {
	AirflowVariable     *EnvironmentObjectAirflowVariable `json:"airflowVariable,omitempty"`
	AutoLinkDeployments *bool                             `json:"autoLinkDeployments,omitempty"`
	Connection          *EnvironmentObjectConnection      `json:"connection,omitempty"`
	CreatedAt           *string                           `json:"createdAt,omitempty"`
	CreatedBy           *BasicSubjectProfile              `json:"createdBy,omitempty"`
	Id                  *string                           `json:"id,omitempty"`
	Links               *[]EnvironmentObjectLink          `json:"links,omitempty"`
	ObjectKey           string                            `json:"objectKey"`
	ObjectType          EnvironmentObjectObjectType       `json:"objectType"`
	Scope               EnvironmentObjectScope            `json:"scope"`
	ScopeEntityId       string                            `json:"scopeEntityId"`
	UpdatedAt           *string                           `json:"updatedAt,omitempty"`
	UpdatedBy           *BasicSubjectProfile              `json:"updatedBy,omitempty"`
}

// EnvironmentObjectObjectType defines model for EnvironmentObject.ObjectType.
type EnvironmentObjectObjectType string

// EnvironmentObjectScope defines model for EnvironmentObject.Scope.
type EnvironmentObjectScope string

// EnvironmentObjectAirflowVariable defines model for EnvironmentObjectAirflowVariable.
type EnvironmentObjectAirflowVariable struct {
	IsSecret bool   `json:"isSecret"`
	Value    string `json:"value"`
}

// EnvironmentObjectAirflowVariableOverrides defines model for EnvironmentObjectAirflowVariableOverrides.
type EnvironmentObjectAirflowVariableOverrides struct {
	Value string `json:"value"`
}

// EnvironmentObjectConnection defines model for EnvironmentObjectConnection.
type EnvironmentObjectConnection struct {
	ConnectionAuthType *ConnectionAuthType     `json:"connectionAuthType,omitempty"`
	Extra              *map[string]interface{} `json:"extra,omitempty"`
	Host               *string                 `json:"host,omitempty"`
	Login              *string                 `json:"login,omitempty"`
	Password           *string                 `json:"password,omitempty"`
	Port               *int                    `json:"port,omitempty"`
	Schema             *string                 `json:"schema,omitempty"`
	Type               string                  `json:"type"`
}

// EnvironmentObjectConnectionOverrides defines model for EnvironmentObjectConnectionOverrides.
type EnvironmentObjectConnectionOverrides struct {
	Extra    *map[string]interface{} `json:"extra,omitempty"`
	Host     *string                 `json:"host,omitempty"`
	Login    *string                 `json:"login,omitempty"`
	Password *string                 `json:"password,omitempty"`
	Port     *int                    `json:"port,omitempty"`
	Schema   *string                 `json:"schema,omitempty"`
	Type     *string                 `json:"type,omitempty"`
}

// EnvironmentObjectLink defines model for EnvironmentObjectLink.
type EnvironmentObjectLink struct {
	AirflowVariableOverrides *EnvironmentObjectAirflowVariableOverrides `json:"airflowVariableOverrides,omitempty"`
	ConnectionOverrides      *EnvironmentObjectConnectionOverrides      `json:"connectionOverrides,omitempty"`
	Scope                    EnvironmentObjectLinkScope                 `json:"scope"`
	ScopeEntityId            string                                     `json:"scopeEntityId"`
}

// EnvironmentObjectLinkScope defines model for EnvironmentObjectLink.Scope.
type EnvironmentObjectLinkScope string

// EnvironmentObjectsPaginated defines model for EnvironmentObjectsPaginated.
type EnvironmentObjectsPaginated struct {
	EnvironmentObjects []EnvironmentObject `json:"environmentObjects"`
	Limit              int                 `json:"limit"`
	Offset             int                 `json:"offset"`
	TotalCount         int                 `json:"totalCount"`
}

// EnvironmentSignatures defines model for EnvironmentSignatures.
type EnvironmentSignatures struct {
	AirflowVariables *string `json:"airflowVariables,omitempty"`
	Connections      *string `json:"connections,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Message    string `json:"message"`
	RequestId  string `json:"requestId"`
	StatusCode int    `json:"statusCode"`
}

// FeatureFlag defines model for FeatureFlag.
type FeatureFlag struct {
	Key   string `json:"key"`
	Value bool   `json:"value"`
}

// GenericJSON defines model for GenericJSON.
type GenericJSON map[string]interface{}

// GitApplicationAuthorization defines model for GitApplicationAuthorization.
type GitApplicationAuthorization struct {
	Url string `json:"url"`
}

// GitApplicationInstallation defines model for GitApplicationInstallation.
type GitApplicationInstallation struct {
	Url string `json:"url"`
}

// GitHubAccount defines model for GitHubAccount.
type GitHubAccount struct {
	AccountName string                   `json:"accountName"`
	AccountType GitHubAccountAccountType `json:"accountType"`
	AvatarUrl   *string                  `json:"avatarUrl,omitempty"`
	Company     *string                  `json:"company,omitempty"`
	DisplayName *string                  `json:"displayName,omitempty"`
}

// GitHubAccountAccountType defines model for GitHubAccount.AccountType.
type GitHubAccountAccountType string

// GitRepository defines model for GitRepository.
type GitRepository struct {
	Account           string `json:"account"`
	FullName          string `json:"fullName"`
	HasPullPermission bool   `json:"hasPullPermission"`
	HasPushPermission bool   `json:"hasPushPermission"`
	Name              string `json:"name"`
	UserIsAdmin       bool   `json:"userIsAdmin"`
}

// HibernationStatus defines model for HibernationStatus.
type HibernationStatus struct {
	IsHibernating *bool      `json:"isHibernating,omitempty"`
	NextEventAt   *time.Time `json:"nextEventAt,omitempty"`
	NextEventType *string    `json:"nextEventType,omitempty"`
	Reason        *string    `json:"reason,omitempty"`
}

// Invite defines model for Invite.
type Invite struct {
	ExpiresAt     string              `json:"expiresAt"`
	InviteId      string              `json:"inviteId"`
	Invitee       BasicSubjectProfile `json:"invitee"`
	Inviter       BasicSubjectProfile `json:"inviter"`
	OAuthInviteId *string             `json:"oAuthInviteId,omitempty"`

	// OrgName Deprecated: orgName has been replaced with organizationName
	OrgName *string `json:"orgName,omitempty"`

	// OrgShortName Deprecated: orgShortName has been replaced with organizationShortName
	OrgShortName          *string `json:"orgShortName,omitempty"`
	OrganizationId        string  `json:"organizationId"`
	OrganizationName      *string `json:"organizationName,omitempty"`
	OrganizationShortName *string `json:"organizationShortName,omitempty"`
	TicketId              *string `json:"ticketId,omitempty"`
	UserId                *string `json:"userId,omitempty"`
}

// LegacyAstroOptions defines model for LegacyAstroOptions.
type LegacyAstroOptions struct {
	AstroUnitCpuMilli       float32 `json:"astroUnitCpuMilli"`
	AstroUnitMemoryMiB      float32 `json:"astroUnitMemoryMiB"`
	SchedulerAstroUnitRange Range   `json:"schedulerAstroUnitRange"`
	SchedulerReplicaRange   Range   `json:"schedulerReplicaRange"`
}

// ListApiTokensPaginated defines model for ListApiTokensPaginated.
type ListApiTokensPaginated struct {
	ApiTokens  []ApiToken `json:"apiTokens"`
	Limit      int        `json:"limit"`
	Offset     int        `json:"offset"`
	TotalCount int        `json:"totalCount"`
}

// ListWorkspaceDags defines model for ListWorkspaceDags.
type ListWorkspaceDags struct {
	Items          []WorkspaceDag `json:"items"`
	NextCursor     *string        `json:"nextCursor,omitempty"`
	PreviousCursor *string        `json:"previousCursor,omitempty"`
	TotalCount     *int           `json:"totalCount,omitempty"`
	Warnings       *[]string      `json:"warnings,omitempty"`
}

// MachineSpec defines model for MachineSpec.
type MachineSpec struct {
	Concurrency *float32 `json:"concurrency,omitempty"`

	// Cpu A slice of CPU expressed in number of cores.
	Cpu string `json:"cpu"`

	// EphemeralStorage A slice of Ephemeral Storage expressed in Gibibytes (Gi).
	EphemeralStorage *string `json:"ephemeralStorage,omitempty"`

	// Memory A slice of Memory expressed in Gibibytes (Gi).
	Memory string `json:"memory"`
}

// ManagedDomain defines model for ManagedDomain.
type ManagedDomain struct {
	CreatedAt      time.Time           `json:"createdAt"`
	EnforcedLogins *[]string           `json:"enforcedLogins,omitempty"`
	Id             string              `json:"id"`
	Name           string              `json:"name"`
	OrganizationId string              `json:"organizationId"`
	Status         ManagedDomainStatus `json:"status"`
	UpdatedAt      time.Time           `json:"updatedAt"`
}

// ManagedDomainStatus defines model for ManagedDomain.Status.
type ManagedDomainStatus string

// MutateDeploymentTeamRoleRequest defines model for MutateDeploymentTeamRoleRequest.
type MutateDeploymentTeamRoleRequest struct {
	Role string `json:"role"`
}

// MutateDeploymentUserRoleRequest defines model for MutateDeploymentUserRoleRequest.
type MutateDeploymentUserRoleRequest struct {
	Role string `json:"role"`
}

// MutateOrgTeamRoleRequest defines model for MutateOrgTeamRoleRequest.
type MutateOrgTeamRoleRequest struct {
	Role string `json:"role"`
}

// MutateOrgUserRoleRequest defines model for MutateOrgUserRoleRequest.
type MutateOrgUserRoleRequest struct {
	Role string `json:"role"`
}

// MutateWorkerQueueRequest defines model for MutateWorkerQueueRequest.
type MutateWorkerQueueRequest struct {
	AstroMachine        *MutateWorkerQueueRequestAstroMachine `json:"astroMachine,omitempty"`
	Id                  *string                               `json:"id,omitempty"`
	IsDefault           bool                                  `json:"isDefault"`
	MaxWorkerCount      int                                   `json:"maxWorkerCount"`
	MinWorkerCount      int                                   `json:"minWorkerCount"`
	Name                string                                `json:"name"`
	NodePoolId          *string                               `json:"nodePoolId,omitempty"`
	PodEphemeralStorage *string                               `json:"podEphemeralStorage,omitempty"`
	WorkerConcurrency   int                                   `json:"workerConcurrency"`
}

// MutateWorkerQueueRequestAstroMachine defines model for MutateWorkerQueueRequest.AstroMachine.
type MutateWorkerQueueRequestAstroMachine string

// MutateWorkspaceTeamRoleRequest defines model for MutateWorkspaceTeamRoleRequest.
type MutateWorkspaceTeamRoleRequest struct {
	Role string `json:"role"`
}

// MutateWorkspaceUserRoleRequest defines model for MutateWorkspaceUserRoleRequest.
type MutateWorkspaceUserRoleRequest struct {
	Role string `json:"role"`
}

// NodePool defines model for NodePool.
type NodePool struct {
	CloudProvider          string    `json:"cloudProvider"`
	ClusterId              string    `json:"clusterId"`
	CreatedAt              time.Time `json:"createdAt"`
	Id                     string    `json:"id"`
	IsDefault              bool      `json:"isDefault"`
	MaxNodeCount           int       `json:"maxNodeCount"`
	Name                   string    `json:"name"`
	NodeInstanceType       string    `json:"nodeInstanceType"`
	SupportedAstroMachines *[]string `json:"supportedAstroMachines,omitempty"`
	UpdatedAt              time.Time `json:"updatedAt"`
}

// Organization defines model for Organization.
type Organization struct {
	AuthServiceId              string                     `json:"authServiceId"`
	AzurePlanId                *string                    `json:"azurePlanId,omitempty"`
	AzureSubscriptionId        *string                    `json:"azureSubscriptionId,omitempty"`
	BillingEmail               *string                    `json:"billingEmail,omitempty"`
	CreatedAt                  time.Time                  `json:"createdAt"`
	CreatedBy                  *string                    `json:"createdBy,omitempty"`
	CreatedBySubject           *BasicSubjectProfile       `json:"createdBySubject,omitempty"`
	Domains                    *[]string                  `json:"domains,omitempty"`
	Entitlements               *map[string]Entitlement    `json:"entitlements,omitempty"`
	EnvironmentSecretsShowable bool                       `json:"environmentSecretsShowable"`
	Id                         string                     `json:"id"`
	IsAzureManaged             *bool                      `json:"isAzureManaged,omitempty"`
	IsEgressChargebackEnabled  *bool                      `json:"isEgressChargebackEnabled,omitempty"`
	IsScimEnabled              bool                       `json:"isScimEnabled"`
	ManagedDomains             *[]ManagedDomain           `json:"managedDomains,omitempty"`
	MetronomeId                *string                    `json:"metronomeId,omitempty"`
	MetronomePlanId            *string                    `json:"metronomePlanId,omitempty"`
	Name                       string                     `json:"name"`
	PaymentMethod              *OrganizationPaymentMethod `json:"paymentMethod,omitempty"`
	Product                    *OrganizationProduct       `json:"product,omitempty"`
	SalesforceId               *string                    `json:"salesforceId,omitempty"`
	ShortName                  string                     `json:"shortName"`
	Status                     *OrganizationStatus        `json:"status,omitempty"`
	StripeId                   *string                    `json:"stripeId,omitempty"`
	StripePaymentMethodId      *string                    `json:"stripePaymentMethodId,omitempty"`
	SupportPlan                OrganizationSupportPlan    `json:"supportPlan"`
	TrialExpiresAt             *time.Time                 `json:"trialExpiresAt,omitempty"`
	UpdatedAt                  time.Time                  `json:"updatedAt"`
	UpdatedBy                  *string                    `json:"updatedBy,omitempty"`
	UpdatedBySubject           *BasicSubjectProfile       `json:"updatedBySubject,omitempty"`
	UsesCustomMetronomePlan    *bool                      `json:"usesCustomMetronomePlan,omitempty"`
}

// OrganizationPaymentMethod defines model for Organization.PaymentMethod.
type OrganizationPaymentMethod string

// OrganizationProduct defines model for Organization.Product.
type OrganizationProduct string

// OrganizationStatus defines model for Organization.Status.
type OrganizationStatus string

// OrganizationSupportPlan defines model for Organization.SupportPlan.
type OrganizationSupportPlan string

// ProviderInstanceType defines model for ProviderInstanceType.
type ProviderInstanceType struct {
	Cpu  int    `json:"cpu"`
	Name string `json:"name"`
	Ram  string `json:"ram"`
}

// ProviderRegion defines model for ProviderRegion.
type ProviderRegion struct {
	BannedInstances *[]string `json:"bannedInstances,omitempty"`
	Limited         *bool     `json:"limited,omitempty"`
	Name            string    `json:"name"`
}

// Range defines model for Range.
type Range struct {
	Ceiling float32 `json:"ceiling"`
	Default float32 `json:"default"`
	Floor   float32 `json:"floor"`
}

// RelativeDeltaSchema defines model for RelativeDeltaSchema.
type RelativeDeltaSchema struct {
	Day          *int32   `json:"day,omitempty"`
	Days         *int32   `json:"days,omitempty"`
	Dt1          *string  `json:"dt1,omitempty"`
	Dt2          *string  `json:"dt2,omitempty"`
	Hour         *int32   `json:"hour,omitempty"`
	Hours        *int32   `json:"hours,omitempty"`
	Leapdays     *int32   `json:"leapdays,omitempty"`
	Microsecond  *int32   `json:"microsecond,omitempty"`
	Microseconds *int32   `json:"microseconds,omitempty"`
	Minute       *int32   `json:"minute,omitempty"`
	Minutes      *int32   `json:"minutes,omitempty"`
	Month        *int32   `json:"month,omitempty"`
	Months       *int32   `json:"months,omitempty"`
	Nlyearday    *int32   `json:"nlyearday,omitempty"`
	Second       *int32   `json:"second,omitempty"`
	Seconds      *int32   `json:"seconds,omitempty"`
	Weekday      *Weekday `json:"weekday,omitempty"`
	Weeks        *int32   `json:"weeks,omitempty"`
	Year         *int32   `json:"year,omitempty"`
	Yearday      *int32   `json:"yearday,omitempty"`
	Years        *int32   `json:"years,omitempty"`
}

// RepositoriesPaginated defines model for RepositoriesPaginated.
type RepositoriesPaginated struct {
	HasNextPage  bool            `json:"hasNextPage"`
	Page         int             `json:"page"`
	PerPage      int             `json:"perPage"`
	Repositories []GitRepository `json:"repositories"`
}

// RepositoryBranch defines model for RepositoryBranch.
type RepositoryBranch struct {
	Name string `json:"name"`
}

// ResourceOption defines model for ResourceOption.
type ResourceOption struct {
	Cpu    ResourceRange `json:"cpu"`
	Memory ResourceRange `json:"memory"`
}

// ResourceQuotaOptions defines model for ResourceQuotaOptions.
type ResourceQuotaOptions struct {
	DefaultPodSize DefaultPodSizeOption `json:"defaultPodSize"`
	ResourceQuota  ResourceOption       `json:"resourceQuota"`
}

// ResourceRange defines model for ResourceRange.
type ResourceRange struct {
	Ceiling string `json:"ceiling"`
	Default string `json:"default"`
	Floor   string `json:"floor"`
}

// Role defines model for Role.
type Role struct {
	CreatedAt              string              `json:"createdAt"`
	CreatedBy              BasicSubjectProfile `json:"createdBy"`
	Description            *string             `json:"description,omitempty"`
	Id                     string              `json:"id"`
	Name                   string              `json:"name"`
	RestrictedWorkspaceIds []string            `json:"restrictedWorkspaceIds"`
	ScopeType              RoleScopeType       `json:"scopeType"`
	UpdatedAt              string              `json:"updatedAt"`
	UpdatedBy              BasicSubjectProfile `json:"updatedBy"`
}

// RoleScopeType defines model for Role.ScopeType.
type RoleScopeType string

// RoleBinding defines model for RoleBinding.
type RoleBinding struct {
	CreatedAt         string                 `json:"createdAt"`
	EntityId          string                 `json:"entityId"`
	EntityName        string                 `json:"entityName"`
	EntityType        RoleBindingEntityType  `json:"entityType"`
	EntityWorkspaceId string                 `json:"entityWorkspaceId"`
	RoleId            string                 `json:"roleId"`
	RoleName          string                 `json:"roleName"`
	SubjectId         string                 `json:"subjectId"`
	SubjectName       string                 `json:"subjectName"`
	SubjectType       RoleBindingSubjectType `json:"subjectType"`
	UpdatedAt         string                 `json:"updatedAt"`
}

// RoleBindingEntityType defines model for RoleBinding.EntityType.
type RoleBindingEntityType string

// RoleBindingSubjectType defines model for RoleBinding.SubjectType.
type RoleBindingSubjectType string

// RoleBindingsPaginated defines model for RoleBindingsPaginated.
type RoleBindingsPaginated struct {
	Limit        int           `json:"limit"`
	Offset       int           `json:"offset"`
	RoleBindings []RoleBinding `json:"roleBindings"`
	TotalCount   int           `json:"totalCount"`
}

// RoleTemplate defines model for RoleTemplate.
type RoleTemplate struct {
	Description *string               `json:"description,omitempty"`
	Name        string                `json:"name"`
	Permissions []string              `json:"permissions"`
	ScopeType   RoleTemplateScopeType `json:"scopeType"`
}

// RoleTemplateScopeType defines model for RoleTemplate.ScopeType.
type RoleTemplateScopeType string

// RoleWithPermission defines model for RoleWithPermission.
type RoleWithPermission struct {
	CreatedAt              string                      `json:"createdAt"`
	CreatedBy              BasicSubjectProfile         `json:"createdBy"`
	Description            *string                     `json:"description,omitempty"`
	Id                     string                      `json:"id"`
	Name                   string                      `json:"name"`
	Permissions            []string                    `json:"permissions"`
	RestrictedWorkspaceIds []string                    `json:"restrictedWorkspaceIds"`
	ScopeType              RoleWithPermissionScopeType `json:"scopeType"`
	UpdatedAt              string                      `json:"updatedAt"`
	UpdatedBy              BasicSubjectProfile         `json:"updatedBy"`
}

// RoleWithPermissionScopeType defines model for RoleWithPermission.ScopeType.
type RoleWithPermissionScopeType string

// RolesPaginated defines model for RolesPaginated.
type RolesPaginated struct {
	DefaultRoles *[]DefaultRole `json:"defaultRoles,omitempty"`
	Limit        int            `json:"limit"`
	Offset       int            `json:"offset"`
	Roles        []Role         `json:"roles"`
	TotalCount   int            `json:"totalCount"`
}

// RuntimeRelease defines model for RuntimeRelease.
type RuntimeRelease struct {
	AirflowDatabaseMigration bool   `json:"airflowDatabaseMigration"`
	AirflowVersion           string `json:"airflowVersion"`
	Channel                  string `json:"channel"`
	ReleaseDate              string `json:"releaseDate"`
	StellarDatabaseMigration bool   `json:"stellarDatabaseMigration"`
	Version                  string `json:"version"`
}

// SchedulerMachine defines model for SchedulerMachine.
type SchedulerMachine struct {
	// Name The name of this machine.
	Name SchedulerMachineName `json:"name"`
	Spec MachineSpec          `json:"spec"`
}

// SchedulerMachineName The name of this machine.
type SchedulerMachineName string

// Scope defines model for Scope.
type Scope struct {
	EntityId string `json:"entityId"`
	Type     string `json:"type"`
}

// Self defines model for Self.
type Self struct {
	AvatarUrl           string           `json:"avatarUrl"`
	ColorModePreference *string          `json:"colorModePreference,omitempty"`
	CreatedAt           time.Time        `json:"createdAt"`
	FeatureFlags        *[]FeatureFlag   `json:"featureFlags,omitempty"`
	FullName            string           `json:"fullName"`
	GitHubAccounts      *[]GitHubAccount `json:"gitHubAccounts,omitempty"`
	Id                  string           `json:"id"`
	IntercomUserHash    *string          `json:"intercomUserHash,omitempty"`
	Invites             *[]Invite        `json:"invites,omitempty"`
	OrganizationId      *string          `json:"organizationId,omitempty"`
	Roles               *[]UserRole      `json:"roles,omitempty"`
	SignupType          *SelfSignupType  `json:"signupType,omitempty"`
	Status              string           `json:"status"`
	SystemRole          *string          `json:"systemRole,omitempty"`
	UpdatedAt           time.Time        `json:"updatedAt"`
	Username            string           `json:"username"`
}

// SelfSignupType defines model for Self.SignupType.
type SelfSignupType string

// SharedCluster defines model for SharedCluster.
type SharedCluster struct {
	CloudProvider       SharedClusterCloudProvider `json:"cloudProvider"`
	Cohort              *string                    `json:"cohort,omitempty"`
	CreatedAt           time.Time                  `json:"createdAt"`
	DbInstanceType      string                     `json:"dbInstanceType"`
	DbInstanceVersion   string                     `json:"dbInstanceVersion"`
	Id                  string                     `json:"id"`
	IsCordoned          *bool                      `json:"isCordoned,omitempty"`
	IsDryRun            bool                       `json:"isDryRun"`
	Metadata            ClusterMetadata            `json:"metadata"`
	Name                string                     `json:"name"`
	PodSubnetRange      string                     `json:"podSubnetRange"`
	Region              string                     `json:"region"`
	ServicePeeringRange string                     `json:"servicePeeringRange"`
	ServiceSubnetRange  string                     `json:"serviceSubnetRange"`
	Status              SharedClusterStatus        `json:"status"`
	TemplateVersion     string                     `json:"templateVersion"`
	UpdatedAt           time.Time                  `json:"updatedAt"`
	VpcSubnetRange      string                     `json:"vpcSubnetRange"`
}

// SharedClusterCloudProvider defines model for SharedCluster.CloudProvider.
type SharedClusterCloudProvider string

// SharedClusterStatus defines model for SharedCluster.Status.
type SharedClusterStatus string

// Subject defines model for Subject.
type Subject struct {
	EntityId string `json:"entityId"`
	Type     string `json:"type"`
}

// Team defines model for Team.
type Team struct {
	CreatedAt        time.Time             `json:"createdAt"`
	CreatedBy        *BasicSubjectProfile  `json:"createdBy,omitempty"`
	DeploymentRoles  *[]TeamDeploymentRole `json:"deploymentRoles,omitempty"`
	Description      *string               `json:"description,omitempty"`
	Id               string                `json:"id"`
	IsIdpManaged     bool                  `json:"isIdpManaged"`
	Members          *[]TeamMember         `json:"members,omitempty"`
	MembersCount     *int                  `json:"membersCount,omitempty"`
	Name             string                `json:"name"`
	OrganizationId   string                `json:"organizationId"`
	OrganizationName *string               `json:"organizationName,omitempty"`
	OrganizationRole string                `json:"organizationRole"`
	Roles            *[]TeamRole           `json:"roles,omitempty"`
	UpdatedAt        time.Time             `json:"updatedAt"`
	UpdatedBy        *BasicSubjectProfile  `json:"updatedBy,omitempty"`
	WorkspaceRoles   *[]TeamWorkspaceRole  `json:"workspaceRoles,omitempty"`
}

// TeamDeploymentRole defines model for TeamDeploymentRole.
type TeamDeploymentRole struct {
	DeploymentId string `json:"deploymentId"`
	Role         string `json:"role"`
}

// TeamMember defines model for TeamMember.
type TeamMember struct {
	AvatarUrl *string `json:"avatarUrl,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	FullName  *string `json:"fullName,omitempty"`
	UserId    string  `json:"userId"`
	Username  string  `json:"username"`
}

// TeamRole defines model for TeamRole.
type TeamRole struct {
	EntityId   string `json:"entityId"`
	EntityType string `json:"entityType"`
	Role       string `json:"role"`
}

// TeamWorkspaceRole defines model for TeamWorkspaceRole.
type TeamWorkspaceRole struct {
	Role        string `json:"role"`
	WorkspaceId string `json:"workspaceId"`
}

// TeamsPaginated defines model for TeamsPaginated.
type TeamsPaginated struct {
	Limit      int    `json:"limit"`
	Offset     int    `json:"offset"`
	Teams      []Team `json:"teams"`
	TotalCount int    `json:"totalCount"`
}

// TemplateVersion defines model for TemplateVersion.
type TemplateVersion struct {
	Url     *string `json:"url,omitempty"`
	Version string  `json:"version"`
}

// TimeDeltaSchema defines model for TimeDeltaSchema.
type TimeDeltaSchema struct {
	Days         int32 `json:"days"`
	Microseconds int32 `json:"microseconds"`
	Seconds      int32 `json:"seconds"`
}

// TransferDeploymentRequest defines model for TransferDeploymentRequest.
type TransferDeploymentRequest struct {
	TargetWorkspaceId string `json:"targetWorkspaceId"`
}

// UpdateAwsClusterRequest defines model for UpdateAwsClusterRequest.
type UpdateAwsClusterRequest struct {
	DbInstanceType    string                  `json:"dbInstanceType"`
	DbInstanceVersion *string                 `json:"dbInstanceVersion,omitempty"`
	K8sTags           []ClusterTag            `json:"k8sTags"`
	Name              string                  `json:"name"`
	NodePools         []UpdateNodePoolRequest `json:"nodePools"`
	TemplateVersion   string                  `json:"templateVersion"`
	Workspaces        *[]string               `json:"workspaces,omitempty"`
}

// UpdateAzureClusterRequest defines model for UpdateAzureClusterRequest.
type UpdateAzureClusterRequest struct {
	DbInstanceType    string                  `json:"dbInstanceType"`
	DbInstanceVersion *string                 `json:"dbInstanceVersion,omitempty"`
	K8sTags           []ClusterTag            `json:"k8sTags"`
	Name              string                  `json:"name"`
	NodePools         []UpdateNodePoolRequest `json:"nodePools"`
	TemplateVersion   string                  `json:"templateVersion"`
	Workspaces        *[]string               `json:"workspaces,omitempty"`
}

// UpdateCustomRoleRequest defines model for UpdateCustomRoleRequest.
type UpdateCustomRoleRequest struct {
	Description            *string   `json:"description,omitempty"`
	Name                   string    `json:"name"`
	Permissions            []string  `json:"permissions"`
	RestrictedWorkspaceIds *[]string `json:"restrictedWorkspaceIds,omitempty"`
}

// UpdateDeployRequest defines model for UpdateDeployRequest.
type UpdateDeployRequest struct {
	// DagTarballVersion Required if DAG deploy is enabled on the deployment
	DagTarballVersion *string `json:"dagTarballVersion,omitempty"`
}

// UpdateDeploymentApiTokenRequest defines model for UpdateDeploymentApiTokenRequest.
type UpdateDeploymentApiTokenRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	Role        string `json:"role"`
}

// UpdateDeploymentRequest defines model for UpdateDeploymentRequest.
type UpdateDeploymentRequest struct {
	union json.RawMessage
}

// UpdateEnvironmentObjectAirflowVariableOverridesRequest defines model for UpdateEnvironmentObjectAirflowVariableOverridesRequest.
type UpdateEnvironmentObjectAirflowVariableOverridesRequest struct {
	Value *string `json:"value,omitempty"`
}

// UpdateEnvironmentObjectAirflowVariableRequest defines model for UpdateEnvironmentObjectAirflowVariableRequest.
type UpdateEnvironmentObjectAirflowVariableRequest struct {
	Value *string `json:"value,omitempty"`
}

// UpdateEnvironmentObjectConnectionOverridesRequest defines model for UpdateEnvironmentObjectConnectionOverridesRequest.
type UpdateEnvironmentObjectConnectionOverridesRequest struct {
	Extra    *map[string]interface{} `json:"extra,omitempty"`
	Host     *string                 `json:"host,omitempty"`
	Login    *string                 `json:"login,omitempty"`
	Password *string                 `json:"password,omitempty"`
	Port     *int                    `json:"port,omitempty"`
	Schema   *string                 `json:"schema,omitempty"`
	Type     *string                 `json:"type,omitempty"`
}

// UpdateEnvironmentObjectConnectionRequest defines model for UpdateEnvironmentObjectConnectionRequest.
type UpdateEnvironmentObjectConnectionRequest struct {
	AuthTypeId *string                 `json:"authTypeId,omitempty"`
	Extra      *map[string]interface{} `json:"extra,omitempty"`
	Host       *string                 `json:"host,omitempty"`
	Login      *string                 `json:"login,omitempty"`
	Password   *string                 `json:"password,omitempty"`
	Port       *int                    `json:"port,omitempty"`
	Schema     *string                 `json:"schema,omitempty"`
	Type       string                  `json:"type"`
}

// UpdateEnvironmentObjectLinkRequest defines model for UpdateEnvironmentObjectLinkRequest.
type UpdateEnvironmentObjectLinkRequest struct {
	Overrides     *UpdateEnvironmentObjectOverridesRequest `json:"overrides,omitempty"`
	Scope         UpdateEnvironmentObjectLinkRequestScope  `json:"scope"`
	ScopeEntityId string                                   `json:"scopeEntityId"`
}

// UpdateEnvironmentObjectLinkRequestScope defines model for UpdateEnvironmentObjectLinkRequest.Scope.
type UpdateEnvironmentObjectLinkRequestScope string

// UpdateEnvironmentObjectOverridesRequest defines model for UpdateEnvironmentObjectOverridesRequest.
type UpdateEnvironmentObjectOverridesRequest struct {
	AirflowVariable *UpdateEnvironmentObjectAirflowVariableOverridesRequest `json:"airflowVariable,omitempty"`
	Connection      *UpdateEnvironmentObjectConnectionOverridesRequest      `json:"connection,omitempty"`
}

// UpdateEnvironmentObjectRequest defines model for UpdateEnvironmentObjectRequest.
type UpdateEnvironmentObjectRequest struct {
	AirflowVariable     *UpdateEnvironmentObjectAirflowVariableRequest `json:"airflowVariable,omitempty"`
	AutoLinkDeployments *bool                                          `json:"autoLinkDeployments,omitempty"`
	Connection          *UpdateEnvironmentObjectConnectionRequest      `json:"connection,omitempty"`
	Links               *[]UpdateEnvironmentObjectLinkRequest          `json:"links,omitempty"`
	ObjectKey           string                                         `json:"objectKey"`
	ObjectType          UpdateEnvironmentObjectRequestObjectType       `json:"objectType"`
	Scope               UpdateEnvironmentObjectRequestScope            `json:"scope"`
	ScopeEntityId       string                                         `json:"scopeEntityId"`
}

// UpdateEnvironmentObjectRequestObjectType defines model for UpdateEnvironmentObjectRequest.ObjectType.
type UpdateEnvironmentObjectRequestObjectType string

// UpdateEnvironmentObjectRequestScope defines model for UpdateEnvironmentObjectRequest.Scope.
type UpdateEnvironmentObjectRequestScope string

// UpdateGcpClusterRequest defines model for UpdateGcpClusterRequest.
type UpdateGcpClusterRequest struct {
	DbInstanceType    string                  `json:"dbInstanceType"`
	DbInstanceVersion *string                 `json:"dbInstanceVersion,omitempty"`
	K8sTags           []ClusterTag            `json:"k8sTags"`
	Name              string                  `json:"name"`
	NodePools         []UpdateNodePoolRequest `json:"nodePools"`
	TemplateVersion   string                  `json:"templateVersion"`
	Workspaces        *[]string               `json:"workspaces,omitempty"`
}

// UpdateHostedDeploymentRequest defines model for UpdateHostedDeploymentRequest.
type UpdateHostedDeploymentRequest struct {
	ContactEmails *[]string `json:"contactEmails,omitempty"`

	// DefaultTaskPodCpu Must be valid kubernetes cpu resource string, at least 0.25 in terms of cpu cores
	DefaultTaskPodCpu string `json:"defaultTaskPodCpu"`

	// DefaultTaskPodEphemeralStorage Must be valid kubernetes ephemeral storage resource string, in terms of Gibibytes (GiB)
	DefaultTaskPodEphemeralStorage *string `json:"defaultTaskPodEphemeralStorage,omitempty"`

	// DefaultTaskPodMemory Must be valid kubernetes memory resource string, at least 0.5Gi in terms of Gibibytes (GiB)
	DefaultTaskPodMemory string  `json:"defaultTaskPodMemory"`
	Description          *string `json:"description,omitempty"`

	// EnvironmentVariables List of deployment environment variables
	EnvironmentVariables []DeploymentEnvironmentVariableRequest `json:"environmentVariables"`

	// Executor Airflow executors, supported: CELERY, KUBERNETES
	Executor           UpdateHostedDeploymentRequestExecutor `json:"executor"`
	IsCicdEnforced     bool                                  `json:"isCicdEnforced"`
	IsDagDeployEnabled bool                                  `json:"isDagDeployEnabled"`

	// IsHighAvailability If true, deployment will have backup components
	IsHighAvailability bool   `json:"isHighAvailability"`
	Name               string `json:"name"`

	// RepositoryBranch Branch of the repository path to use for Git deploys
	RepositoryBranch *string `json:"repositoryBranch,omitempty"`

	// RepositoryPathId The workspace's repository path to use for Git deploys
	RepositoryPathId *string `json:"repositoryPathId,omitempty"`

	// ResourceQuotaCpu Must be valid kubernetes cpu resource string, at least 1 in terms of cpu cores
	ResourceQuotaCpu string `json:"resourceQuotaCpu"`

	// ResourceQuotaMemory Must be valid kubernetes memory resource string, at least 2Gi in terms of Gibibytes (GiB)
	ResourceQuotaMemory string                        `json:"resourceQuotaMemory"`
	ScalingSpec         *DeploymentScalingSpecRequest `json:"scalingSpec,omitempty"`

	// SchedulerSize Size of scheduler, one of: SMALL, MEDIUM, LARGE
	SchedulerSize UpdateHostedDeploymentRequestSchedulerSize `json:"schedulerSize"`
	Type          UpdateHostedDeploymentRequestType          `json:"type"`

	// WorkerQueues Must be non-empty list of worker queues if deployment Airflow executor is Celery
	WorkerQueues     *[]MutateWorkerQueueRequest `json:"workerQueues,omitempty"`
	WorkloadIdentity *string                     `json:"workloadIdentity,omitempty"`
	WorkspaceId      string                      `json:"workspaceId"`
}

// UpdateHostedDeploymentRequestExecutor Airflow executors, supported: CELERY, KUBERNETES
type UpdateHostedDeploymentRequestExecutor string

// UpdateHostedDeploymentRequestSchedulerSize Size of scheduler, one of: SMALL, MEDIUM, LARGE
type UpdateHostedDeploymentRequestSchedulerSize string

// UpdateHostedDeploymentRequestType defines model for UpdateHostedDeploymentRequest.Type.
type UpdateHostedDeploymentRequestType string

// UpdateHybridDeploymentRequest defines model for UpdateHybridDeploymentRequest.
type UpdateHybridDeploymentRequest struct {
	ContactEmails *[]string `json:"contactEmails,omitempty"`
	Description   *string   `json:"description,omitempty"`

	// EnvironmentVariables List of deployment environment variables
	EnvironmentVariables []DeploymentEnvironmentVariableRequest `json:"environmentVariables"`

	// Executor Airflow executors, supported: CELERY, KUBERNETES
	Executor           UpdateHybridDeploymentRequestExecutor `json:"executor"`
	IsCicdEnforced     bool                                  `json:"isCicdEnforced"`
	IsDagDeployEnabled bool                                  `json:"isDagDeployEnabled"`
	Name               string                                `json:"name"`
	Scheduler          DeploymentInstanceSpecRequest         `json:"scheduler"`

	// TaskPodNodePoolId Must be non-empty if deployment Airflow executor is Kubernetes, ID of node pool to use for task pods
	TaskPodNodePoolId *string                           `json:"taskPodNodePoolId,omitempty"`
	Type              UpdateHybridDeploymentRequestType `json:"type"`

	// WorkerQueues Must be non-empty list of worker queues if deployment Airflow executor is Celery
	WorkerQueues     *[]MutateWorkerQueueRequest `json:"workerQueues,omitempty"`
	WorkloadIdentity *string                     `json:"workloadIdentity,omitempty"`
	WorkspaceId      string                      `json:"workspaceId"`
}

// UpdateHybridDeploymentRequestExecutor Airflow executors, supported: CELERY, KUBERNETES
type UpdateHybridDeploymentRequestExecutor string

// UpdateHybridDeploymentRequestType defines model for UpdateHybridDeploymentRequest.Type.
type UpdateHybridDeploymentRequestType string

// UpdateInviteRequest defines model for UpdateInviteRequest.
type UpdateInviteRequest struct {
	InviteStatus UpdateInviteRequestInviteStatus `json:"inviteStatus"`
}

// UpdateInviteRequestInviteStatus defines model for UpdateInviteRequest.InviteStatus.
type UpdateInviteRequestInviteStatus string

// UpdateNodePoolRequest defines model for UpdateNodePoolRequest.
type UpdateNodePoolRequest struct {
	Id               *string `json:"id,omitempty"`
	IsDefault        bool    `json:"isDefault"`
	MaxNodeCount     int     `json:"maxNodeCount"`
	Name             string  `json:"name"`
	NodeInstanceType string  `json:"nodeInstanceType"`
}

// UpdateOrganizationApiTokenRequest defines model for UpdateOrganizationApiTokenRequest.
type UpdateOrganizationApiTokenRequest struct {
	Description string                                 `json:"description"`
	Name        string                                 `json:"name"`
	Roles       UpdateOrganizationApiTokenRolesRequest `json:"roles"`
}

// UpdateOrganizationApiTokenRolesRequest defines model for UpdateOrganizationApiTokenRolesRequest.
type UpdateOrganizationApiTokenRolesRequest struct {
	Deployment   *[]ApiTokenDeploymentRoleRequest `json:"deployment,omitempty"`
	Organization string                           `json:"organization"`
	Workspace    *[]ApiTokenWorkspaceRoleRequest  `json:"workspace,omitempty"`
}

// UpdateOrganizationRequest defines model for UpdateOrganizationRequest.
type UpdateOrganizationRequest struct {
	BillingEmail               string `json:"billingEmail"`
	EnvironmentSecretsShowable *bool  `json:"environmentSecretsShowable,omitempty"`
	IsScimEnabled              bool   `json:"isScimEnabled"`
	Name                       string `json:"name"`
}

// UpdateTeamRequest defines model for UpdateTeamRequest.
type UpdateTeamRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// UpdateWorkspaceApiTokenRequest defines model for UpdateWorkspaceApiTokenRequest.
type UpdateWorkspaceApiTokenRequest struct {
	Description string                               `json:"description"`
	Name        string                               `json:"name"`
	Roles       *UpdateWorkspaceApiTokenRolesRequest `json:"roles,omitempty"`
}

// UpdateWorkspaceApiTokenRolesRequest defines model for UpdateWorkspaceApiTokenRolesRequest.
type UpdateWorkspaceApiTokenRolesRequest struct {
	Deployment *[]ApiTokenDeploymentRoleRequest `json:"deployment,omitempty"`
	Workspace  *string                          `json:"workspace,omitempty"`
}

// UpdateWorkspaceRequest defines model for UpdateWorkspaceRequest.
type UpdateWorkspaceRequest struct {
	ApiKeyOnlyDeploymentsDefault bool    `json:"apiKeyOnlyDeploymentsDefault"`
	Description                  *string `json:"description,omitempty"`
	Name                         string  `json:"name"`
}

// User defines model for User.
type User struct {
	AvatarUrl           string    `json:"avatarUrl"`
	ColorModePreference *string   `json:"colorModePreference,omitempty"`
	CreatedAt           time.Time `json:"createdAt"`

	// DeploymentCount Only shown if admin listing users
	DeploymentCount *int `json:"deploymentCount,omitempty"`

	// DeploymentRole Only shown if listing deployment users
	DeploymentRole *string   `json:"deploymentRole,omitempty"`
	FullName       string    `json:"fullName"`
	GitHubUsername *string   `json:"gitHubUsername,omitempty"`
	Id             string    `json:"id"`
	Invites        *[]Invite `json:"invites,omitempty"`

	// LastLogin Only shown if admin listing users
	LastLogin *string `json:"lastLogin,omitempty"`

	// LastLoginConnectionName Only shown if admin listing users
	LastLoginConnectionName *string `json:"lastLoginConnectionName,omitempty"`

	// LastLoginConnectionType Only shown if admin listing users
	LastLoginConnectionType *string `json:"lastLoginConnectionType,omitempty"`

	// LoginsCount Only shown if admin listing users
	LoginsCount *int `json:"loginsCount,omitempty"`

	// OrgCount Only shown if admin listing users
	OrgCount *int `json:"orgCount,omitempty"`

	// OrgRole Only shown if listing org users
	OrgRole *string `json:"orgRole,omitempty"`

	// OrgUserRelationIsIdpManaged Only shown if listing org users
	OrgUserRelationIsIdpManaged *bool `json:"orgUserRelationIsIdpManaged,omitempty"`

	// Roles Only shown if admin listing users
	Roles      *[]UserRole     `json:"roles,omitempty"`
	SignupType *UserSignupType `json:"signupType,omitempty"`
	Status     string          `json:"status"`

	// SystemRole Only shown if admin listing users
	SystemRole *string   `json:"systemRole,omitempty"`
	UpdatedAt  time.Time `json:"updatedAt"`
	Username   string    `json:"username"`

	// WorkspaceCount Only shown if admin listing users
	WorkspaceCount *int `json:"workspaceCount,omitempty"`

	// WorkspaceRole Only shown if listing workspace users
	WorkspaceRole *string `json:"workspaceRole,omitempty"`
}

// UserSignupType defines model for User.SignupType.
type UserSignupType string

// UserRole defines model for UserRole.
type UserRole struct {
	Role    string  `json:"role"`
	Scope   Scope   `json:"scope"`
	Subject Subject `json:"subject"`
}

// UsersPaginated defines model for UsersPaginated.
type UsersPaginated struct {
	Limit      int    `json:"limit"`
	Offset     int    `json:"offset"`
	TotalCount int    `json:"totalCount"`
	Users      []User `json:"users"`
}

// Weekday defines model for Weekday.
type Weekday struct {
	union json.RawMessage
}

// Weekday1 defines model for .
type Weekday1 = int32

// WeekdaySchema defines model for WeekdaySchema.
type WeekdaySchema struct {
	N       *int32 `json:"n,omitempty"`
	Weekday int32  `json:"weekday"`
}

// WorkerMachine defines model for WorkerMachine.
type WorkerMachine struct {
	Concurrency      Range         `json:"concurrency"`
	EphemeralStorage ResourceRange `json:"ephemeralStorage"`

	// Name The name of this machine.
	Name WorkerMachineName `json:"name"`
	Spec MachineSpec       `json:"spec"`
}

// WorkerMachineName The name of this machine.
type WorkerMachineName string

// WorkerQueue defines model for WorkerQueue.
type WorkerQueue struct {
	AstroMachine        *string `json:"astroMachine,omitempty"`
	Id                  string  `json:"id"`
	IsDefault           bool    `json:"isDefault"`
	MaxWorkerCount      int     `json:"maxWorkerCount"`
	MinWorkerCount      int     `json:"minWorkerCount"`
	Name                string  `json:"name"`
	NodePoolId          *string `json:"nodePoolId,omitempty"`
	PodCpu              string  `json:"podCpu"`
	PodEphemeralStorage *string `json:"podEphemeralStorage,omitempty"`
	PodRam              string  `json:"podRam"`
	WorkerConcurrency   int     `json:"workerConcurrency"`
}

// WorkerQueueOptions defines model for WorkerQueueOptions.
type WorkerQueueOptions struct {
	MaxWorkers        Range `json:"maxWorkers"`
	MinWorkers        Range `json:"minWorkers"`
	WorkerConcurrency Range `json:"workerConcurrency"`
}

// WorkloadIdentityOption defines model for WorkloadIdentityOption.
type WorkloadIdentityOption struct {
	Label string `json:"label"`
	Role  string `json:"role"`
}

// Workspace defines model for Workspace.
type Workspace struct {
	ApiKeyOnlyDeploymentsDefault bool                 `json:"apiKeyOnlyDeploymentsDefault"`
	CreatedAt                    time.Time            `json:"createdAt"`
	CreatedBy                    *BasicSubjectProfile `json:"createdBy,omitempty"`
	DeploymentCount              *int                 `json:"deploymentCount,omitempty"`
	Description                  *string              `json:"description,omitempty"`
	Id                           string               `json:"id"`
	Name                         string               `json:"name"`

	// OrgShortName Deprecated: orgShortName has been replaced with organizationShortName
	OrgShortName          *string              `json:"orgShortName,omitempty"`
	OrganizationId        string               `json:"organizationId"`
	OrganizationName      *string              `json:"organizationName,omitempty"`
	OrganizationShortName *string              `json:"organizationShortName,omitempty"`
	UpdatedAt             time.Time            `json:"updatedAt"`
	UpdatedBy             *BasicSubjectProfile `json:"updatedBy,omitempty"`
	UserCount             *int                 `json:"userCount,omitempty"`
}

// WorkspaceDag defines model for WorkspaceDag.
type WorkspaceDag struct {
	DagId                string             `json:"dagId"`
	DeploymentId         string             `json:"deploymentId"`
	IsActive             *bool              `json:"isActive,omitempty"`
	IsPaused             bool               `json:"isPaused"`
	NextRunAt            *time.Time         `json:"nextRunAt,omitempty"`
	Owners               *[]string          `json:"owners,omitempty"`
	Runs                 *[]WorkspaceDagRun `json:"runs,omitempty"`
	Schedule             *DagSchedule       `json:"schedule,omitempty"`
	Tags                 *[]string          `json:"tags,omitempty"`
	TimetableDescription *string            `json:"timetableDescription,omitempty"`
}

// WorkspaceDagRun defines model for WorkspaceDagRun.
type WorkspaceDagRun struct {
	DataIntervalEnd   *time.Time `json:"dataIntervalEnd"`
	DataIntervalStart *time.Time `json:"dataIntervalStart"`
	EndDate           *time.Time `json:"endDate"`
	LogicalDate       time.Time  `json:"logicalDate"`
	RunId             string     `json:"runId"`
	RunType           string     `json:"runType"`
	StartDate         *time.Time `json:"startDate"`
	State             string     `json:"state"`
}

// WorkspacesPaginated defines model for WorkspacesPaginated.
type WorkspacesPaginated struct {
	Limit      int         `json:"limit"`
	Offset     int         `json:"offset"`
	TotalCount int         `json:"totalCount"`
	Workspaces []Workspace `json:"workspaces"`
}

// GetSharedClusterParams defines parameters for GetSharedCluster.
type GetSharedClusterParams struct {
	// Region region
	Region string `form:"region" json:"region"`

	// CloudProvider cloud provider
	CloudProvider GetSharedClusterParamsCloudProvider `form:"cloudProvider" json:"cloudProvider"`
}

// GetSharedClusterParamsCloudProvider defines parameters for GetSharedCluster.
type GetSharedClusterParamsCloudProvider string

// GetClusterOptionsParams defines parameters for GetClusterOptions.
type GetClusterOptionsParams struct {
	// Provider cloud provider
	Provider *GetClusterOptionsParamsProvider `form:"provider,omitempty" json:"provider,omitempty"`

	// Type cluster type
	Type GetClusterOptionsParamsType `form:"type" json:"type"`
}

// GetClusterOptionsParamsProvider defines parameters for GetClusterOptions.
type GetClusterOptionsParamsProvider string

// GetClusterOptionsParamsType defines parameters for GetClusterOptions.
type GetClusterOptionsParamsType string

// ListOrganizationsParams defines parameters for ListOrganizations.
type ListOrganizationsParams struct {
	// Search string to search for when listing users
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// TrialStatus filter by trial status, null for all orgs
	TrialStatus *ListOrganizationsParamsTrialStatus `form:"trialStatus,omitempty" json:"trialStatus,omitempty"`

	// SupportPlan filter by support plan, should be one of INTERNAL, POV, TRIAL, BASIC, STANDARD, PREMIUM, BUSINESS_CRITICAL, or null for all orgs
	SupportPlan *ListOrganizationsParamsSupportPlan `form:"supportPlan,omitempty" json:"supportPlan,omitempty"`

	// Product filter by product, null for all orgs
	Product *ListOrganizationsParamsProduct `form:"product,omitempty" json:"product,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListOrganizationsParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListOrganizationsParamsTrialStatus defines parameters for ListOrganizations.
type ListOrganizationsParamsTrialStatus string

// ListOrganizationsParamsSupportPlan defines parameters for ListOrganizations.
type ListOrganizationsParamsSupportPlan string

// ListOrganizationsParamsProduct defines parameters for ListOrganizations.
type ListOrganizationsParamsProduct string

// ListOrganizationsParamsSorts defines parameters for ListOrganizations.
type ListOrganizationsParamsSorts string

// GetOrganizationParams defines parameters for GetOrganization.
type GetOrganizationParams struct {
	// IsLookUpOnly only look up organization metadata if true
	IsLookUpOnly *bool `form:"isLookUpOnly,omitempty" json:"isLookUpOnly,omitempty"`
}

// ListOrganizationApiTokensParams defines parameters for ListOrganizationApiTokens.
type ListOrganizationApiTokensParams struct {
	// Offset Offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts Sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListOrganizationApiTokensParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListOrganizationApiTokensParamsSorts defines parameters for ListOrganizationApiTokens.
type ListOrganizationApiTokensParamsSorts string

// GetOrganizationAuditLogsParams defines parameters for GetOrganizationAuditLogs.
type GetOrganizationAuditLogsParams struct {
	// Earliest starting point in days for audit logs
	Earliest *string `form:"earliest,omitempty" json:"earliest,omitempty"`
}

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {
	// Provider cloud provider to filter clusters on
	Provider *ListClustersParamsProvider `form:"provider,omitempty" json:"provider,omitempty"`

	// Types type to filter clusters on
	Types *[]ListClustersParamsTypes `form:"types,omitempty" json:"types,omitempty"`

	// Statuses statuses to filter clusters on
	Statuses *[]ListClustersParamsStatuses `form:"statuses,omitempty" json:"statuses,omitempty"`

	// Search string to search for when listing clusters
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListClustersParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListClustersParamsProvider defines parameters for ListClusters.
type ListClustersParamsProvider string

// ListClustersParamsTypes defines parameters for ListClusters.
type ListClustersParamsTypes string

// ListClustersParamsStatuses defines parameters for ListClusters.
type ListClustersParamsStatuses string

// ListClustersParamsSorts defines parameters for ListClusters.
type ListClustersParamsSorts string

// ListClusterRoutesParams defines parameters for ListClusterRoutes.
type ListClusterRoutesParams struct {
	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListClusterRoutesParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListClusterRoutesParamsSorts defines parameters for ListClusterRoutes.
type ListClusterRoutesParamsSorts string

// GetDeploymentOptionsParams defines parameters for GetDeploymentOptions.
type GetDeploymentOptionsParams struct {
	// DeploymentId deployment ID
	DeploymentId *string `form:"deploymentId,omitempty" json:"deploymentId,omitempty"`

	// DeploymentType The runtime type of the deployment.
	DeploymentType *GetDeploymentOptionsParamsDeploymentType `form:"deploymentType,omitempty" json:"deploymentType,omitempty"`

	// Executor The executor of the deployment.
	Executor *GetDeploymentOptionsParamsExecutor `form:"executor,omitempty" json:"executor,omitempty"`

	// CloudProvider The cloud provider of the cluster for the deployment.
	CloudProvider *GetDeploymentOptionsParamsCloudProvider `form:"cloudProvider,omitempty" json:"cloudProvider,omitempty"`
}

// GetDeploymentOptionsParamsDeploymentType defines parameters for GetDeploymentOptions.
type GetDeploymentOptionsParamsDeploymentType string

// GetDeploymentOptionsParamsExecutor defines parameters for GetDeploymentOptions.
type GetDeploymentOptionsParamsExecutor string

// GetDeploymentOptionsParamsCloudProvider defines parameters for GetDeploymentOptions.
type GetDeploymentOptionsParamsCloudProvider string

// ListDeploymentsParams defines parameters for ListDeployments.
type ListDeploymentsParams struct {
	// DeploymentIds IDs that define the deployments
	DeploymentIds *[]string `form:"deploymentIds,omitempty" json:"deploymentIds,omitempty"`

	// WorkspaceIds IDs that define the workspaces where deployments belong to
	WorkspaceIds *[]string `form:"workspaceIds,omitempty" json:"workspaceIds,omitempty"`

	// Names deployment names to filter on
	Names *[]string `form:"names,omitempty" json:"names,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListDeploymentsParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListDeploymentsParamsSorts defines parameters for ListDeployments.
type ListDeploymentsParamsSorts string

// ListDeploymentApiTokensParams defines parameters for ListDeploymentApiTokens.
type ListDeploymentApiTokensParams struct {
	// TokenTypes filters result set to the passed in token types
	TokenTypes *[]ListDeploymentApiTokensParamsTokenTypes `form:"tokenTypes,omitempty" json:"tokenTypes,omitempty"`

	// Offset Offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts Sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListDeploymentApiTokensParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListDeploymentApiTokensParamsTokenTypes defines parameters for ListDeploymentApiTokens.
type ListDeploymentApiTokensParamsTokenTypes string

// ListDeploymentApiTokensParamsSorts defines parameters for ListDeploymentApiTokens.
type ListDeploymentApiTokensParamsSorts string

// ListDeploysParams defines parameters for ListDeploys.
type ListDeploysParams struct {
	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search string to search for when listing deploys
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// SubjectId ID of the subject for the deploys
	SubjectId *string `form:"subjectId,omitempty" json:"subjectId,omitempty"`
}

// GetDeployParams defines parameters for GetDeploy.
type GetDeployParams struct {
	// IncludeSteps whether to include the deploy steps
	IncludeSteps *bool `form:"includeSteps,omitempty" json:"includeSteps,omitempty"`
}

// ListDeployStepsParams defines parameters for ListDeploySteps.
type ListDeployStepsParams struct {
	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListDeployStepsParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListDeployStepsParamsSorts defines parameters for ListDeploySteps.
type ListDeployStepsParamsSorts string

// ListDeployStepLogsParams defines parameters for ListDeployStepLogs.
type ListDeployStepLogsParams struct {
	// Limit limit of the count of the logs
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset offset of the log entries
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// SearchId searchId to get logs from
	SearchId *string `form:"searchId,omitempty" json:"searchId,omitempty"`
}

// GetDeploymentLogsParams defines parameters for GetDeploymentLogs.
type GetDeploymentLogsParams struct {
	// Sources log sources to select logs from
	Sources []GetDeploymentLogsParamsSources `form:"sources" json:"sources"`

	// Limit limit of the count of the logs
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset offset of the log entries
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Range range of the log search in seconds
	Range *int `form:"range,omitempty" json:"range,omitempty"`

	// MaxNumResults maximum number of results across all pages
	MaxNumResults *int `form:"maxNumResults,omitempty" json:"maxNumResults,omitempty"`

	// SearchId searchId to get logs from
	SearchId *string `form:"searchId,omitempty" json:"searchId,omitempty"`

	// SearchText an exact text search param used to filter the data on
	SearchText *string `form:"searchText,omitempty" json:"searchText,omitempty"`
}

// GetDeploymentLogsParamsSources defines parameters for GetDeploymentLogs.
type GetDeploymentLogsParamsSources string

// ListDeploymentTeamsParams defines parameters for ListDeploymentTeams.
type ListDeploymentTeamsParams struct {
	// IncludeDeploymentRoles include details about the teams deployment roles
	IncludeDeploymentRoles *bool `form:"includeDeploymentRoles,omitempty" json:"includeDeploymentRoles,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListDeploymentTeamsParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Search string to search for when listing teams
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListDeploymentTeamsParamsSorts defines parameters for ListDeploymentTeams.
type ListDeploymentTeamsParamsSorts string

// ListDeploymentUsersParams defines parameters for ListDeploymentUsers.
type ListDeploymentUsersParams struct {
	// IncludeDeploymentRoles include details about the teams deployment roles
	IncludeDeploymentRoles *bool `form:"includeDeploymentRoles,omitempty" json:"includeDeploymentRoles,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListDeploymentUsersParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Search string to search for when listing users
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListDeploymentUsersParamsSorts defines parameters for ListDeploymentUsers.
type ListDeploymentUsersParamsSorts string

// ListEnvironmentObjectsParams defines parameters for ListEnvironmentObjects.
type ListEnvironmentObjectsParams struct {
	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListEnvironmentObjectsParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// WorkspaceId workspace ID
	WorkspaceId *string `form:"workspaceId,omitempty" json:"workspaceId,omitempty"`

	// DeploymentId deployment ID
	DeploymentId *string `form:"deploymentId,omitempty" json:"deploymentId,omitempty"`

	// ObjectType object type
	ObjectType *ListEnvironmentObjectsParamsObjectType `form:"objectType,omitempty" json:"objectType,omitempty"`

	// ObjectKey object key
	ObjectKey *string `form:"objectKey,omitempty" json:"objectKey,omitempty"`

	// ShowSecrets show secrets in response
	ShowSecrets *bool `form:"showSecrets,omitempty" json:"showSecrets,omitempty"`

	// ResolveLinked resolve linked objects
	ResolveLinked *bool `form:"resolveLinked,omitempty" json:"resolveLinked,omitempty"`
}

// ListEnvironmentObjectsParamsSorts defines parameters for ListEnvironmentObjects.
type ListEnvironmentObjectsParamsSorts string

// ListEnvironmentObjectsParamsObjectType defines parameters for ListEnvironmentObjects.
type ListEnvironmentObjectsParamsObjectType string

// ListRoleTemplatesParams defines parameters for ListRoleTemplates.
type ListRoleTemplatesParams struct {
	// ScopeTypes scope types
	ScopeTypes *[]ListRoleTemplatesParamsScopeTypes `form:"scopeTypes,omitempty" json:"scopeTypes,omitempty"`
}

// ListRoleTemplatesParamsScopeTypes defines parameters for ListRoleTemplates.
type ListRoleTemplatesParamsScopeTypes string

// ListRolesParams defines parameters for ListRoles.
type ListRolesParams struct {
	// IncludeDefaultRoles include default roles
	IncludeDefaultRoles *bool `form:"includeDefaultRoles,omitempty" json:"includeDefaultRoles,omitempty"`

	// ScopeTypes scope types
	ScopeTypes *[]ListRolesParamsScopeTypes `form:"scopeTypes,omitempty" json:"scopeTypes,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListRolesParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListRolesParamsScopeTypes defines parameters for ListRoles.
type ListRolesParamsScopeTypes string

// ListRolesParamsSorts defines parameters for ListRoles.
type ListRolesParamsSorts string

// ListRoleBindingsParams defines parameters for ListRoleBindings.
type ListRoleBindingsParams struct {
	// SubjectTypes subject types to filter for
	SubjectTypes *[]ListRoleBindingsParamsSubjectTypes `form:"subjectTypes,omitempty" json:"subjectTypes,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListRoleBindingsParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListRoleBindingsParamsSubjectTypes defines parameters for ListRoleBindings.
type ListRoleBindingsParamsSubjectTypes string

// ListRoleBindingsParamsSorts defines parameters for ListRoleBindings.
type ListRoleBindingsParamsSorts string

// ListOrganizationTeamsParams defines parameters for ListOrganizationTeams.
type ListOrganizationTeamsParams struct {
	// IncludeMembers includes details about the teams members
	IncludeMembers *bool `form:"includeMembers,omitempty" json:"includeMembers,omitempty"`

	// IncludeWorkspaceRoles include details about the teams workspace roles
	IncludeWorkspaceRoles *bool `form:"includeWorkspaceRoles,omitempty" json:"includeWorkspaceRoles,omitempty"`

	// IncludeDeploymentRoles include details about the teams deployment roles
	IncludeDeploymentRoles *bool `form:"includeDeploymentRoles,omitempty" json:"includeDeploymentRoles,omitempty"`

	// IncludeSubjectInfo include details about who created or updated the team entry
	IncludeSubjectInfo *bool `form:"includeSubjectInfo,omitempty" json:"includeSubjectInfo,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListOrganizationTeamsParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Search string to search for when listing teams
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListOrganizationTeamsParamsSorts defines parameters for ListOrganizationTeams.
type ListOrganizationTeamsParamsSorts string

// ListOrgUsersParams defines parameters for ListOrgUsers.
type ListOrgUsersParams struct {
	// IncludeDeploymentRoles include details about the teams deployment roles
	IncludeDeploymentRoles *bool `form:"includeDeploymentRoles,omitempty" json:"includeDeploymentRoles,omitempty"`

	// IncludeWorkspaceRoles include details about the teams workspace roles
	IncludeWorkspaceRoles *bool `form:"includeWorkspaceRoles,omitempty" json:"includeWorkspaceRoles,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListOrgUsersParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Search string to search for when listing users
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// HasInvites filter on users with invites only
	HasInvites *bool `form:"hasInvites,omitempty" json:"hasInvites,omitempty"`
}

// ListOrgUsersParamsSorts defines parameters for ListOrgUsers.
type ListOrgUsersParamsSorts string

// ListWorkspacesParams defines parameters for ListWorkspaces.
type ListWorkspacesParams struct {
	// WorkspaceIds list of workspace ids to get detail of
	WorkspaceIds *[]string `form:"workspaceIds,omitempty" json:"workspaceIds,omitempty"`

	// Names names to filter on
	Names *[]string `form:"names,omitempty" json:"names,omitempty"`

	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListWorkspacesParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Search string to search for when listing workspaces
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListWorkspacesParamsSorts defines parameters for ListWorkspaces.
type ListWorkspacesParamsSorts string

// ListWorkspaceApiTokensParams defines parameters for ListWorkspaceApiTokens.
type ListWorkspaceApiTokensParams struct {
	// TokenTypes filters result set to the passed in token types
	TokenTypes *[]ListWorkspaceApiTokensParamsTokenTypes `form:"tokenTypes,omitempty" json:"tokenTypes,omitempty"`

	// Offset Offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts Sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListWorkspaceApiTokensParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`
}

// ListWorkspaceApiTokensParamsTokenTypes defines parameters for ListWorkspaceApiTokens.
type ListWorkspaceApiTokensParamsTokenTypes string

// ListWorkspaceApiTokensParamsSorts defines parameters for ListWorkspaceApiTokens.
type ListWorkspaceApiTokensParamsSorts string

// ListWorkspaceDagsParams defines parameters for ListWorkspaceDags.
type ListWorkspaceDagsParams struct {
	// PageSize page size, default of 20
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// OrderBy order-by fields, comma separated
	OrderBy *[]string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Cursor pagination cursor
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// NumRuns number of runs to include per dag, default of 0
	NumRuns *int `form:"numRuns,omitempty" json:"numRuns,omitempty"`

	// Name filter by name of DAG (dagId)
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// NameLike filter by pattern for name of DAG (dagId),  SQL  syntax
	NameLike *string `form:"name__like,omitempty" json:"name__like,omitempty"`

	// Owner filter by an owner of the DAG
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`

	// IsPaused filter by paused DAGs
	IsPaused *bool `form:"isPaused,omitempty" json:"isPaused,omitempty"`

	// IsActive filter by active DAGs
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty"`

	// LastRunStateIn filter by DAG runs with any of these run states for its last run
	LastRunStateIn *[]string `form:"lastRunState__in,omitempty" json:"lastRunState__in,omitempty"`

	// RunStateIn filter by DAG runs with any of these run states
	RunStateIn *[]string `form:"runState__in,omitempty" json:"runState__in,omitempty"`

	// RunAfter filter by DAG run after specified datetime
	RunAfter *time.Time `form:"runAfter,omitempty" json:"runAfter,omitempty"`

	// TagIn filter by any of these tags
	TagIn *[]string `form:"tag__in,omitempty" json:"tag__in,omitempty"`

	// DeploymentIdIn filter by any of these deployment IDs
	DeploymentIdIn *[]string `form:"deploymentId__in,omitempty" json:"deploymentId__in,omitempty"`
}

// ListWorkspaceTeamsParams defines parameters for ListWorkspaceTeams.
type ListWorkspaceTeamsParams struct {
	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListWorkspaceTeamsParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Search string to search for when listing teams
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListWorkspaceTeamsParamsSorts defines parameters for ListWorkspaceTeams.
type ListWorkspaceTeamsParamsSorts string

// ListWorkspaceUsersParams defines parameters for ListWorkspaceUsers.
type ListWorkspaceUsersParams struct {
	// Offset offset for pagination
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit limit for pagination
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sorts sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
	Sorts *[]ListWorkspaceUsersParamsSorts `form:"sorts,omitempty" json:"sorts,omitempty"`

	// Search string to search for when listing users
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListWorkspaceUsersParamsSorts defines parameters for ListWorkspaceUsers.
type ListWorkspaceUsersParamsSorts string

// GetSelfUserParams defines parameters for GetSelfUser.
type GetSelfUserParams struct {
	// CreateIfNotExist create self user if it does not already exist
	CreateIfNotExist *bool `form:"createIfNotExist,omitempty" json:"createIfNotExist,omitempty"`

	// IncludeGitHubAccounts determines if GitHub accounts affiliated with the user are included in the response
	IncludeGitHubAccounts *bool `form:"includeGitHubAccounts,omitempty" json:"includeGitHubAccounts,omitempty"`
}

// ListSelfUserRepositoriesParams defines parameters for ListSelfUserRepositories.
type ListSelfUserRepositoriesParams struct {
	// Page page number to return from Git provider response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage max number of results per page from Git provider response
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// ListSelfUserRepositoriesParamsGitProvider defines parameters for ListSelfUserRepositories.
type ListSelfUserRepositoriesParamsGitProvider string

// GetSelfUserRepositoryBranchParamsGitProvider defines parameters for GetSelfUserRepositoryBranch.
type GetSelfUserRepositoryBranchParamsGitProvider string

// GetSelfUserGitAppAuthorizationParamsGitProvider defines parameters for GetSelfUserGitAppAuthorization.
type GetSelfUserGitAppAuthorizationParamsGitProvider string

// GetSelfUserGitAppInstallationParamsGitProvider defines parameters for GetSelfUserGitAppInstallation.
type GetSelfUserGitAppInstallationParamsGitProvider string

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = CreateOrganizationRequest

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody = UpdateOrganizationRequest

// CreateOrganizationApiTokenJSONRequestBody defines body for CreateOrganizationApiToken for application/json ContentType.
type CreateOrganizationApiTokenJSONRequestBody = CreateOrganizationApiTokenRequest

// UpdateOrganizationApiTokenJSONRequestBody defines body for UpdateOrganizationApiToken for application/json ContentType.
type UpdateOrganizationApiTokenJSONRequestBody = UpdateOrganizationApiTokenRequest

// CreateAwsClusterJSONRequestBody defines body for CreateAwsCluster for application/json ContentType.
type CreateAwsClusterJSONRequestBody = CreateAwsClusterRequest

// UpdateAwsClusterJSONRequestBody defines body for UpdateAwsCluster for application/json ContentType.
type UpdateAwsClusterJSONRequestBody = UpdateAwsClusterRequest

// CreateAzureClusterJSONRequestBody defines body for CreateAzureCluster for application/json ContentType.
type CreateAzureClusterJSONRequestBody = CreateAzureClusterRequest

// UpdateAzureClusterJSONRequestBody defines body for UpdateAzureCluster for application/json ContentType.
type UpdateAzureClusterJSONRequestBody = UpdateAzureClusterRequest

// CreateGcpClusterJSONRequestBody defines body for CreateGcpCluster for application/json ContentType.
type CreateGcpClusterJSONRequestBody = CreateGcpClusterRequest

// UpdateGcpClusterJSONRequestBody defines body for UpdateGcpCluster for application/json ContentType.
type UpdateGcpClusterJSONRequestBody = UpdateGcpClusterRequest

// CreateClusterRouteJSONRequestBody defines body for CreateClusterRoute for application/json ContentType.
type CreateClusterRouteJSONRequestBody = CreateClusterRouteRequest

// CreateDeploymentJSONRequestBody defines body for CreateDeployment for application/json ContentType.
type CreateDeploymentJSONRequestBody = CreateDeploymentRequest

// UpdateDeploymentJSONRequestBody defines body for UpdateDeployment for application/json ContentType.
type UpdateDeploymentJSONRequestBody = UpdateDeploymentRequest

// CreateDeploymentApiTokenJSONRequestBody defines body for CreateDeploymentApiToken for application/json ContentType.
type CreateDeploymentApiTokenJSONRequestBody = CreateDeploymentApiTokenRequest

// UpdateDeploymentApiTokenJSONRequestBody defines body for UpdateDeploymentApiToken for application/json ContentType.
type UpdateDeploymentApiTokenJSONRequestBody = UpdateDeploymentApiTokenRequest

// DeployRollbackJSONRequestBody defines body for DeployRollback for application/json ContentType.
type DeployRollbackJSONRequestBody = DeployRollbackRequest

// CreateDeployJSONRequestBody defines body for CreateDeploy for application/json ContentType.
type CreateDeployJSONRequestBody = CreateDeployRequest

// UpdateDeployJSONRequestBody defines body for UpdateDeploy for application/json ContentType.
type UpdateDeployJSONRequestBody = UpdateDeployRequest

// MutateDeploymentTeamRoleJSONRequestBody defines body for MutateDeploymentTeamRole for application/json ContentType.
type MutateDeploymentTeamRoleJSONRequestBody = MutateDeploymentTeamRoleRequest

// MutateDeploymentUserRoleJSONRequestBody defines body for MutateDeploymentUserRole for application/json ContentType.
type MutateDeploymentUserRoleJSONRequestBody = MutateDeploymentUserRoleRequest

// CreateEnvironmentObjectJSONRequestBody defines body for CreateEnvironmentObject for application/json ContentType.
type CreateEnvironmentObjectJSONRequestBody = CreateEnvironmentObjectRequest

// UpdateEnvironmentObjectJSONRequestBody defines body for UpdateEnvironmentObject for application/json ContentType.
type UpdateEnvironmentObjectJSONRequestBody = UpdateEnvironmentObjectRequest

// CreateUserInviteJSONRequestBody defines body for CreateUserInvite for application/json ContentType.
type CreateUserInviteJSONRequestBody = CreateUserInviteRequest

// CreateCustomRoleJSONRequestBody defines body for CreateCustomRole for application/json ContentType.
type CreateCustomRoleJSONRequestBody = CreateCustomRoleRequest

// UpdateCustomRoleJSONRequestBody defines body for UpdateCustomRole for application/json ContentType.
type UpdateCustomRoleJSONRequestBody = UpdateCustomRoleRequest

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = UpdateTeamRequest

// AddTeamMembersJSONRequestBody defines body for AddTeamMembers for application/json ContentType.
type AddTeamMembersJSONRequestBody = AddTeamMembersRequest

// MutateOrgTeamRoleJSONRequestBody defines body for MutateOrgTeamRole for application/json ContentType.
type MutateOrgTeamRoleJSONRequestBody = MutateOrgTeamRoleRequest

// MutateOrgUserRoleJSONRequestBody defines body for MutateOrgUserRole for application/json ContentType.
type MutateOrgUserRoleJSONRequestBody = MutateOrgUserRoleRequest

// CreateWorkspaceJSONRequestBody defines body for CreateWorkspace for application/json ContentType.
type CreateWorkspaceJSONRequestBody = CreateWorkspaceRequest

// UpdateWorkspaceJSONRequestBody defines body for UpdateWorkspace for application/json ContentType.
type UpdateWorkspaceJSONRequestBody = UpdateWorkspaceRequest

// CreateWorkspaceApiTokenJSONRequestBody defines body for CreateWorkspaceApiToken for application/json ContentType.
type CreateWorkspaceApiTokenJSONRequestBody = CreateWorkspaceApiTokenRequest

// UpdateWorkspaceApiTokenJSONRequestBody defines body for UpdateWorkspaceApiToken for application/json ContentType.
type UpdateWorkspaceApiTokenJSONRequestBody = UpdateWorkspaceApiTokenRequest

// TransferDeploymentJSONRequestBody defines body for TransferDeployment for application/json ContentType.
type TransferDeploymentJSONRequestBody = TransferDeploymentRequest

// MutateWorkspaceTeamRoleJSONRequestBody defines body for MutateWorkspaceTeamRole for application/json ContentType.
type MutateWorkspaceTeamRoleJSONRequestBody = MutateWorkspaceTeamRoleRequest

// MutateWorkspaceUserRoleJSONRequestBody defines body for MutateWorkspaceUserRole for application/json ContentType.
type MutateWorkspaceUserRoleJSONRequestBody = MutateWorkspaceUserRoleRequest

// UpdateSelfUserInviteJSONRequestBody defines body for UpdateSelfUserInvite for application/json ContentType.
type UpdateSelfUserInviteJSONRequestBody = UpdateInviteRequest

// AsCreateDedicatedDeploymentRequest returns the union data inside the CreateDeploymentRequest as a CreateDedicatedDeploymentRequest
func (t CreateDeploymentRequest) AsCreateDedicatedDeploymentRequest() (CreateDedicatedDeploymentRequest, error) {
	var body CreateDedicatedDeploymentRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateDedicatedDeploymentRequest overwrites any union data inside the CreateDeploymentRequest as the provided CreateDedicatedDeploymentRequest
func (t *CreateDeploymentRequest) FromCreateDedicatedDeploymentRequest(v CreateDedicatedDeploymentRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateDedicatedDeploymentRequest performs a merge with any union data inside the CreateDeploymentRequest, using the provided CreateDedicatedDeploymentRequest
func (t *CreateDeploymentRequest) MergeCreateDedicatedDeploymentRequest(v CreateDedicatedDeploymentRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsCreateHybridDeploymentRequest returns the union data inside the CreateDeploymentRequest as a CreateHybridDeploymentRequest
func (t CreateDeploymentRequest) AsCreateHybridDeploymentRequest() (CreateHybridDeploymentRequest, error) {
	var body CreateHybridDeploymentRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateHybridDeploymentRequest overwrites any union data inside the CreateDeploymentRequest as the provided CreateHybridDeploymentRequest
func (t *CreateDeploymentRequest) FromCreateHybridDeploymentRequest(v CreateHybridDeploymentRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateHybridDeploymentRequest performs a merge with any union data inside the CreateDeploymentRequest, using the provided CreateHybridDeploymentRequest
func (t *CreateDeploymentRequest) MergeCreateHybridDeploymentRequest(v CreateHybridDeploymentRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsCreateStandardDeploymentRequest returns the union data inside the CreateDeploymentRequest as a CreateStandardDeploymentRequest
func (t CreateDeploymentRequest) AsCreateStandardDeploymentRequest() (CreateStandardDeploymentRequest, error) {
	var body CreateStandardDeploymentRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateStandardDeploymentRequest overwrites any union data inside the CreateDeploymentRequest as the provided CreateStandardDeploymentRequest
func (t *CreateDeploymentRequest) FromCreateStandardDeploymentRequest(v CreateStandardDeploymentRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateStandardDeploymentRequest performs a merge with any union data inside the CreateDeploymentRequest, using the provided CreateStandardDeploymentRequest
func (t *CreateDeploymentRequest) MergeCreateStandardDeploymentRequest(v CreateStandardDeploymentRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CreateDeploymentRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateDeploymentRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateHostedDeploymentRequest returns the union data inside the UpdateDeploymentRequest as a UpdateHostedDeploymentRequest
func (t UpdateDeploymentRequest) AsUpdateHostedDeploymentRequest() (UpdateHostedDeploymentRequest, error) {
	var body UpdateHostedDeploymentRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateHostedDeploymentRequest overwrites any union data inside the UpdateDeploymentRequest as the provided UpdateHostedDeploymentRequest
func (t *UpdateDeploymentRequest) FromUpdateHostedDeploymentRequest(v UpdateHostedDeploymentRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateHostedDeploymentRequest performs a merge with any union data inside the UpdateDeploymentRequest, using the provided UpdateHostedDeploymentRequest
func (t *UpdateDeploymentRequest) MergeUpdateHostedDeploymentRequest(v UpdateHostedDeploymentRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsUpdateHybridDeploymentRequest returns the union data inside the UpdateDeploymentRequest as a UpdateHybridDeploymentRequest
func (t UpdateDeploymentRequest) AsUpdateHybridDeploymentRequest() (UpdateHybridDeploymentRequest, error) {
	var body UpdateHybridDeploymentRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateHybridDeploymentRequest overwrites any union data inside the UpdateDeploymentRequest as the provided UpdateHybridDeploymentRequest
func (t *UpdateDeploymentRequest) FromUpdateHybridDeploymentRequest(v UpdateHybridDeploymentRequest) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateHybridDeploymentRequest performs a merge with any union data inside the UpdateDeploymentRequest, using the provided UpdateHybridDeploymentRequest
func (t *UpdateDeploymentRequest) MergeUpdateHybridDeploymentRequest(v UpdateHybridDeploymentRequest) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UpdateDeploymentRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateDeploymentRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWeekdaySchema returns the union data inside the Weekday as a WeekdaySchema
func (t Weekday) AsWeekdaySchema() (WeekdaySchema, error) {
	var body WeekdaySchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWeekdaySchema overwrites any union data inside the Weekday as the provided WeekdaySchema
func (t *Weekday) FromWeekdaySchema(v WeekdaySchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWeekdaySchema performs a merge with any union data inside the Weekday, using the provided WeekdaySchema
func (t *Weekday) MergeWeekdaySchema(v WeekdaySchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsWeekday1 returns the union data inside the Weekday as a Weekday1
func (t Weekday) AsWeekday1() (Weekday1, error) {
	var body Weekday1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWeekday1 overwrites any union data inside the Weekday as the provided Weekday1
func (t *Weekday) FromWeekday1(v Weekday1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWeekday1 performs a merge with any union data inside the Weekday, using the provided Weekday1
func (t *Weekday) MergeWeekday1(v Weekday1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Weekday) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Weekday) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetUserInvite request
	GetUserInvite(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSharedCluster request
	GetSharedCluster(ctx context.Context, params *GetSharedClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterOptions request
	GetClusterOptions(ctx context.Context, params *GetClusterOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizations request
	ListOrganizations(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganization request with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, organizationId string, params *GetOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganization request with any body
	UpdateOrganizationWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganization(ctx context.Context, organizationId string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationApiTokens request
	ListOrganizationApiTokens(ctx context.Context, organizationId string, params *ListOrganizationApiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationApiToken request with any body
	CreateOrganizationApiTokenWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationApiToken(ctx context.Context, organizationId string, body CreateOrganizationApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationApiToken request
	DeleteOrganizationApiToken(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationApiToken request
	GetOrganizationApiToken(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationApiToken request with any body
	UpdateOrganizationApiTokenWithBody(ctx context.Context, organizationId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationApiToken(ctx context.Context, organizationId string, apiTokenId string, body UpdateOrganizationApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateOrganizationApiToken request
	RotateOrganizationApiToken(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationAuditLogs request
	GetOrganizationAuditLogs(ctx context.Context, organizationId string, params *GetOrganizationAuditLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListClusters request
	ListClusters(ctx context.Context, organizationId string, params *ListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAwsCluster request with any body
	CreateAwsClusterWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAwsCluster(ctx context.Context, organizationId string, body CreateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAwsCluster request with any body
	UpdateAwsClusterWithBody(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAwsCluster(ctx context.Context, organizationId string, clusterId string, body UpdateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAzureCluster request with any body
	CreateAzureClusterWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAzureCluster(ctx context.Context, organizationId string, body CreateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAzureCluster request with any body
	UpdateAzureClusterWithBody(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAzureCluster(ctx context.Context, organizationId string, clusterId string, body UpdateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGcpCluster request with any body
	CreateGcpClusterWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGcpCluster(ctx context.Context, organizationId string, body CreateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGcpCluster request with any body
	UpdateGcpClusterWithBody(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGcpCluster(ctx context.Context, organizationId string, clusterId string, body UpdateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCluster request
	DeleteCluster(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCluster request
	GetCluster(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListClusterRoutes request
	ListClusterRoutes(ctx context.Context, organizationId string, clusterId string, params *ListClusterRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClusterRoute request with any body
	CreateClusterRouteWithBody(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateClusterRoute(ctx context.Context, organizationId string, clusterId string, body CreateClusterRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClusterRoute request
	DeleteClusterRoute(ctx context.Context, organizationId string, clusterId string, routeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentOptions request
	GetDeploymentOptions(ctx context.Context, organizationId string, params *GetDeploymentOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeployments request
	ListDeployments(ctx context.Context, organizationId string, params *ListDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeployment request with any body
	CreateDeploymentWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeployment(ctx context.Context, organizationId string, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeployment request
	DeleteDeployment(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeployment request
	GetDeployment(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDeployment request with any body
	UpdateDeploymentWithBody(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDeployment(ctx context.Context, organizationId string, deploymentId string, body UpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeploymentApiTokens request
	ListDeploymentApiTokens(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentApiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeploymentApiToken request with any body
	CreateDeploymentApiTokenWithBody(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeploymentApiToken(ctx context.Context, organizationId string, deploymentId string, body CreateDeploymentApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeploymentApiToken request
	DeleteDeploymentApiToken(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentApiToken request
	GetDeploymentApiToken(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDeploymentApiToken request with any body
	UpdateDeploymentApiTokenWithBody(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDeploymentApiToken(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, body UpdateDeploymentApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateDeploymentApiToken request
	RotateDeploymentApiToken(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeployRollback request with any body
	DeployRollbackWithBody(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeployRollback(ctx context.Context, organizationId string, deploymentId string, body DeployRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeploys request
	ListDeploys(ctx context.Context, organizationId string, deploymentId string, params *ListDeploysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeploy request with any body
	CreateDeployWithBody(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeploy(ctx context.Context, organizationId string, deploymentId string, body CreateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploy request
	GetDeploy(ctx context.Context, organizationId string, deploymentId string, deployId string, params *GetDeployParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDeploy request with any body
	UpdateDeployWithBody(ctx context.Context, organizationId string, deploymentId string, deployId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDeploy(ctx context.Context, organizationId string, deploymentId string, deployId string, body UpdateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeploySteps request
	ListDeploySteps(ctx context.Context, organizationId string, deploymentId string, deployId string, params *ListDeployStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeployStepLogs request
	ListDeployStepLogs(ctx context.Context, organizationId string, deploymentId string, deployId string, deployStepId string, params *ListDeployStepLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentHealth request
	GetDeploymentHealth(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentLogs request
	GetDeploymentLogs(ctx context.Context, organizationId string, deploymentId string, params *GetDeploymentLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeploymentTeams request
	ListDeploymentTeams(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeploymentTeam request
	DeleteDeploymentTeam(ctx context.Context, organizationId string, deploymentId string, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MutateDeploymentTeamRole request with any body
	MutateDeploymentTeamRoleWithBody(ctx context.Context, organizationId string, deploymentId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MutateDeploymentTeamRole(ctx context.Context, organizationId string, deploymentId string, teamId string, body MutateDeploymentTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDeploymentUsers request
	ListDeploymentUsers(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeploymentUser request
	DeleteDeploymentUser(ctx context.Context, organizationId string, deploymentId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MutateDeploymentUserRole request with any body
	MutateDeploymentUserRoleWithBody(ctx context.Context, organizationId string, deploymentId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MutateDeploymentUserRole(ctx context.Context, organizationId string, deploymentId string, userId string, body MutateDeploymentUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEnvironmentObjects request
	ListEnvironmentObjects(ctx context.Context, organizationId string, params *ListEnvironmentObjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentObject request with any body
	CreateEnvironmentObjectWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironmentObject(ctx context.Context, organizationId string, body CreateEnvironmentObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironmentObject request
	DeleteEnvironmentObject(ctx context.Context, organizationId string, environmentObjectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentObject request
	GetEnvironmentObject(ctx context.Context, organizationId string, environmentObjectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironmentObject request with any body
	UpdateEnvironmentObjectWithBody(ctx context.Context, organizationId string, environmentObjectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEnvironmentObject(ctx context.Context, organizationId string, environmentObjectId string, body UpdateEnvironmentObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserInvite request with any body
	CreateUserInviteWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserInvite(ctx context.Context, organizationId string, body CreateUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserInvite request
	DeleteUserInvite(ctx context.Context, organizationId string, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoleTemplates request
	ListRoleTemplates(ctx context.Context, organizationId string, params *ListRoleTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoles request
	ListRoles(ctx context.Context, organizationId string, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomRole request with any body
	CreateCustomRoleWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomRole(ctx context.Context, organizationId string, body CreateCustomRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomRole request
	DeleteCustomRole(ctx context.Context, organizationId string, customRoleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomRole request with any body
	UpdateCustomRoleWithBody(ctx context.Context, organizationId string, customRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomRole(ctx context.Context, organizationId string, customRoleId string, body UpdateCustomRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomRole request
	GetCustomRole(ctx context.Context, organizationId string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoleBindings request
	ListRoleBindings(ctx context.Context, organizationId string, roleId string, params *ListRoleBindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationTeams request
	ListOrganizationTeams(ctx context.Context, organizationId string, params *ListOrganizationTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeam request with any body
	CreateTeamWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeam(ctx context.Context, organizationId string, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, organizationId string, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, organizationId string, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeam request with any body
	UpdateTeamWithBody(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeam(ctx context.Context, organizationId string, teamId string, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTeamMembers request with any body
	AddTeamMembersWithBody(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTeamMembers(ctx context.Context, organizationId string, teamId string, body AddTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveTeamMember request
	RemoveTeamMember(ctx context.Context, organizationId string, teamId string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MutateOrgTeamRole request with any body
	MutateOrgTeamRoleWithBody(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MutateOrgTeamRole(ctx context.Context, organizationId string, teamId string, body MutateOrgTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrgUsers request
	ListOrgUsers(ctx context.Context, organizationId string, params *ListOrgUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrgUser request
	DeleteOrgUser(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MutateOrgUserRole request with any body
	MutateOrgUserRoleWithBody(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MutateOrgUserRole(ctx context.Context, organizationId string, userId string, body MutateOrgUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaces request
	ListWorkspaces(ctx context.Context, organizationId string, params *ListWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkspace request with any body
	CreateWorkspaceWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkspace(ctx context.Context, organizationId string, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspace request
	DeleteWorkspace(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspace request
	GetWorkspace(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspace request with any body
	UpdateWorkspaceWithBody(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspace(ctx context.Context, organizationId string, workspaceId string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaceApiTokens request
	ListWorkspaceApiTokens(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceApiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkspaceApiToken request with any body
	CreateWorkspaceApiTokenWithBody(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkspaceApiToken(ctx context.Context, organizationId string, workspaceId string, body CreateWorkspaceApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspaceApiToken request
	DeleteWorkspaceApiToken(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceApiToken request
	GetWorkspaceApiToken(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceApiToken request with any body
	UpdateWorkspaceApiTokenWithBody(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspaceApiToken(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, body UpdateWorkspaceApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateWorkspaceApiToken request
	RotateWorkspaceApiToken(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaceDagFilters request
	ListWorkspaceDagFilters(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaceDags request
	ListWorkspaceDags(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceDagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TransferDeployment request with any body
	TransferDeploymentWithBody(ctx context.Context, organizationId string, workspaceId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TransferDeployment(ctx context.Context, organizationId string, workspaceId string, deploymentId string, body TransferDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaceTeams request
	ListWorkspaceTeams(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspaceTeam request
	DeleteWorkspaceTeam(ctx context.Context, organizationId string, workspaceId string, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MutateWorkspaceTeamRole request with any body
	MutateWorkspaceTeamRoleWithBody(ctx context.Context, organizationId string, workspaceId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MutateWorkspaceTeamRole(ctx context.Context, organizationId string, workspaceId string, teamId string, body MutateWorkspaceTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaceUsers request
	ListWorkspaceUsers(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspaceUser request
	DeleteWorkspaceUser(ctx context.Context, organizationId string, workspaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MutateWorkspaceUserRole request with any body
	MutateWorkspaceUserRoleWithBody(ctx context.Context, organizationId string, workspaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MutateWorkspaceUserRole(ctx context.Context, organizationId string, workspaceId string, userId string, body MutateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfUser request
	GetSelfUser(ctx context.Context, params *GetSelfUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSelfUserRepositories request
	ListSelfUserRepositories(ctx context.Context, gitProvider ListSelfUserRepositoriesParamsGitProvider, gitAccount string, params *ListSelfUserRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfUserRepositoryBranch request
	GetSelfUserRepositoryBranch(ctx context.Context, gitProvider GetSelfUserRepositoryBranchParamsGitProvider, gitAccount string, gitRepository string, gitBranch string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfUserGitAppAuthorization request
	GetSelfUserGitAppAuthorization(ctx context.Context, gitProvider GetSelfUserGitAppAuthorizationParamsGitProvider, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfUserGitAppInstallation request
	GetSelfUserGitAppInstallation(ctx context.Context, gitProvider GetSelfUserGitAppInstallationParamsGitProvider, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSelfUserInvite request with any body
	UpdateSelfUserInviteWithBody(ctx context.Context, inviteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSelfUserInvite(ctx context.Context, inviteId string, body UpdateSelfUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetUserInvite(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInviteRequest(c.Server, inviteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSharedCluster(ctx context.Context, params *GetSharedClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSharedClusterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterOptions(ctx context.Context, params *GetClusterOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterOptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizations(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, organizationId string, params *GetOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganization(ctx context.Context, organizationId string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationApiTokens(ctx context.Context, organizationId string, params *ListOrganizationApiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationApiTokensRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationApiTokenWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationApiTokenRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationApiToken(ctx context.Context, organizationId string, body CreateOrganizationApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationApiTokenRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationApiToken(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationApiTokenRequest(c.Server, organizationId, apiTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationApiToken(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationApiTokenRequest(c.Server, organizationId, apiTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationApiTokenWithBody(ctx context.Context, organizationId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationApiTokenRequestWithBody(c.Server, organizationId, apiTokenId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationApiToken(ctx context.Context, organizationId string, apiTokenId string, body UpdateOrganizationApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationApiTokenRequest(c.Server, organizationId, apiTokenId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateOrganizationApiToken(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateOrganizationApiTokenRequest(c.Server, organizationId, apiTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationAuditLogs(ctx context.Context, organizationId string, params *GetOrganizationAuditLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationAuditLogsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListClusters(ctx context.Context, organizationId string, params *ListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClustersRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAwsClusterWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAwsClusterRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAwsCluster(ctx context.Context, organizationId string, body CreateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAwsClusterRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAwsClusterWithBody(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAwsClusterRequestWithBody(c.Server, organizationId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAwsCluster(ctx context.Context, organizationId string, clusterId string, body UpdateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAwsClusterRequest(c.Server, organizationId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAzureClusterWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAzureClusterRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAzureCluster(ctx context.Context, organizationId string, body CreateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAzureClusterRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAzureClusterWithBody(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAzureClusterRequestWithBody(c.Server, organizationId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAzureCluster(ctx context.Context, organizationId string, clusterId string, body UpdateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAzureClusterRequest(c.Server, organizationId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGcpClusterWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGcpClusterRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGcpCluster(ctx context.Context, organizationId string, body CreateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGcpClusterRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGcpClusterWithBody(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGcpClusterRequestWithBody(c.Server, organizationId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGcpCluster(ctx context.Context, organizationId string, clusterId string, body UpdateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGcpClusterRequest(c.Server, organizationId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCluster(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCluster(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListClusterRoutes(ctx context.Context, organizationId string, clusterId string, params *ListClusterRoutesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListClusterRoutesRequest(c.Server, organizationId, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClusterRouteWithBody(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterRouteRequestWithBody(c.Server, organizationId, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClusterRoute(ctx context.Context, organizationId string, clusterId string, body CreateClusterRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClusterRouteRequest(c.Server, organizationId, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClusterRoute(ctx context.Context, organizationId string, clusterId string, routeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRouteRequest(c.Server, organizationId, clusterId, routeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentOptions(ctx context.Context, organizationId string, params *GetDeploymentOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentOptionsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeployments(ctx context.Context, organizationId string, params *ListDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeploymentsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeploymentWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeploymentRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeployment(ctx context.Context, organizationId string, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeploymentRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeployment(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeploymentRequest(c.Server, organizationId, deploymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeployment(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentRequest(c.Server, organizationId, deploymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeploymentWithBody(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeploymentRequestWithBody(c.Server, organizationId, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeployment(ctx context.Context, organizationId string, deploymentId string, body UpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeploymentRequest(c.Server, organizationId, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeploymentApiTokens(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentApiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeploymentApiTokensRequest(c.Server, organizationId, deploymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeploymentApiTokenWithBody(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeploymentApiTokenRequestWithBody(c.Server, organizationId, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeploymentApiToken(ctx context.Context, organizationId string, deploymentId string, body CreateDeploymentApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeploymentApiTokenRequest(c.Server, organizationId, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeploymentApiToken(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeploymentApiTokenRequest(c.Server, organizationId, deploymentId, apiTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentApiToken(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentApiTokenRequest(c.Server, organizationId, deploymentId, apiTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeploymentApiTokenWithBody(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeploymentApiTokenRequestWithBody(c.Server, organizationId, deploymentId, apiTokenId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeploymentApiToken(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, body UpdateDeploymentApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeploymentApiTokenRequest(c.Server, organizationId, deploymentId, apiTokenId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateDeploymentApiToken(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateDeploymentApiTokenRequest(c.Server, organizationId, deploymentId, apiTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeployRollbackWithBody(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeployRollbackRequestWithBody(c.Server, organizationId, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeployRollback(ctx context.Context, organizationId string, deploymentId string, body DeployRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeployRollbackRequest(c.Server, organizationId, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeploys(ctx context.Context, organizationId string, deploymentId string, params *ListDeploysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeploysRequest(c.Server, organizationId, deploymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeployWithBody(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeployRequestWithBody(c.Server, organizationId, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeploy(ctx context.Context, organizationId string, deploymentId string, body CreateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeployRequest(c.Server, organizationId, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploy(ctx context.Context, organizationId string, deploymentId string, deployId string, params *GetDeployParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeployRequest(c.Server, organizationId, deploymentId, deployId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeployWithBody(ctx context.Context, organizationId string, deploymentId string, deployId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeployRequestWithBody(c.Server, organizationId, deploymentId, deployId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeploy(ctx context.Context, organizationId string, deploymentId string, deployId string, body UpdateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeployRequest(c.Server, organizationId, deploymentId, deployId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeploySteps(ctx context.Context, organizationId string, deploymentId string, deployId string, params *ListDeployStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeployStepsRequest(c.Server, organizationId, deploymentId, deployId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeployStepLogs(ctx context.Context, organizationId string, deploymentId string, deployId string, deployStepId string, params *ListDeployStepLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeployStepLogsRequest(c.Server, organizationId, deploymentId, deployId, deployStepId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentHealth(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentHealthRequest(c.Server, organizationId, deploymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentLogs(ctx context.Context, organizationId string, deploymentId string, params *GetDeploymentLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentLogsRequest(c.Server, organizationId, deploymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeploymentTeams(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeploymentTeamsRequest(c.Server, organizationId, deploymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeploymentTeam(ctx context.Context, organizationId string, deploymentId string, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeploymentTeamRequest(c.Server, organizationId, deploymentId, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateDeploymentTeamRoleWithBody(ctx context.Context, organizationId string, deploymentId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateDeploymentTeamRoleRequestWithBody(c.Server, organizationId, deploymentId, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateDeploymentTeamRole(ctx context.Context, organizationId string, deploymentId string, teamId string, body MutateDeploymentTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateDeploymentTeamRoleRequest(c.Server, organizationId, deploymentId, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDeploymentUsers(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDeploymentUsersRequest(c.Server, organizationId, deploymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeploymentUser(ctx context.Context, organizationId string, deploymentId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeploymentUserRequest(c.Server, organizationId, deploymentId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateDeploymentUserRoleWithBody(ctx context.Context, organizationId string, deploymentId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateDeploymentUserRoleRequestWithBody(c.Server, organizationId, deploymentId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateDeploymentUserRole(ctx context.Context, organizationId string, deploymentId string, userId string, body MutateDeploymentUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateDeploymentUserRoleRequest(c.Server, organizationId, deploymentId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEnvironmentObjects(ctx context.Context, organizationId string, params *ListEnvironmentObjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEnvironmentObjectsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentObjectWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentObjectRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentObject(ctx context.Context, organizationId string, body CreateEnvironmentObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentObjectRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironmentObject(ctx context.Context, organizationId string, environmentObjectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentObjectRequest(c.Server, organizationId, environmentObjectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentObject(ctx context.Context, organizationId string, environmentObjectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentObjectRequest(c.Server, organizationId, environmentObjectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentObjectWithBody(ctx context.Context, organizationId string, environmentObjectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentObjectRequestWithBody(c.Server, organizationId, environmentObjectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentObject(ctx context.Context, organizationId string, environmentObjectId string, body UpdateEnvironmentObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentObjectRequest(c.Server, organizationId, environmentObjectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserInviteWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserInviteRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserInvite(ctx context.Context, organizationId string, body CreateUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserInviteRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserInvite(ctx context.Context, organizationId string, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserInviteRequest(c.Server, organizationId, inviteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoleTemplates(ctx context.Context, organizationId string, params *ListRoleTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRoleTemplatesRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoles(ctx context.Context, organizationId string, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRolesRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomRoleWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomRoleRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomRole(ctx context.Context, organizationId string, body CreateCustomRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomRoleRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomRole(ctx context.Context, organizationId string, customRoleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomRoleRequest(c.Server, organizationId, customRoleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomRoleWithBody(ctx context.Context, organizationId string, customRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomRoleRequestWithBody(c.Server, organizationId, customRoleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomRole(ctx context.Context, organizationId string, customRoleId string, body UpdateCustomRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomRoleRequest(c.Server, organizationId, customRoleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomRole(ctx context.Context, organizationId string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomRoleRequest(c.Server, organizationId, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoleBindings(ctx context.Context, organizationId string, roleId string, params *ListRoleBindingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRoleBindingsRequest(c.Server, organizationId, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationTeams(ctx context.Context, organizationId string, params *ListOrganizationTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationTeamsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeam(ctx context.Context, organizationId string, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, organizationId string, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, organizationId, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, organizationId string, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, organizationId, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, organizationId, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeam(ctx context.Context, organizationId string, teamId string, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequest(c.Server, organizationId, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTeamMembersWithBody(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTeamMembersRequestWithBody(c.Server, organizationId, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTeamMembers(ctx context.Context, organizationId string, teamId string, body AddTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTeamMembersRequest(c.Server, organizationId, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveTeamMember(ctx context.Context, organizationId string, teamId string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveTeamMemberRequest(c.Server, organizationId, teamId, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateOrgTeamRoleWithBody(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateOrgTeamRoleRequestWithBody(c.Server, organizationId, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateOrgTeamRole(ctx context.Context, organizationId string, teamId string, body MutateOrgTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateOrgTeamRoleRequest(c.Server, organizationId, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrgUsers(ctx context.Context, organizationId string, params *ListOrgUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrgUsersRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrgUser(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrgUserRequest(c.Server, organizationId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, organizationId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateOrgUserRoleWithBody(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateOrgUserRoleRequestWithBody(c.Server, organizationId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateOrgUserRole(ctx context.Context, organizationId string, userId string, body MutateOrgUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateOrgUserRoleRequest(c.Server, organizationId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaces(ctx context.Context, organizationId string, params *ListWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspacesRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspace(ctx context.Context, organizationId string, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspace(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequest(c.Server, organizationId, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, organizationId, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequestWithBody(c.Server, organizationId, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspace(ctx context.Context, organizationId string, workspaceId string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequest(c.Server, organizationId, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaceApiTokens(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceApiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspaceApiTokensRequest(c.Server, organizationId, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceApiTokenWithBody(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceApiTokenRequestWithBody(c.Server, organizationId, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceApiToken(ctx context.Context, organizationId string, workspaceId string, body CreateWorkspaceApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceApiTokenRequest(c.Server, organizationId, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspaceApiToken(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceApiTokenRequest(c.Server, organizationId, workspaceId, apiTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceApiToken(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceApiTokenRequest(c.Server, organizationId, workspaceId, apiTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceApiTokenWithBody(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceApiTokenRequestWithBody(c.Server, organizationId, workspaceId, apiTokenId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceApiToken(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, body UpdateWorkspaceApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceApiTokenRequest(c.Server, organizationId, workspaceId, apiTokenId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateWorkspaceApiToken(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateWorkspaceApiTokenRequest(c.Server, organizationId, workspaceId, apiTokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaceDagFilters(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspaceDagFiltersRequest(c.Server, organizationId, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaceDags(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceDagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspaceDagsRequest(c.Server, organizationId, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferDeploymentWithBody(ctx context.Context, organizationId string, workspaceId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferDeploymentRequestWithBody(c.Server, organizationId, workspaceId, deploymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferDeployment(ctx context.Context, organizationId string, workspaceId string, deploymentId string, body TransferDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferDeploymentRequest(c.Server, organizationId, workspaceId, deploymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaceTeams(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspaceTeamsRequest(c.Server, organizationId, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspaceTeam(ctx context.Context, organizationId string, workspaceId string, teamId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceTeamRequest(c.Server, organizationId, workspaceId, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateWorkspaceTeamRoleWithBody(ctx context.Context, organizationId string, workspaceId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateWorkspaceTeamRoleRequestWithBody(c.Server, organizationId, workspaceId, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateWorkspaceTeamRole(ctx context.Context, organizationId string, workspaceId string, teamId string, body MutateWorkspaceTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateWorkspaceTeamRoleRequest(c.Server, organizationId, workspaceId, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaceUsers(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspaceUsersRequest(c.Server, organizationId, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspaceUser(ctx context.Context, organizationId string, workspaceId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceUserRequest(c.Server, organizationId, workspaceId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateWorkspaceUserRoleWithBody(ctx context.Context, organizationId string, workspaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateWorkspaceUserRoleRequestWithBody(c.Server, organizationId, workspaceId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MutateWorkspaceUserRole(ctx context.Context, organizationId string, workspaceId string, userId string, body MutateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMutateWorkspaceUserRoleRequest(c.Server, organizationId, workspaceId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfUser(ctx context.Context, params *GetSelfUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSelfUserRepositories(ctx context.Context, gitProvider ListSelfUserRepositoriesParamsGitProvider, gitAccount string, params *ListSelfUserRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSelfUserRepositoriesRequest(c.Server, gitProvider, gitAccount, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfUserRepositoryBranch(ctx context.Context, gitProvider GetSelfUserRepositoryBranchParamsGitProvider, gitAccount string, gitRepository string, gitBranch string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfUserRepositoryBranchRequest(c.Server, gitProvider, gitAccount, gitRepository, gitBranch)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfUserGitAppAuthorization(ctx context.Context, gitProvider GetSelfUserGitAppAuthorizationParamsGitProvider, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfUserGitAppAuthorizationRequest(c.Server, gitProvider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfUserGitAppInstallation(ctx context.Context, gitProvider GetSelfUserGitAppInstallationParamsGitProvider, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfUserGitAppInstallationRequest(c.Server, gitProvider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSelfUserInviteWithBody(ctx context.Context, inviteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSelfUserInviteRequestWithBody(c.Server, inviteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSelfUserInvite(ctx context.Context, inviteId string, body UpdateSelfUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSelfUserInviteRequest(c.Server, inviteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetUserInviteRequest generates requests for GetUserInvite
func NewGetUserInviteRequest(server string, inviteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSharedClusterRequest generates requests for GetSharedCluster
func NewGetSharedClusterRequest(server string, params *GetSharedClusterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clusters/shared")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, params.Region); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cloudProvider", runtime.ParamLocationQuery, params.CloudProvider); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterOptionsRequest generates requests for GetClusterOptions
func NewGetClusterOptionsRequest(server string, params *GetClusterOptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/options/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Provider != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(server string, params *ListOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TrialStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trialStatus", runtime.ParamLocationQuery, *params.TrialStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SupportPlan != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "supportPlan", runtime.ParamLocationQuery, *params.SupportPlan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Product != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, *params.Product); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, organizationId string, params *GetOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IsLookUpOnly != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isLookUpOnly", runtime.ParamLocationQuery, *params.IsLookUpOnly); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(server string, organizationId string, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganizationApiTokensRequest generates requests for ListOrganizationApiTokens
func NewListOrganizationApiTokensRequest(server string, organizationId string, params *ListOrganizationApiTokensParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/api-tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationApiTokenRequest calls the generic CreateOrganizationApiToken builder with application/json body
func NewCreateOrganizationApiTokenRequest(server string, organizationId string, body CreateOrganizationApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationApiTokenRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateOrganizationApiTokenRequestWithBody generates requests for CreateOrganizationApiToken with any type of body
func NewCreateOrganizationApiTokenRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/api-tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationApiTokenRequest generates requests for DeleteOrganizationApiToken
func NewDeleteOrganizationApiTokenRequest(server string, organizationId string, apiTokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/api-tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationApiTokenRequest generates requests for GetOrganizationApiToken
func NewGetOrganizationApiTokenRequest(server string, organizationId string, apiTokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/api-tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationApiTokenRequest calls the generic UpdateOrganizationApiToken builder with application/json body
func NewUpdateOrganizationApiTokenRequest(server string, organizationId string, apiTokenId string, body UpdateOrganizationApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationApiTokenRequestWithBody(server, organizationId, apiTokenId, "application/json", bodyReader)
}

// NewUpdateOrganizationApiTokenRequestWithBody generates requests for UpdateOrganizationApiToken with any type of body
func NewUpdateOrganizationApiTokenRequestWithBody(server string, organizationId string, apiTokenId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/api-tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRotateOrganizationApiTokenRequest generates requests for RotateOrganizationApiToken
func NewRotateOrganizationApiTokenRequest(server string, organizationId string, apiTokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/api-tokens/%s/rotate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationAuditLogsRequest generates requests for GetOrganizationAuditLogs
func NewGetOrganizationAuditLogsRequest(server string, organizationId string, params *GetOrganizationAuditLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/audit-logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Earliest != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "earliest", runtime.ParamLocationQuery, *params.Earliest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListClustersRequest generates requests for ListClusters
func NewListClustersRequest(server string, organizationId string, params *ListClustersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Provider != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Types != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Statuses != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAwsClusterRequest calls the generic CreateAwsCluster builder with application/json body
func NewCreateAwsClusterRequest(server string, organizationId string, body CreateAwsClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAwsClusterRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateAwsClusterRequestWithBody generates requests for CreateAwsCluster with any type of body
func NewCreateAwsClusterRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/aws", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAwsClusterRequest calls the generic UpdateAwsCluster builder with application/json body
func NewUpdateAwsClusterRequest(server string, organizationId string, clusterId string, body UpdateAwsClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAwsClusterRequestWithBody(server, organizationId, clusterId, "application/json", bodyReader)
}

// NewUpdateAwsClusterRequestWithBody generates requests for UpdateAwsCluster with any type of body
func NewUpdateAwsClusterRequestWithBody(server string, organizationId string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/aws/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAzureClusterRequest calls the generic CreateAzureCluster builder with application/json body
func NewCreateAzureClusterRequest(server string, organizationId string, body CreateAzureClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAzureClusterRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateAzureClusterRequestWithBody generates requests for CreateAzureCluster with any type of body
func NewCreateAzureClusterRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/azure", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAzureClusterRequest calls the generic UpdateAzureCluster builder with application/json body
func NewUpdateAzureClusterRequest(server string, organizationId string, clusterId string, body UpdateAzureClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAzureClusterRequestWithBody(server, organizationId, clusterId, "application/json", bodyReader)
}

// NewUpdateAzureClusterRequestWithBody generates requests for UpdateAzureCluster with any type of body
func NewUpdateAzureClusterRequestWithBody(server string, organizationId string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/azure/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateGcpClusterRequest calls the generic CreateGcpCluster builder with application/json body
func NewCreateGcpClusterRequest(server string, organizationId string, body CreateGcpClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGcpClusterRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateGcpClusterRequestWithBody generates requests for CreateGcpCluster with any type of body
func NewCreateGcpClusterRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/gcp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateGcpClusterRequest calls the generic UpdateGcpCluster builder with application/json body
func NewUpdateGcpClusterRequest(server string, organizationId string, clusterId string, body UpdateGcpClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGcpClusterRequestWithBody(server, organizationId, clusterId, "application/json", bodyReader)
}

// NewUpdateGcpClusterRequestWithBody generates requests for UpdateGcpCluster with any type of body
func NewUpdateGcpClusterRequestWithBody(server string, organizationId string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/gcp/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterRequest generates requests for DeleteCluster
func NewDeleteClusterRequest(server string, organizationId string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterRequest generates requests for GetCluster
func NewGetClusterRequest(server string, organizationId string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListClusterRoutesRequest generates requests for ListClusterRoutes
func NewListClusterRoutesRequest(server string, organizationId string, clusterId string, params *ListClusterRoutesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/cluster-routes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateClusterRouteRequest calls the generic CreateClusterRoute builder with application/json body
func NewCreateClusterRouteRequest(server string, organizationId string, clusterId string, body CreateClusterRouteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClusterRouteRequestWithBody(server, organizationId, clusterId, "application/json", bodyReader)
}

// NewCreateClusterRouteRequestWithBody generates requests for CreateClusterRoute with any type of body
func NewCreateClusterRouteRequestWithBody(server string, organizationId string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/cluster-routes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterRouteRequest generates requests for DeleteClusterRoute
func NewDeleteClusterRouteRequest(server string, organizationId string, clusterId string, routeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/clusters/%s/cluster-routes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentOptionsRequest generates requests for GetDeploymentOptions
func NewGetDeploymentOptionsRequest(server string, organizationId string, params *GetDeploymentOptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployment-options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DeploymentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deploymentId", runtime.ParamLocationQuery, *params.DeploymentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DeploymentType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deploymentType", runtime.ParamLocationQuery, *params.DeploymentType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Executor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "executor", runtime.ParamLocationQuery, *params.Executor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CloudProvider != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cloudProvider", runtime.ParamLocationQuery, *params.CloudProvider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeploymentsRequest generates requests for ListDeployments
func NewListDeploymentsRequest(server string, organizationId string, params *ListDeploymentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DeploymentIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deploymentIds", runtime.ParamLocationQuery, *params.DeploymentIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WorkspaceIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspaceIds", runtime.ParamLocationQuery, *params.WorkspaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Names != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeploymentRequest calls the generic CreateDeployment builder with application/json body
func NewCreateDeploymentRequest(server string, organizationId string, body CreateDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeploymentRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateDeploymentRequestWithBody generates requests for CreateDeployment with any type of body
func NewCreateDeploymentRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDeploymentRequest generates requests for DeleteDeployment
func NewDeleteDeploymentRequest(server string, organizationId string, deploymentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentRequest generates requests for GetDeployment
func NewGetDeploymentRequest(server string, organizationId string, deploymentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDeploymentRequest calls the generic UpdateDeployment builder with application/json body
func NewUpdateDeploymentRequest(server string, organizationId string, deploymentId string, body UpdateDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDeploymentRequestWithBody(server, organizationId, deploymentId, "application/json", bodyReader)
}

// NewUpdateDeploymentRequestWithBody generates requests for UpdateDeployment with any type of body
func NewUpdateDeploymentRequestWithBody(server string, organizationId string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDeploymentApiTokensRequest generates requests for ListDeploymentApiTokens
func NewListDeploymentApiTokensRequest(server string, organizationId string, deploymentId string, params *ListDeploymentApiTokensParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/api-tokens", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenTypes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenTypes", runtime.ParamLocationQuery, *params.TokenTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeploymentApiTokenRequest calls the generic CreateDeploymentApiToken builder with application/json body
func NewCreateDeploymentApiTokenRequest(server string, organizationId string, deploymentId string, body CreateDeploymentApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeploymentApiTokenRequestWithBody(server, organizationId, deploymentId, "application/json", bodyReader)
}

// NewCreateDeploymentApiTokenRequestWithBody generates requests for CreateDeploymentApiToken with any type of body
func NewCreateDeploymentApiTokenRequestWithBody(server string, organizationId string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/api-tokens", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDeploymentApiTokenRequest generates requests for DeleteDeploymentApiToken
func NewDeleteDeploymentApiTokenRequest(server string, organizationId string, deploymentId string, apiTokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/api-tokens/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentApiTokenRequest generates requests for GetDeploymentApiToken
func NewGetDeploymentApiTokenRequest(server string, organizationId string, deploymentId string, apiTokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/api-tokens/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDeploymentApiTokenRequest calls the generic UpdateDeploymentApiToken builder with application/json body
func NewUpdateDeploymentApiTokenRequest(server string, organizationId string, deploymentId string, apiTokenId string, body UpdateDeploymentApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDeploymentApiTokenRequestWithBody(server, organizationId, deploymentId, apiTokenId, "application/json", bodyReader)
}

// NewUpdateDeploymentApiTokenRequestWithBody generates requests for UpdateDeploymentApiToken with any type of body
func NewUpdateDeploymentApiTokenRequestWithBody(server string, organizationId string, deploymentId string, apiTokenId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/api-tokens/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRotateDeploymentApiTokenRequest generates requests for RotateDeploymentApiToken
func NewRotateDeploymentApiTokenRequest(server string, organizationId string, deploymentId string, apiTokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/api-tokens/%s/rotate", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeployRollbackRequest calls the generic DeployRollback builder with application/json body
func NewDeployRollbackRequest(server string, organizationId string, deploymentId string, body DeployRollbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeployRollbackRequestWithBody(server, organizationId, deploymentId, "application/json", bodyReader)
}

// NewDeployRollbackRequestWithBody generates requests for DeployRollback with any type of body
func NewDeployRollbackRequestWithBody(server string, organizationId string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/deploy-rollback", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDeploysRequest generates requests for ListDeploys
func NewListDeploysRequest(server string, organizationId string, deploymentId string, params *ListDeploysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/deploys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SubjectId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subjectId", runtime.ParamLocationQuery, *params.SubjectId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeployRequest calls the generic CreateDeploy builder with application/json body
func NewCreateDeployRequest(server string, organizationId string, deploymentId string, body CreateDeployJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeployRequestWithBody(server, organizationId, deploymentId, "application/json", bodyReader)
}

// NewCreateDeployRequestWithBody generates requests for CreateDeploy with any type of body
func NewCreateDeployRequestWithBody(server string, organizationId string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/deploys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeployRequest generates requests for GetDeploy
func NewGetDeployRequest(server string, organizationId string, deploymentId string, deployId string, params *GetDeployParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/deploys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeSteps != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeSteps", runtime.ParamLocationQuery, *params.IncludeSteps); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDeployRequest calls the generic UpdateDeploy builder with application/json body
func NewUpdateDeployRequest(server string, organizationId string, deploymentId string, deployId string, body UpdateDeployJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDeployRequestWithBody(server, organizationId, deploymentId, deployId, "application/json", bodyReader)
}

// NewUpdateDeployRequestWithBody generates requests for UpdateDeploy with any type of body
func NewUpdateDeployRequestWithBody(server string, organizationId string, deploymentId string, deployId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/deploys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDeployStepsRequest generates requests for ListDeploySteps
func NewListDeployStepsRequest(server string, organizationId string, deploymentId string, deployId string, params *ListDeployStepsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/deploys/%s/steps", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeployStepLogsRequest generates requests for ListDeployStepLogs
func NewListDeployStepLogsRequest(server string, organizationId string, deploymentId string, deployId string, deployStepId string, params *ListDeployStepLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deployId", runtime.ParamLocationPath, deployId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deployStepId", runtime.ParamLocationPath, deployStepId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/deploys/%s/steps/%s/logs", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SearchId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchId", runtime.ParamLocationQuery, *params.SearchId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentHealthRequest generates requests for GetDeploymentHealth
func NewGetDeploymentHealthRequest(server string, organizationId string, deploymentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/health", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentLogsRequest generates requests for GetDeploymentLogs
func NewGetDeploymentLogsRequest(server string, organizationId string, deploymentId string, params *GetDeploymentLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sources", runtime.ParamLocationQuery, params.Sources); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Range != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "range", runtime.ParamLocationQuery, *params.Range); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxNumResults != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxNumResults", runtime.ParamLocationQuery, *params.MaxNumResults); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SearchId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchId", runtime.ParamLocationQuery, *params.SearchId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SearchText != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchText", runtime.ParamLocationQuery, *params.SearchText); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDeploymentTeamsRequest generates requests for ListDeploymentTeams
func NewListDeploymentTeamsRequest(server string, organizationId string, deploymentId string, params *ListDeploymentTeamsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/teams", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeDeploymentRoles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDeploymentRoles", runtime.ParamLocationQuery, *params.IncludeDeploymentRoles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDeploymentTeamRequest generates requests for DeleteDeploymentTeam
func NewDeleteDeploymentTeamRequest(server string, organizationId string, deploymentId string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/teams/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMutateDeploymentTeamRoleRequest calls the generic MutateDeploymentTeamRole builder with application/json body
func NewMutateDeploymentTeamRoleRequest(server string, organizationId string, deploymentId string, teamId string, body MutateDeploymentTeamRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMutateDeploymentTeamRoleRequestWithBody(server, organizationId, deploymentId, teamId, "application/json", bodyReader)
}

// NewMutateDeploymentTeamRoleRequestWithBody generates requests for MutateDeploymentTeamRole with any type of body
func NewMutateDeploymentTeamRoleRequestWithBody(server string, organizationId string, deploymentId string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/teams/%s/role", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDeploymentUsersRequest generates requests for ListDeploymentUsers
func NewListDeploymentUsersRequest(server string, organizationId string, deploymentId string, params *ListDeploymentUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeDeploymentRoles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDeploymentRoles", runtime.ParamLocationQuery, *params.IncludeDeploymentRoles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDeploymentUserRequest generates requests for DeleteDeploymentUser
func NewDeleteDeploymentUserRequest(server string, organizationId string, deploymentId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMutateDeploymentUserRoleRequest calls the generic MutateDeploymentUserRole builder with application/json body
func NewMutateDeploymentUserRoleRequest(server string, organizationId string, deploymentId string, userId string, body MutateDeploymentUserRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMutateDeploymentUserRoleRequestWithBody(server, organizationId, deploymentId, userId, "application/json", bodyReader)
}

// NewMutateDeploymentUserRoleRequestWithBody generates requests for MutateDeploymentUserRole with any type of body
func NewMutateDeploymentUserRoleRequestWithBody(server string, organizationId string, deploymentId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/deployments/%s/users/%s/role", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEnvironmentObjectsRequest generates requests for ListEnvironmentObjects
func NewListEnvironmentObjectsRequest(server string, organizationId string, params *ListEnvironmentObjectsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environment-objects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WorkspaceId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspaceId", runtime.ParamLocationQuery, *params.WorkspaceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DeploymentId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deploymentId", runtime.ParamLocationQuery, *params.DeploymentId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ObjectType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectType", runtime.ParamLocationQuery, *params.ObjectType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ObjectKey != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectKey", runtime.ParamLocationQuery, *params.ObjectKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShowSecrets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showSecrets", runtime.ParamLocationQuery, *params.ShowSecrets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ResolveLinked != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolveLinked", runtime.ParamLocationQuery, *params.ResolveLinked); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentObjectRequest calls the generic CreateEnvironmentObject builder with application/json body
func NewCreateEnvironmentObjectRequest(server string, organizationId string, body CreateEnvironmentObjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentObjectRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateEnvironmentObjectRequestWithBody generates requests for CreateEnvironmentObject with any type of body
func NewCreateEnvironmentObjectRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environment-objects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentObjectRequest generates requests for DeleteEnvironmentObject
func NewDeleteEnvironmentObjectRequest(server string, organizationId string, environmentObjectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentObjectId", runtime.ParamLocationPath, environmentObjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environment-objects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentObjectRequest generates requests for GetEnvironmentObject
func NewGetEnvironmentObjectRequest(server string, organizationId string, environmentObjectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentObjectId", runtime.ParamLocationPath, environmentObjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environment-objects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentObjectRequest calls the generic UpdateEnvironmentObject builder with application/json body
func NewUpdateEnvironmentObjectRequest(server string, organizationId string, environmentObjectId string, body UpdateEnvironmentObjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEnvironmentObjectRequestWithBody(server, organizationId, environmentObjectId, "application/json", bodyReader)
}

// NewUpdateEnvironmentObjectRequestWithBody generates requests for UpdateEnvironmentObject with any type of body
func NewUpdateEnvironmentObjectRequestWithBody(server string, organizationId string, environmentObjectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentObjectId", runtime.ParamLocationPath, environmentObjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environment-objects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUserInviteRequest calls the generic CreateUserInvite builder with application/json body
func NewCreateUserInviteRequest(server string, organizationId string, body CreateUserInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserInviteRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateUserInviteRequestWithBody generates requests for CreateUserInvite with any type of body
func NewCreateUserInviteRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/invites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserInviteRequest generates requests for DeleteUserInvite
func NewDeleteUserInviteRequest(server string, organizationId string, inviteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/invites/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRoleTemplatesRequest generates requests for ListRoleTemplates
func NewListRoleTemplatesRequest(server string, organizationId string, params *ListRoleTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/role-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ScopeTypes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopeTypes", runtime.ParamLocationQuery, *params.ScopeTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRolesRequest generates requests for ListRoles
func NewListRolesRequest(server string, organizationId string, params *ListRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeDefaultRoles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDefaultRoles", runtime.ParamLocationQuery, *params.IncludeDefaultRoles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ScopeTypes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopeTypes", runtime.ParamLocationQuery, *params.ScopeTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomRoleRequest calls the generic CreateCustomRole builder with application/json body
func NewCreateCustomRoleRequest(server string, organizationId string, body CreateCustomRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomRoleRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateCustomRoleRequestWithBody generates requests for CreateCustomRole with any type of body
func NewCreateCustomRoleRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomRoleRequest generates requests for DeleteCustomRole
func NewDeleteCustomRoleRequest(server string, organizationId string, customRoleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customRoleId", runtime.ParamLocationPath, customRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomRoleRequest calls the generic UpdateCustomRole builder with application/json body
func NewUpdateCustomRoleRequest(server string, organizationId string, customRoleId string, body UpdateCustomRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomRoleRequestWithBody(server, organizationId, customRoleId, "application/json", bodyReader)
}

// NewUpdateCustomRoleRequestWithBody generates requests for UpdateCustomRole with any type of body
func NewUpdateCustomRoleRequestWithBody(server string, organizationId string, customRoleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customRoleId", runtime.ParamLocationPath, customRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomRoleRequest generates requests for GetCustomRole
func NewGetCustomRoleRequest(server string, organizationId string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleId", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRoleBindingsRequest generates requests for ListRoleBindings
func NewListRoleBindingsRequest(server string, organizationId string, roleId string, params *ListRoleBindingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleId", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles/%s/role-bindings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SubjectTypes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subjectTypes", runtime.ParamLocationQuery, *params.SubjectTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationTeamsRequest generates requests for ListOrganizationTeams
func NewListOrganizationTeamsRequest(server string, organizationId string, params *ListOrganizationTeamsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeMembers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeMembers", runtime.ParamLocationQuery, *params.IncludeMembers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeWorkspaceRoles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeWorkspaceRoles", runtime.ParamLocationQuery, *params.IncludeWorkspaceRoles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeDeploymentRoles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDeploymentRoles", runtime.ParamLocationQuery, *params.IncludeDeploymentRoles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSubjectInfo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeSubjectInfo", runtime.ParamLocationQuery, *params.IncludeSubjectInfo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequest calls the generic CreateTeam builder with application/json body
func NewCreateTeamRequest(server string, organizationId string, body CreateTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, organizationId string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, organizationId string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequest calls the generic UpdateTeam builder with application/json body
func NewUpdateTeamRequest(server string, organizationId string, teamId string, body UpdateTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamRequestWithBody(server, organizationId, teamId, "application/json", bodyReader)
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, organizationId string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddTeamMembersRequest calls the generic AddTeamMembers builder with application/json body
func NewAddTeamMembersRequest(server string, organizationId string, teamId string, body AddTeamMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTeamMembersRequestWithBody(server, organizationId, teamId, "application/json", bodyReader)
}

// NewAddTeamMembersRequestWithBody generates requests for AddTeamMembers with any type of body
func NewAddTeamMembersRequestWithBody(server string, organizationId string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/teams/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveTeamMemberRequest generates requests for RemoveTeamMember
func NewRemoveTeamMemberRequest(server string, organizationId string, teamId string, memberId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "memberId", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/teams/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMutateOrgTeamRoleRequest calls the generic MutateOrgTeamRole builder with application/json body
func NewMutateOrgTeamRoleRequest(server string, organizationId string, teamId string, body MutateOrgTeamRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMutateOrgTeamRoleRequestWithBody(server, organizationId, teamId, "application/json", bodyReader)
}

// NewMutateOrgTeamRoleRequestWithBody generates requests for MutateOrgTeamRole with any type of body
func NewMutateOrgTeamRoleRequestWithBody(server string, organizationId string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/teams/%s/role", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrgUsersRequest generates requests for ListOrgUsers
func NewListOrgUsersRequest(server string, organizationId string, params *ListOrgUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeDeploymentRoles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDeploymentRoles", runtime.ParamLocationQuery, *params.IncludeDeploymentRoles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeWorkspaceRoles != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeWorkspaceRoles", runtime.ParamLocationQuery, *params.IncludeWorkspaceRoles); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasInvites != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hasInvites", runtime.ParamLocationQuery, *params.HasInvites); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOrgUserRequest generates requests for DeleteOrgUser
func NewDeleteOrgUserRequest(server string, organizationId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, organizationId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMutateOrgUserRoleRequest calls the generic MutateOrgUserRole builder with application/json body
func NewMutateOrgUserRoleRequest(server string, organizationId string, userId string, body MutateOrgUserRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMutateOrgUserRoleRequestWithBody(server, organizationId, userId, "application/json", bodyReader)
}

// NewMutateOrgUserRoleRequestWithBody generates requests for MutateOrgUserRole with any type of body
func NewMutateOrgUserRoleRequestWithBody(server string, organizationId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/role", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspacesRequest generates requests for ListWorkspaces
func NewListWorkspacesRequest(server string, organizationId string, params *ListWorkspacesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.WorkspaceIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspaceIds", runtime.ParamLocationQuery, *params.WorkspaceIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Names != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, *params.Names); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkspaceRequest calls the generic CreateWorkspace builder with application/json body
func NewCreateWorkspaceRequest(server string, organizationId string, body CreateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkspaceRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateWorkspaceRequestWithBody generates requests for CreateWorkspace with any type of body
func NewCreateWorkspaceRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceRequest generates requests for DeleteWorkspace
func NewDeleteWorkspaceRequest(server string, organizationId string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceRequest generates requests for GetWorkspace
func NewGetWorkspaceRequest(server string, organizationId string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, organizationId string, workspaceId string, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceRequestWithBody(server, organizationId, workspaceId, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, organizationId string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspaceApiTokensRequest generates requests for ListWorkspaceApiTokens
func NewListWorkspaceApiTokensRequest(server string, organizationId string, workspaceId string, params *ListWorkspaceApiTokensParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/api-tokens", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TokenTypes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tokenTypes", runtime.ParamLocationQuery, *params.TokenTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWorkspaceApiTokenRequest calls the generic CreateWorkspaceApiToken builder with application/json body
func NewCreateWorkspaceApiTokenRequest(server string, organizationId string, workspaceId string, body CreateWorkspaceApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkspaceApiTokenRequestWithBody(server, organizationId, workspaceId, "application/json", bodyReader)
}

// NewCreateWorkspaceApiTokenRequestWithBody generates requests for CreateWorkspaceApiToken with any type of body
func NewCreateWorkspaceApiTokenRequestWithBody(server string, organizationId string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/api-tokens", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceApiTokenRequest generates requests for DeleteWorkspaceApiToken
func NewDeleteWorkspaceApiTokenRequest(server string, organizationId string, workspaceId string, apiTokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/api-tokens/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspaceApiTokenRequest generates requests for GetWorkspaceApiToken
func NewGetWorkspaceApiTokenRequest(server string, organizationId string, workspaceId string, apiTokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/api-tokens/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceApiTokenRequest calls the generic UpdateWorkspaceApiToken builder with application/json body
func NewUpdateWorkspaceApiTokenRequest(server string, organizationId string, workspaceId string, apiTokenId string, body UpdateWorkspaceApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceApiTokenRequestWithBody(server, organizationId, workspaceId, apiTokenId, "application/json", bodyReader)
}

// NewUpdateWorkspaceApiTokenRequestWithBody generates requests for UpdateWorkspaceApiToken with any type of body
func NewUpdateWorkspaceApiTokenRequestWithBody(server string, organizationId string, workspaceId string, apiTokenId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/api-tokens/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRotateWorkspaceApiTokenRequest generates requests for RotateWorkspaceApiToken
func NewRotateWorkspaceApiTokenRequest(server string, organizationId string, workspaceId string, apiTokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "apiTokenId", runtime.ParamLocationPath, apiTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/api-tokens/%s/rotate", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWorkspaceDagFiltersRequest generates requests for ListWorkspaceDagFilters
func NewListWorkspaceDagFiltersRequest(server string, organizationId string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/dag-filters", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWorkspaceDagsRequest generates requests for ListWorkspaceDags
func NewListWorkspaceDagsRequest(server string, organizationId string, workspaceId string, params *ListWorkspaceDagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/dags", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NumRuns != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "numRuns", runtime.ParamLocationQuery, *params.NumRuns); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NameLike != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__like", runtime.ParamLocationQuery, *params.NameLike); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Owner != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsPaused != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isPaused", runtime.ParamLocationQuery, *params.IsPaused); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isActive", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastRunStateIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "lastRunState__in", runtime.ParamLocationQuery, *params.LastRunStateIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RunStateIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "runState__in", runtime.ParamLocationQuery, *params.RunStateIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RunAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "runAfter", runtime.ParamLocationQuery, *params.RunAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TagIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tag__in", runtime.ParamLocationQuery, *params.TagIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DeploymentIdIn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "deploymentId__in", runtime.ParamLocationQuery, *params.DeploymentIdIn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTransferDeploymentRequest calls the generic TransferDeployment builder with application/json body
func NewTransferDeploymentRequest(server string, organizationId string, workspaceId string, deploymentId string, body TransferDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTransferDeploymentRequestWithBody(server, organizationId, workspaceId, deploymentId, "application/json", bodyReader)
}

// NewTransferDeploymentRequestWithBody generates requests for TransferDeployment with any type of body
func NewTransferDeploymentRequestWithBody(server string, organizationId string, workspaceId string, deploymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/deployments/%s/transfer", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspaceTeamsRequest generates requests for ListWorkspaceTeams
func NewListWorkspaceTeamsRequest(server string, organizationId string, workspaceId string, params *ListWorkspaceTeamsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/teams", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWorkspaceTeamRequest generates requests for DeleteWorkspaceTeam
func NewDeleteWorkspaceTeamRequest(server string, organizationId string, workspaceId string, teamId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/teams/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMutateWorkspaceTeamRoleRequest calls the generic MutateWorkspaceTeamRole builder with application/json body
func NewMutateWorkspaceTeamRoleRequest(server string, organizationId string, workspaceId string, teamId string, body MutateWorkspaceTeamRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMutateWorkspaceTeamRoleRequestWithBody(server, organizationId, workspaceId, teamId, "application/json", bodyReader)
}

// NewMutateWorkspaceTeamRoleRequestWithBody generates requests for MutateWorkspaceTeamRole with any type of body
func NewMutateWorkspaceTeamRoleRequestWithBody(server string, organizationId string, workspaceId string, teamId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/teams/%s/role", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspaceUsersRequest generates requests for ListWorkspaceUsers
func NewListWorkspaceUsersRequest(server string, organizationId string, workspaceId string, params *ListWorkspaceUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sorts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sorts", runtime.ParamLocationQuery, *params.Sorts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWorkspaceUserRequest generates requests for DeleteWorkspaceUser
func NewDeleteWorkspaceUserRequest(server string, organizationId string, workspaceId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMutateWorkspaceUserRoleRequest calls the generic MutateWorkspaceUserRole builder with application/json body
func NewMutateWorkspaceUserRoleRequest(server string, organizationId string, workspaceId string, userId string, body MutateWorkspaceUserRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMutateWorkspaceUserRoleRequestWithBody(server, organizationId, workspaceId, userId, "application/json", bodyReader)
}

// NewMutateWorkspaceUserRoleRequestWithBody generates requests for MutateWorkspaceUserRole with any type of body
func NewMutateWorkspaceUserRoleRequestWithBody(server string, organizationId string, workspaceId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/workspaces/%s/users/%s/role", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSelfUserRequest generates requests for GetSelfUser
func NewGetSelfUserRequest(server string, params *GetSelfUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CreateIfNotExist != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createIfNotExist", runtime.ParamLocationQuery, *params.CreateIfNotExist); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeGitHubAccounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeGitHubAccounts", runtime.ParamLocationQuery, *params.IncludeGitHubAccounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSelfUserRepositoriesRequest generates requests for ListSelfUserRepositories
func NewListSelfUserRepositoriesRequest(server string, gitProvider ListSelfUserRepositoriesParamsGitProvider, gitAccount string, params *ListSelfUserRepositoriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gitProvider", runtime.ParamLocationPath, gitProvider)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "gitAccount", runtime.ParamLocationPath, gitAccount)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/self/git-providers/%s/accounts/%s/repositories", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSelfUserRepositoryBranchRequest generates requests for GetSelfUserRepositoryBranch
func NewGetSelfUserRepositoryBranchRequest(server string, gitProvider GetSelfUserRepositoryBranchParamsGitProvider, gitAccount string, gitRepository string, gitBranch string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gitProvider", runtime.ParamLocationPath, gitProvider)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "gitAccount", runtime.ParamLocationPath, gitAccount)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "gitRepository", runtime.ParamLocationPath, gitRepository)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "gitBranch", runtime.ParamLocationPath, gitBranch)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/self/git-providers/%s/accounts/%s/repositories/%s/branches/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSelfUserGitAppAuthorizationRequest generates requests for GetSelfUserGitAppAuthorization
func NewGetSelfUserGitAppAuthorizationRequest(server string, gitProvider GetSelfUserGitAppAuthorizationParamsGitProvider) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gitProvider", runtime.ParamLocationPath, gitProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/self/git-providers/%s/authorization", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSelfUserGitAppInstallationRequest generates requests for GetSelfUserGitAppInstallation
func NewGetSelfUserGitAppInstallationRequest(server string, gitProvider GetSelfUserGitAppInstallationParamsGitProvider) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gitProvider", runtime.ParamLocationPath, gitProvider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/self/git-providers/%s/installation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSelfUserInviteRequest calls the generic UpdateSelfUserInvite builder with application/json body
func NewUpdateSelfUserInviteRequest(server string, inviteId string, body UpdateSelfUserInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSelfUserInviteRequestWithBody(server, inviteId, "application/json", bodyReader)
}

// NewUpdateSelfUserInviteRequestWithBody generates requests for UpdateSelfUserInvite with any type of body
func NewUpdateSelfUserInviteRequestWithBody(server string, inviteId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/self/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetUserInvite request
	GetUserInviteWithResponse(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*GetUserInviteResponse, error)

	// GetSharedCluster request
	GetSharedClusterWithResponse(ctx context.Context, params *GetSharedClusterParams, reqEditors ...RequestEditorFn) (*GetSharedClusterResponse, error)

	// GetClusterOptions request
	GetClusterOptionsWithResponse(ctx context.Context, params *GetClusterOptionsParams, reqEditors ...RequestEditorFn) (*GetClusterOptionsResponse, error)

	// ListOrganizations request
	ListOrganizationsWithResponse(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error)

	// CreateOrganization request with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	// GetOrganization request
	GetOrganizationWithResponse(ctx context.Context, organizationId string, params *GetOrganizationParams, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error)

	// UpdateOrganization request with any body
	UpdateOrganizationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	UpdateOrganizationWithResponse(ctx context.Context, organizationId string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	// ListOrganizationApiTokens request
	ListOrganizationApiTokensWithResponse(ctx context.Context, organizationId string, params *ListOrganizationApiTokensParams, reqEditors ...RequestEditorFn) (*ListOrganizationApiTokensResponse, error)

	// CreateOrganizationApiToken request with any body
	CreateOrganizationApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationApiTokenResponse, error)

	CreateOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, body CreateOrganizationApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationApiTokenResponse, error)

	// DeleteOrganizationApiToken request
	DeleteOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*DeleteOrganizationApiTokenResponse, error)

	// GetOrganizationApiToken request
	GetOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*GetOrganizationApiTokenResponse, error)

	// UpdateOrganizationApiToken request with any body
	UpdateOrganizationApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationApiTokenResponse, error)

	UpdateOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, body UpdateOrganizationApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationApiTokenResponse, error)

	// RotateOrganizationApiToken request
	RotateOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*RotateOrganizationApiTokenResponse, error)

	// GetOrganizationAuditLogs request
	GetOrganizationAuditLogsWithResponse(ctx context.Context, organizationId string, params *GetOrganizationAuditLogsParams, reqEditors ...RequestEditorFn) (*GetOrganizationAuditLogsResponse, error)

	// ListClusters request
	ListClustersWithResponse(ctx context.Context, organizationId string, params *ListClustersParams, reqEditors ...RequestEditorFn) (*ListClustersResponse, error)

	// CreateAwsCluster request with any body
	CreateAwsClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAwsClusterResponse, error)

	CreateAwsClusterWithResponse(ctx context.Context, organizationId string, body CreateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAwsClusterResponse, error)

	// UpdateAwsCluster request with any body
	UpdateAwsClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAwsClusterResponse, error)

	UpdateAwsClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body UpdateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAwsClusterResponse, error)

	// CreateAzureCluster request with any body
	CreateAzureClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAzureClusterResponse, error)

	CreateAzureClusterWithResponse(ctx context.Context, organizationId string, body CreateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAzureClusterResponse, error)

	// UpdateAzureCluster request with any body
	UpdateAzureClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAzureClusterResponse, error)

	UpdateAzureClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body UpdateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAzureClusterResponse, error)

	// CreateGcpCluster request with any body
	CreateGcpClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGcpClusterResponse, error)

	CreateGcpClusterWithResponse(ctx context.Context, organizationId string, body CreateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGcpClusterResponse, error)

	// UpdateGcpCluster request with any body
	UpdateGcpClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGcpClusterResponse, error)

	UpdateGcpClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body UpdateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGcpClusterResponse, error)

	// DeleteCluster request
	DeleteClusterWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error)

	// GetCluster request
	GetClusterWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterResponse, error)

	// ListClusterRoutes request
	ListClusterRoutesWithResponse(ctx context.Context, organizationId string, clusterId string, params *ListClusterRoutesParams, reqEditors ...RequestEditorFn) (*ListClusterRoutesResponse, error)

	// CreateClusterRoute request with any body
	CreateClusterRouteWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterRouteResponse, error)

	CreateClusterRouteWithResponse(ctx context.Context, organizationId string, clusterId string, body CreateClusterRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterRouteResponse, error)

	// DeleteClusterRoute request
	DeleteClusterRouteWithResponse(ctx context.Context, organizationId string, clusterId string, routeId string, reqEditors ...RequestEditorFn) (*DeleteClusterRouteResponse, error)

	// GetDeploymentOptions request
	GetDeploymentOptionsWithResponse(ctx context.Context, organizationId string, params *GetDeploymentOptionsParams, reqEditors ...RequestEditorFn) (*GetDeploymentOptionsResponse, error)

	// ListDeployments request
	ListDeploymentsWithResponse(ctx context.Context, organizationId string, params *ListDeploymentsParams, reqEditors ...RequestEditorFn) (*ListDeploymentsResponse, error)

	// CreateDeployment request with any body
	CreateDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error)

	CreateDeploymentWithResponse(ctx context.Context, organizationId string, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error)

	// DeleteDeployment request
	DeleteDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*DeleteDeploymentResponse, error)

	// GetDeployment request
	GetDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*GetDeploymentResponse, error)

	// UpdateDeployment request with any body
	UpdateDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeploymentResponse, error)

	UpdateDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, body UpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeploymentResponse, error)

	// ListDeploymentApiTokens request
	ListDeploymentApiTokensWithResponse(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentApiTokensParams, reqEditors ...RequestEditorFn) (*ListDeploymentApiTokensResponse, error)

	// CreateDeploymentApiToken request with any body
	CreateDeploymentApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeploymentApiTokenResponse, error)

	CreateDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, body CreateDeploymentApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeploymentApiTokenResponse, error)

	// DeleteDeploymentApiToken request
	DeleteDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*DeleteDeploymentApiTokenResponse, error)

	// GetDeploymentApiToken request
	GetDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*GetDeploymentApiTokenResponse, error)

	// UpdateDeploymentApiToken request with any body
	UpdateDeploymentApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeploymentApiTokenResponse, error)

	UpdateDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, body UpdateDeploymentApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeploymentApiTokenResponse, error)

	// RotateDeploymentApiToken request
	RotateDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*RotateDeploymentApiTokenResponse, error)

	// DeployRollback request with any body
	DeployRollbackWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeployRollbackResponse, error)

	DeployRollbackWithResponse(ctx context.Context, organizationId string, deploymentId string, body DeployRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*DeployRollbackResponse, error)

	// ListDeploys request
	ListDeploysWithResponse(ctx context.Context, organizationId string, deploymentId string, params *ListDeploysParams, reqEditors ...RequestEditorFn) (*ListDeploysResponse, error)

	// CreateDeploy request with any body
	CreateDeployWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeployResponse, error)

	CreateDeployWithResponse(ctx context.Context, organizationId string, deploymentId string, body CreateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeployResponse, error)

	// GetDeploy request
	GetDeployWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, params *GetDeployParams, reqEditors ...RequestEditorFn) (*GetDeployResponse, error)

	// UpdateDeploy request with any body
	UpdateDeployWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeployResponse, error)

	UpdateDeployWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, body UpdateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeployResponse, error)

	// ListDeploySteps request
	ListDeployStepsWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, params *ListDeployStepsParams, reqEditors ...RequestEditorFn) (*ListDeployStepsResponse, error)

	// ListDeployStepLogs request
	ListDeployStepLogsWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, deployStepId string, params *ListDeployStepLogsParams, reqEditors ...RequestEditorFn) (*ListDeployStepLogsResponse, error)

	// GetDeploymentHealth request
	GetDeploymentHealthWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*GetDeploymentHealthResponse, error)

	// GetDeploymentLogs request
	GetDeploymentLogsWithResponse(ctx context.Context, organizationId string, deploymentId string, params *GetDeploymentLogsParams, reqEditors ...RequestEditorFn) (*GetDeploymentLogsResponse, error)

	// ListDeploymentTeams request
	ListDeploymentTeamsWithResponse(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentTeamsParams, reqEditors ...RequestEditorFn) (*ListDeploymentTeamsResponse, error)

	// DeleteDeploymentTeam request
	DeleteDeploymentTeamWithResponse(ctx context.Context, organizationId string, deploymentId string, teamId string, reqEditors ...RequestEditorFn) (*DeleteDeploymentTeamResponse, error)

	// MutateDeploymentTeamRole request with any body
	MutateDeploymentTeamRoleWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateDeploymentTeamRoleResponse, error)

	MutateDeploymentTeamRoleWithResponse(ctx context.Context, organizationId string, deploymentId string, teamId string, body MutateDeploymentTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateDeploymentTeamRoleResponse, error)

	// ListDeploymentUsers request
	ListDeploymentUsersWithResponse(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentUsersParams, reqEditors ...RequestEditorFn) (*ListDeploymentUsersResponse, error)

	// DeleteDeploymentUser request
	DeleteDeploymentUserWithResponse(ctx context.Context, organizationId string, deploymentId string, userId string, reqEditors ...RequestEditorFn) (*DeleteDeploymentUserResponse, error)

	// MutateDeploymentUserRole request with any body
	MutateDeploymentUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateDeploymentUserRoleResponse, error)

	MutateDeploymentUserRoleWithResponse(ctx context.Context, organizationId string, deploymentId string, userId string, body MutateDeploymentUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateDeploymentUserRoleResponse, error)

	// ListEnvironmentObjects request
	ListEnvironmentObjectsWithResponse(ctx context.Context, organizationId string, params *ListEnvironmentObjectsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentObjectsResponse, error)

	// CreateEnvironmentObject request with any body
	CreateEnvironmentObjectWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentObjectResponse, error)

	CreateEnvironmentObjectWithResponse(ctx context.Context, organizationId string, body CreateEnvironmentObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentObjectResponse, error)

	// DeleteEnvironmentObject request
	DeleteEnvironmentObjectWithResponse(ctx context.Context, organizationId string, environmentObjectId string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentObjectResponse, error)

	// GetEnvironmentObject request
	GetEnvironmentObjectWithResponse(ctx context.Context, organizationId string, environmentObjectId string, reqEditors ...RequestEditorFn) (*GetEnvironmentObjectResponse, error)

	// UpdateEnvironmentObject request with any body
	UpdateEnvironmentObjectWithBodyWithResponse(ctx context.Context, organizationId string, environmentObjectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentObjectResponse, error)

	UpdateEnvironmentObjectWithResponse(ctx context.Context, organizationId string, environmentObjectId string, body UpdateEnvironmentObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentObjectResponse, error)

	// CreateUserInvite request with any body
	CreateUserInviteWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserInviteResponse, error)

	CreateUserInviteWithResponse(ctx context.Context, organizationId string, body CreateUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserInviteResponse, error)

	// DeleteUserInvite request
	DeleteUserInviteWithResponse(ctx context.Context, organizationId string, inviteId string, reqEditors ...RequestEditorFn) (*DeleteUserInviteResponse, error)

	// ListRoleTemplates request
	ListRoleTemplatesWithResponse(ctx context.Context, organizationId string, params *ListRoleTemplatesParams, reqEditors ...RequestEditorFn) (*ListRoleTemplatesResponse, error)

	// ListRoles request
	ListRolesWithResponse(ctx context.Context, organizationId string, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error)

	// CreateCustomRole request with any body
	CreateCustomRoleWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomRoleResponse, error)

	CreateCustomRoleWithResponse(ctx context.Context, organizationId string, body CreateCustomRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomRoleResponse, error)

	// DeleteCustomRole request
	DeleteCustomRoleWithResponse(ctx context.Context, organizationId string, customRoleId string, reqEditors ...RequestEditorFn) (*DeleteCustomRoleResponse, error)

	// UpdateCustomRole request with any body
	UpdateCustomRoleWithBodyWithResponse(ctx context.Context, organizationId string, customRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomRoleResponse, error)

	UpdateCustomRoleWithResponse(ctx context.Context, organizationId string, customRoleId string, body UpdateCustomRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomRoleResponse, error)

	// GetCustomRole request
	GetCustomRoleWithResponse(ctx context.Context, organizationId string, roleId string, reqEditors ...RequestEditorFn) (*GetCustomRoleResponse, error)

	// ListRoleBindings request
	ListRoleBindingsWithResponse(ctx context.Context, organizationId string, roleId string, params *ListRoleBindingsParams, reqEditors ...RequestEditorFn) (*ListRoleBindingsResponse, error)

	// ListOrganizationTeams request
	ListOrganizationTeamsWithResponse(ctx context.Context, organizationId string, params *ListOrganizationTeamsParams, reqEditors ...RequestEditorFn) (*ListOrganizationTeamsResponse, error)

	// CreateTeam request with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	CreateTeamWithResponse(ctx context.Context, organizationId string, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeam request
	DeleteTeamWithResponse(ctx context.Context, organizationId string, teamId string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeam request
	GetTeamWithResponse(ctx context.Context, organizationId string, teamId string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeam request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	UpdateTeamWithResponse(ctx context.Context, organizationId string, teamId string, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// AddTeamMembers request with any body
	AddTeamMembersWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTeamMembersResponse, error)

	AddTeamMembersWithResponse(ctx context.Context, organizationId string, teamId string, body AddTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTeamMembersResponse, error)

	// RemoveTeamMember request
	RemoveTeamMemberWithResponse(ctx context.Context, organizationId string, teamId string, memberId string, reqEditors ...RequestEditorFn) (*RemoveTeamMemberResponse, error)

	// MutateOrgTeamRole request with any body
	MutateOrgTeamRoleWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateOrgTeamRoleResponse, error)

	MutateOrgTeamRoleWithResponse(ctx context.Context, organizationId string, teamId string, body MutateOrgTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateOrgTeamRoleResponse, error)

	// ListOrgUsers request
	ListOrgUsersWithResponse(ctx context.Context, organizationId string, params *ListOrgUsersParams, reqEditors ...RequestEditorFn) (*ListOrgUsersResponse, error)

	// DeleteOrgUser request
	DeleteOrgUserWithResponse(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*DeleteOrgUserResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// MutateOrgUserRole request with any body
	MutateOrgUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateOrgUserRoleResponse, error)

	MutateOrgUserRoleWithResponse(ctx context.Context, organizationId string, userId string, body MutateOrgUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateOrgUserRoleResponse, error)

	// ListWorkspaces request
	ListWorkspacesWithResponse(ctx context.Context, organizationId string, params *ListWorkspacesParams, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error)

	// CreateWorkspace request with any body
	CreateWorkspaceWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error)

	CreateWorkspaceWithResponse(ctx context.Context, organizationId string, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error)

	// DeleteWorkspace request
	DeleteWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error)

	// GetWorkspace request
	GetWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	// UpdateWorkspace request with any body
	UpdateWorkspaceWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	UpdateWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	// ListWorkspaceApiTokens request
	ListWorkspaceApiTokensWithResponse(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceApiTokensParams, reqEditors ...RequestEditorFn) (*ListWorkspaceApiTokensResponse, error)

	// CreateWorkspaceApiToken request with any body
	CreateWorkspaceApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceApiTokenResponse, error)

	CreateWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, body CreateWorkspaceApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceApiTokenResponse, error)

	// DeleteWorkspaceApiToken request
	DeleteWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceApiTokenResponse, error)

	// GetWorkspaceApiToken request
	GetWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*GetWorkspaceApiTokenResponse, error)

	// UpdateWorkspaceApiToken request with any body
	UpdateWorkspaceApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceApiTokenResponse, error)

	UpdateWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, body UpdateWorkspaceApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceApiTokenResponse, error)

	// RotateWorkspaceApiToken request
	RotateWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*RotateWorkspaceApiTokenResponse, error)

	// ListWorkspaceDagFilters request
	ListWorkspaceDagFiltersWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*ListWorkspaceDagFiltersResponse, error)

	// ListWorkspaceDags request
	ListWorkspaceDagsWithResponse(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceDagsParams, reqEditors ...RequestEditorFn) (*ListWorkspaceDagsResponse, error)

	// TransferDeployment request with any body
	TransferDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferDeploymentResponse, error)

	TransferDeploymentWithResponse(ctx context.Context, organizationId string, workspaceId string, deploymentId string, body TransferDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferDeploymentResponse, error)

	// ListWorkspaceTeams request
	ListWorkspaceTeamsWithResponse(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceTeamsParams, reqEditors ...RequestEditorFn) (*ListWorkspaceTeamsResponse, error)

	// DeleteWorkspaceTeam request
	DeleteWorkspaceTeamWithResponse(ctx context.Context, organizationId string, workspaceId string, teamId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceTeamResponse, error)

	// MutateWorkspaceTeamRole request with any body
	MutateWorkspaceTeamRoleWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateWorkspaceTeamRoleResponse, error)

	MutateWorkspaceTeamRoleWithResponse(ctx context.Context, organizationId string, workspaceId string, teamId string, body MutateWorkspaceTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateWorkspaceTeamRoleResponse, error)

	// ListWorkspaceUsers request
	ListWorkspaceUsersWithResponse(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceUsersParams, reqEditors ...RequestEditorFn) (*ListWorkspaceUsersResponse, error)

	// DeleteWorkspaceUser request
	DeleteWorkspaceUserWithResponse(ctx context.Context, organizationId string, workspaceId string, userId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceUserResponse, error)

	// MutateWorkspaceUserRole request with any body
	MutateWorkspaceUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateWorkspaceUserRoleResponse, error)

	MutateWorkspaceUserRoleWithResponse(ctx context.Context, organizationId string, workspaceId string, userId string, body MutateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateWorkspaceUserRoleResponse, error)

	// GetSelfUser request
	GetSelfUserWithResponse(ctx context.Context, params *GetSelfUserParams, reqEditors ...RequestEditorFn) (*GetSelfUserResponse, error)

	// ListSelfUserRepositories request
	ListSelfUserRepositoriesWithResponse(ctx context.Context, gitProvider ListSelfUserRepositoriesParamsGitProvider, gitAccount string, params *ListSelfUserRepositoriesParams, reqEditors ...RequestEditorFn) (*ListSelfUserRepositoriesResponse, error)

	// GetSelfUserRepositoryBranch request
	GetSelfUserRepositoryBranchWithResponse(ctx context.Context, gitProvider GetSelfUserRepositoryBranchParamsGitProvider, gitAccount string, gitRepository string, gitBranch string, reqEditors ...RequestEditorFn) (*GetSelfUserRepositoryBranchResponse, error)

	// GetSelfUserGitAppAuthorization request
	GetSelfUserGitAppAuthorizationWithResponse(ctx context.Context, gitProvider GetSelfUserGitAppAuthorizationParamsGitProvider, reqEditors ...RequestEditorFn) (*GetSelfUserGitAppAuthorizationResponse, error)

	// GetSelfUserGitAppInstallation request
	GetSelfUserGitAppInstallationWithResponse(ctx context.Context, gitProvider GetSelfUserGitAppInstallationParamsGitProvider, reqEditors ...RequestEditorFn) (*GetSelfUserGitAppInstallationResponse, error)

	// UpdateSelfUserInvite request with any body
	UpdateSelfUserInviteWithBodyWithResponse(ctx context.Context, inviteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSelfUserInviteResponse, error)

	UpdateSelfUserInviteWithResponse(ctx context.Context, inviteId string, body UpdateSelfUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSelfUserInviteResponse, error)
}

type GetUserInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSharedClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedCluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSharedClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSharedClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClusterOptions
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetClusterOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationApiTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListApiTokensPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListOrganizationApiTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationApiTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateOrganizationApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RotateOrganizationApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateOrganizationApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationAuditLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]int
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationAuditLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationAuditLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClustersPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAwsClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateAwsClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAwsClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAwsClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateAwsClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAwsClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAzureClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateAzureClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAzureClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAzureClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateAzureClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAzureClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGcpClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateGcpClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGcpClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGcpClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cluster
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON412      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateGcpClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGcpClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterDetailed
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListClusterRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterRoutesPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListClusterRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListClusterRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClusterRouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterRoute
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateClusterRouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClusterRouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClusterRouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteClusterRouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterRouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentOptions
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDeploymentOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeploymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentsPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDeploymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeploymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deployment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deployment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deployment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeploymentApiTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListApiTokensPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDeploymentApiTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeploymentApiTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeploymentApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateDeploymentApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeploymentApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeploymentApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDeploymentApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeploymentApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDeploymentApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeploymentApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateDeploymentApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeploymentApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateDeploymentApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RotateDeploymentApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateDeploymentApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeployRollbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deploy
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeployRollbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeployRollbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeploysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploysPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDeploysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeploysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeployResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deploy
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateDeployResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeployResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeployResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deploy
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDeployResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeployResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeployResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deploy
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateDeployResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeployResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeployStepsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeployStepsPaginated
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDeployStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeployStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeployStepLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeployStepLogsPaginated
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDeployStepLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeployStepLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericJSON
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDeploymentHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentLog
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetDeploymentLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeploymentTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDeploymentTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeploymentTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeploymentTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDeploymentTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeploymentTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MutateDeploymentTeamRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamRole
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r MutateDeploymentTeamRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MutateDeploymentTeamRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDeploymentUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListDeploymentUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDeploymentUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeploymentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDeploymentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeploymentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MutateDeploymentUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRole
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r MutateDeploymentUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MutateDeploymentUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEnvironmentObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentObjectsPaginated
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListEnvironmentObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEnvironmentObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateEnvironmentObject
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentObject
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentObjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentObject
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentObjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentObjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateUserInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUserInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRoleTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleTemplate
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListRoleTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRoleTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RolesPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleWithPermission
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateCustomRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteCustomRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleWithPermission
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateCustomRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleWithPermission
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetCustomRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRoleBindingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleBindingsPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListRoleBindingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRoleBindingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListOrganizationTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTeamMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r AddTeamMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTeamMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveTeamMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RemoveTeamMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveTeamMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MutateOrgTeamRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamRole
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r MutateOrgTeamRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MutateOrgTeamRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrgUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListOrgUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrgUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrgUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteOrgUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrgUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MutateOrgUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRole
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r MutateOrgUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MutateOrgUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspacesPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspaceApiTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListApiTokensPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceApiTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceApiTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkspaceApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateWorkspaceApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiToken
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r RotateWorkspaceApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateWorkspaceApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspaceDagFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DagFilters
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceDagFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceDagFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspaceDagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListWorkspaceDags
	JSON4XX      *Error
	JSON5XX      *Error
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceDagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceDagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransferDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deployment
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r TransferDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransferDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspaceTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MutateWorkspaceTeamRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamRole
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r MutateWorkspaceTeamRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MutateWorkspaceTeamRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspaceUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersPaginated
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MutateWorkspaceUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRole
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r MutateWorkspaceUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MutateWorkspaceUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Self
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSelfUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSelfUserRepositoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepositoriesPaginated
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListSelfUserRepositoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSelfUserRepositoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfUserRepositoryBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepositoryBranch
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSelfUserRepositoryBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfUserRepositoryBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfUserGitAppAuthorizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GitApplicationAuthorization
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSelfUserGitAppAuthorizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfUserGitAppAuthorizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfUserGitAppInstallationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GitApplicationInstallation
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetSelfUserGitAppInstallationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfUserGitAppInstallationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSelfUserInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateSelfUserInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSelfUserInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetUserInviteWithResponse request returning *GetUserInviteResponse
func (c *ClientWithResponses) GetUserInviteWithResponse(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*GetUserInviteResponse, error) {
	rsp, err := c.GetUserInvite(ctx, inviteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInviteResponse(rsp)
}

// GetSharedClusterWithResponse request returning *GetSharedClusterResponse
func (c *ClientWithResponses) GetSharedClusterWithResponse(ctx context.Context, params *GetSharedClusterParams, reqEditors ...RequestEditorFn) (*GetSharedClusterResponse, error) {
	rsp, err := c.GetSharedCluster(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSharedClusterResponse(rsp)
}

// GetClusterOptionsWithResponse request returning *GetClusterOptionsResponse
func (c *ClientWithResponses) GetClusterOptionsWithResponse(ctx context.Context, params *GetClusterOptionsParams, reqEditors ...RequestEditorFn) (*GetClusterOptionsResponse, error) {
	rsp, err := c.GetClusterOptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterOptionsResponse(rsp)
}

// ListOrganizationsWithResponse request returning *ListOrganizationsResponse
func (c *ClientWithResponses) ListOrganizationsWithResponse(ctx context.Context, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error) {
	rsp, err := c.ListOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, organizationId string, params *GetOrganizationParams, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// UpdateOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationResponse
func (c *ClientWithResponses) UpdateOrganizationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationWithResponse(ctx context.Context, organizationId string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganization(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

// ListOrganizationApiTokensWithResponse request returning *ListOrganizationApiTokensResponse
func (c *ClientWithResponses) ListOrganizationApiTokensWithResponse(ctx context.Context, organizationId string, params *ListOrganizationApiTokensParams, reqEditors ...RequestEditorFn) (*ListOrganizationApiTokensResponse, error) {
	rsp, err := c.ListOrganizationApiTokens(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationApiTokensResponse(rsp)
}

// CreateOrganizationApiTokenWithBodyWithResponse request with arbitrary body returning *CreateOrganizationApiTokenResponse
func (c *ClientWithResponses) CreateOrganizationApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationApiTokenResponse, error) {
	rsp, err := c.CreateOrganizationApiTokenWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationApiTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, body CreateOrganizationApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationApiTokenResponse, error) {
	rsp, err := c.CreateOrganizationApiToken(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationApiTokenResponse(rsp)
}

// DeleteOrganizationApiTokenWithResponse request returning *DeleteOrganizationApiTokenResponse
func (c *ClientWithResponses) DeleteOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*DeleteOrganizationApiTokenResponse, error) {
	rsp, err := c.DeleteOrganizationApiToken(ctx, organizationId, apiTokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationApiTokenResponse(rsp)
}

// GetOrganizationApiTokenWithResponse request returning *GetOrganizationApiTokenResponse
func (c *ClientWithResponses) GetOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*GetOrganizationApiTokenResponse, error) {
	rsp, err := c.GetOrganizationApiToken(ctx, organizationId, apiTokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationApiTokenResponse(rsp)
}

// UpdateOrganizationApiTokenWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationApiTokenResponse
func (c *ClientWithResponses) UpdateOrganizationApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationApiTokenResponse, error) {
	rsp, err := c.UpdateOrganizationApiTokenWithBody(ctx, organizationId, apiTokenId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationApiTokenResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, body UpdateOrganizationApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationApiTokenResponse, error) {
	rsp, err := c.UpdateOrganizationApiToken(ctx, organizationId, apiTokenId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationApiTokenResponse(rsp)
}

// RotateOrganizationApiTokenWithResponse request returning *RotateOrganizationApiTokenResponse
func (c *ClientWithResponses) RotateOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...RequestEditorFn) (*RotateOrganizationApiTokenResponse, error) {
	rsp, err := c.RotateOrganizationApiToken(ctx, organizationId, apiTokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateOrganizationApiTokenResponse(rsp)
}

// GetOrganizationAuditLogsWithResponse request returning *GetOrganizationAuditLogsResponse
func (c *ClientWithResponses) GetOrganizationAuditLogsWithResponse(ctx context.Context, organizationId string, params *GetOrganizationAuditLogsParams, reqEditors ...RequestEditorFn) (*GetOrganizationAuditLogsResponse, error) {
	rsp, err := c.GetOrganizationAuditLogs(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationAuditLogsResponse(rsp)
}

// ListClustersWithResponse request returning *ListClustersResponse
func (c *ClientWithResponses) ListClustersWithResponse(ctx context.Context, organizationId string, params *ListClustersParams, reqEditors ...RequestEditorFn) (*ListClustersResponse, error) {
	rsp, err := c.ListClusters(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClustersResponse(rsp)
}

// CreateAwsClusterWithBodyWithResponse request with arbitrary body returning *CreateAwsClusterResponse
func (c *ClientWithResponses) CreateAwsClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAwsClusterResponse, error) {
	rsp, err := c.CreateAwsClusterWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAwsClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateAwsClusterWithResponse(ctx context.Context, organizationId string, body CreateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAwsClusterResponse, error) {
	rsp, err := c.CreateAwsCluster(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAwsClusterResponse(rsp)
}

// UpdateAwsClusterWithBodyWithResponse request with arbitrary body returning *UpdateAwsClusterResponse
func (c *ClientWithResponses) UpdateAwsClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAwsClusterResponse, error) {
	rsp, err := c.UpdateAwsClusterWithBody(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAwsClusterResponse(rsp)
}

func (c *ClientWithResponses) UpdateAwsClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body UpdateAwsClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAwsClusterResponse, error) {
	rsp, err := c.UpdateAwsCluster(ctx, organizationId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAwsClusterResponse(rsp)
}

// CreateAzureClusterWithBodyWithResponse request with arbitrary body returning *CreateAzureClusterResponse
func (c *ClientWithResponses) CreateAzureClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAzureClusterResponse, error) {
	rsp, err := c.CreateAzureClusterWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAzureClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateAzureClusterWithResponse(ctx context.Context, organizationId string, body CreateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAzureClusterResponse, error) {
	rsp, err := c.CreateAzureCluster(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAzureClusterResponse(rsp)
}

// UpdateAzureClusterWithBodyWithResponse request with arbitrary body returning *UpdateAzureClusterResponse
func (c *ClientWithResponses) UpdateAzureClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAzureClusterResponse, error) {
	rsp, err := c.UpdateAzureClusterWithBody(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAzureClusterResponse(rsp)
}

func (c *ClientWithResponses) UpdateAzureClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body UpdateAzureClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAzureClusterResponse, error) {
	rsp, err := c.UpdateAzureCluster(ctx, organizationId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAzureClusterResponse(rsp)
}

// CreateGcpClusterWithBodyWithResponse request with arbitrary body returning *CreateGcpClusterResponse
func (c *ClientWithResponses) CreateGcpClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGcpClusterResponse, error) {
	rsp, err := c.CreateGcpClusterWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGcpClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateGcpClusterWithResponse(ctx context.Context, organizationId string, body CreateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGcpClusterResponse, error) {
	rsp, err := c.CreateGcpCluster(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGcpClusterResponse(rsp)
}

// UpdateGcpClusterWithBodyWithResponse request with arbitrary body returning *UpdateGcpClusterResponse
func (c *ClientWithResponses) UpdateGcpClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGcpClusterResponse, error) {
	rsp, err := c.UpdateGcpClusterWithBody(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGcpClusterResponse(rsp)
}

func (c *ClientWithResponses) UpdateGcpClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body UpdateGcpClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGcpClusterResponse, error) {
	rsp, err := c.UpdateGcpCluster(ctx, organizationId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGcpClusterResponse(rsp)
}

// DeleteClusterWithResponse request returning *DeleteClusterResponse
func (c *ClientWithResponses) DeleteClusterWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*DeleteClusterResponse, error) {
	rsp, err := c.DeleteCluster(ctx, organizationId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterResponse(rsp)
}

// GetClusterWithResponse request returning *GetClusterResponse
func (c *ClientWithResponses) GetClusterWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*GetClusterResponse, error) {
	rsp, err := c.GetCluster(ctx, organizationId, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterResponse(rsp)
}

// ListClusterRoutesWithResponse request returning *ListClusterRoutesResponse
func (c *ClientWithResponses) ListClusterRoutesWithResponse(ctx context.Context, organizationId string, clusterId string, params *ListClusterRoutesParams, reqEditors ...RequestEditorFn) (*ListClusterRoutesResponse, error) {
	rsp, err := c.ListClusterRoutes(ctx, organizationId, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListClusterRoutesResponse(rsp)
}

// CreateClusterRouteWithBodyWithResponse request with arbitrary body returning *CreateClusterRouteResponse
func (c *ClientWithResponses) CreateClusterRouteWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClusterRouteResponse, error) {
	rsp, err := c.CreateClusterRouteWithBody(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterRouteResponse(rsp)
}

func (c *ClientWithResponses) CreateClusterRouteWithResponse(ctx context.Context, organizationId string, clusterId string, body CreateClusterRouteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClusterRouteResponse, error) {
	rsp, err := c.CreateClusterRoute(ctx, organizationId, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClusterRouteResponse(rsp)
}

// DeleteClusterRouteWithResponse request returning *DeleteClusterRouteResponse
func (c *ClientWithResponses) DeleteClusterRouteWithResponse(ctx context.Context, organizationId string, clusterId string, routeId string, reqEditors ...RequestEditorFn) (*DeleteClusterRouteResponse, error) {
	rsp, err := c.DeleteClusterRoute(ctx, organizationId, clusterId, routeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterRouteResponse(rsp)
}

// GetDeploymentOptionsWithResponse request returning *GetDeploymentOptionsResponse
func (c *ClientWithResponses) GetDeploymentOptionsWithResponse(ctx context.Context, organizationId string, params *GetDeploymentOptionsParams, reqEditors ...RequestEditorFn) (*GetDeploymentOptionsResponse, error) {
	rsp, err := c.GetDeploymentOptions(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentOptionsResponse(rsp)
}

// ListDeploymentsWithResponse request returning *ListDeploymentsResponse
func (c *ClientWithResponses) ListDeploymentsWithResponse(ctx context.Context, organizationId string, params *ListDeploymentsParams, reqEditors ...RequestEditorFn) (*ListDeploymentsResponse, error) {
	rsp, err := c.ListDeployments(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeploymentsResponse(rsp)
}

// CreateDeploymentWithBodyWithResponse request with arbitrary body returning *CreateDeploymentResponse
func (c *ClientWithResponses) CreateDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error) {
	rsp, err := c.CreateDeploymentWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeploymentResponse(rsp)
}

func (c *ClientWithResponses) CreateDeploymentWithResponse(ctx context.Context, organizationId string, body CreateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeploymentResponse, error) {
	rsp, err := c.CreateDeployment(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeploymentResponse(rsp)
}

// DeleteDeploymentWithResponse request returning *DeleteDeploymentResponse
func (c *ClientWithResponses) DeleteDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*DeleteDeploymentResponse, error) {
	rsp, err := c.DeleteDeployment(ctx, organizationId, deploymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeploymentResponse(rsp)
}

// GetDeploymentWithResponse request returning *GetDeploymentResponse
func (c *ClientWithResponses) GetDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*GetDeploymentResponse, error) {
	rsp, err := c.GetDeployment(ctx, organizationId, deploymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentResponse(rsp)
}

// UpdateDeploymentWithBodyWithResponse request with arbitrary body returning *UpdateDeploymentResponse
func (c *ClientWithResponses) UpdateDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeploymentResponse, error) {
	rsp, err := c.UpdateDeploymentWithBody(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeploymentResponse(rsp)
}

func (c *ClientWithResponses) UpdateDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, body UpdateDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeploymentResponse, error) {
	rsp, err := c.UpdateDeployment(ctx, organizationId, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeploymentResponse(rsp)
}

// ListDeploymentApiTokensWithResponse request returning *ListDeploymentApiTokensResponse
func (c *ClientWithResponses) ListDeploymentApiTokensWithResponse(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentApiTokensParams, reqEditors ...RequestEditorFn) (*ListDeploymentApiTokensResponse, error) {
	rsp, err := c.ListDeploymentApiTokens(ctx, organizationId, deploymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeploymentApiTokensResponse(rsp)
}

// CreateDeploymentApiTokenWithBodyWithResponse request with arbitrary body returning *CreateDeploymentApiTokenResponse
func (c *ClientWithResponses) CreateDeploymentApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeploymentApiTokenResponse, error) {
	rsp, err := c.CreateDeploymentApiTokenWithBody(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeploymentApiTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, body CreateDeploymentApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeploymentApiTokenResponse, error) {
	rsp, err := c.CreateDeploymentApiToken(ctx, organizationId, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeploymentApiTokenResponse(rsp)
}

// DeleteDeploymentApiTokenWithResponse request returning *DeleteDeploymentApiTokenResponse
func (c *ClientWithResponses) DeleteDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*DeleteDeploymentApiTokenResponse, error) {
	rsp, err := c.DeleteDeploymentApiToken(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeploymentApiTokenResponse(rsp)
}

// GetDeploymentApiTokenWithResponse request returning *GetDeploymentApiTokenResponse
func (c *ClientWithResponses) GetDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*GetDeploymentApiTokenResponse, error) {
	rsp, err := c.GetDeploymentApiToken(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentApiTokenResponse(rsp)
}

// UpdateDeploymentApiTokenWithBodyWithResponse request with arbitrary body returning *UpdateDeploymentApiTokenResponse
func (c *ClientWithResponses) UpdateDeploymentApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeploymentApiTokenResponse, error) {
	rsp, err := c.UpdateDeploymentApiTokenWithBody(ctx, organizationId, deploymentId, apiTokenId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeploymentApiTokenResponse(rsp)
}

func (c *ClientWithResponses) UpdateDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, body UpdateDeploymentApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeploymentApiTokenResponse, error) {
	rsp, err := c.UpdateDeploymentApiToken(ctx, organizationId, deploymentId, apiTokenId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeploymentApiTokenResponse(rsp)
}

// RotateDeploymentApiTokenWithResponse request returning *RotateDeploymentApiTokenResponse
func (c *ClientWithResponses) RotateDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...RequestEditorFn) (*RotateDeploymentApiTokenResponse, error) {
	rsp, err := c.RotateDeploymentApiToken(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateDeploymentApiTokenResponse(rsp)
}

// DeployRollbackWithBodyWithResponse request with arbitrary body returning *DeployRollbackResponse
func (c *ClientWithResponses) DeployRollbackWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeployRollbackResponse, error) {
	rsp, err := c.DeployRollbackWithBody(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeployRollbackResponse(rsp)
}

func (c *ClientWithResponses) DeployRollbackWithResponse(ctx context.Context, organizationId string, deploymentId string, body DeployRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*DeployRollbackResponse, error) {
	rsp, err := c.DeployRollback(ctx, organizationId, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeployRollbackResponse(rsp)
}

// ListDeploysWithResponse request returning *ListDeploysResponse
func (c *ClientWithResponses) ListDeploysWithResponse(ctx context.Context, organizationId string, deploymentId string, params *ListDeploysParams, reqEditors ...RequestEditorFn) (*ListDeploysResponse, error) {
	rsp, err := c.ListDeploys(ctx, organizationId, deploymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeploysResponse(rsp)
}

// CreateDeployWithBodyWithResponse request with arbitrary body returning *CreateDeployResponse
func (c *ClientWithResponses) CreateDeployWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeployResponse, error) {
	rsp, err := c.CreateDeployWithBody(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeployResponse(rsp)
}

func (c *ClientWithResponses) CreateDeployWithResponse(ctx context.Context, organizationId string, deploymentId string, body CreateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeployResponse, error) {
	rsp, err := c.CreateDeploy(ctx, organizationId, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeployResponse(rsp)
}

// GetDeployWithResponse request returning *GetDeployResponse
func (c *ClientWithResponses) GetDeployWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, params *GetDeployParams, reqEditors ...RequestEditorFn) (*GetDeployResponse, error) {
	rsp, err := c.GetDeploy(ctx, organizationId, deploymentId, deployId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeployResponse(rsp)
}

// UpdateDeployWithBodyWithResponse request with arbitrary body returning *UpdateDeployResponse
func (c *ClientWithResponses) UpdateDeployWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeployResponse, error) {
	rsp, err := c.UpdateDeployWithBody(ctx, organizationId, deploymentId, deployId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeployResponse(rsp)
}

func (c *ClientWithResponses) UpdateDeployWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, body UpdateDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeployResponse, error) {
	rsp, err := c.UpdateDeploy(ctx, organizationId, deploymentId, deployId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeployResponse(rsp)
}

// ListDeployStepsWithResponse request returning *ListDeployStepsResponse
func (c *ClientWithResponses) ListDeployStepsWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, params *ListDeployStepsParams, reqEditors ...RequestEditorFn) (*ListDeployStepsResponse, error) {
	rsp, err := c.ListDeploySteps(ctx, organizationId, deploymentId, deployId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeployStepsResponse(rsp)
}

// ListDeployStepLogsWithResponse request returning *ListDeployStepLogsResponse
func (c *ClientWithResponses) ListDeployStepLogsWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, deployStepId string, params *ListDeployStepLogsParams, reqEditors ...RequestEditorFn) (*ListDeployStepLogsResponse, error) {
	rsp, err := c.ListDeployStepLogs(ctx, organizationId, deploymentId, deployId, deployStepId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeployStepLogsResponse(rsp)
}

// GetDeploymentHealthWithResponse request returning *GetDeploymentHealthResponse
func (c *ClientWithResponses) GetDeploymentHealthWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...RequestEditorFn) (*GetDeploymentHealthResponse, error) {
	rsp, err := c.GetDeploymentHealth(ctx, organizationId, deploymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentHealthResponse(rsp)
}

// GetDeploymentLogsWithResponse request returning *GetDeploymentLogsResponse
func (c *ClientWithResponses) GetDeploymentLogsWithResponse(ctx context.Context, organizationId string, deploymentId string, params *GetDeploymentLogsParams, reqEditors ...RequestEditorFn) (*GetDeploymentLogsResponse, error) {
	rsp, err := c.GetDeploymentLogs(ctx, organizationId, deploymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentLogsResponse(rsp)
}

// ListDeploymentTeamsWithResponse request returning *ListDeploymentTeamsResponse
func (c *ClientWithResponses) ListDeploymentTeamsWithResponse(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentTeamsParams, reqEditors ...RequestEditorFn) (*ListDeploymentTeamsResponse, error) {
	rsp, err := c.ListDeploymentTeams(ctx, organizationId, deploymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeploymentTeamsResponse(rsp)
}

// DeleteDeploymentTeamWithResponse request returning *DeleteDeploymentTeamResponse
func (c *ClientWithResponses) DeleteDeploymentTeamWithResponse(ctx context.Context, organizationId string, deploymentId string, teamId string, reqEditors ...RequestEditorFn) (*DeleteDeploymentTeamResponse, error) {
	rsp, err := c.DeleteDeploymentTeam(ctx, organizationId, deploymentId, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeploymentTeamResponse(rsp)
}

// MutateDeploymentTeamRoleWithBodyWithResponse request with arbitrary body returning *MutateDeploymentTeamRoleResponse
func (c *ClientWithResponses) MutateDeploymentTeamRoleWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateDeploymentTeamRoleResponse, error) {
	rsp, err := c.MutateDeploymentTeamRoleWithBody(ctx, organizationId, deploymentId, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateDeploymentTeamRoleResponse(rsp)
}

func (c *ClientWithResponses) MutateDeploymentTeamRoleWithResponse(ctx context.Context, organizationId string, deploymentId string, teamId string, body MutateDeploymentTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateDeploymentTeamRoleResponse, error) {
	rsp, err := c.MutateDeploymentTeamRole(ctx, organizationId, deploymentId, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateDeploymentTeamRoleResponse(rsp)
}

// ListDeploymentUsersWithResponse request returning *ListDeploymentUsersResponse
func (c *ClientWithResponses) ListDeploymentUsersWithResponse(ctx context.Context, organizationId string, deploymentId string, params *ListDeploymentUsersParams, reqEditors ...RequestEditorFn) (*ListDeploymentUsersResponse, error) {
	rsp, err := c.ListDeploymentUsers(ctx, organizationId, deploymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDeploymentUsersResponse(rsp)
}

// DeleteDeploymentUserWithResponse request returning *DeleteDeploymentUserResponse
func (c *ClientWithResponses) DeleteDeploymentUserWithResponse(ctx context.Context, organizationId string, deploymentId string, userId string, reqEditors ...RequestEditorFn) (*DeleteDeploymentUserResponse, error) {
	rsp, err := c.DeleteDeploymentUser(ctx, organizationId, deploymentId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeploymentUserResponse(rsp)
}

// MutateDeploymentUserRoleWithBodyWithResponse request with arbitrary body returning *MutateDeploymentUserRoleResponse
func (c *ClientWithResponses) MutateDeploymentUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateDeploymentUserRoleResponse, error) {
	rsp, err := c.MutateDeploymentUserRoleWithBody(ctx, organizationId, deploymentId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateDeploymentUserRoleResponse(rsp)
}

func (c *ClientWithResponses) MutateDeploymentUserRoleWithResponse(ctx context.Context, organizationId string, deploymentId string, userId string, body MutateDeploymentUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateDeploymentUserRoleResponse, error) {
	rsp, err := c.MutateDeploymentUserRole(ctx, organizationId, deploymentId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateDeploymentUserRoleResponse(rsp)
}

// ListEnvironmentObjectsWithResponse request returning *ListEnvironmentObjectsResponse
func (c *ClientWithResponses) ListEnvironmentObjectsWithResponse(ctx context.Context, organizationId string, params *ListEnvironmentObjectsParams, reqEditors ...RequestEditorFn) (*ListEnvironmentObjectsResponse, error) {
	rsp, err := c.ListEnvironmentObjects(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEnvironmentObjectsResponse(rsp)
}

// CreateEnvironmentObjectWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentObjectResponse
func (c *ClientWithResponses) CreateEnvironmentObjectWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentObjectResponse, error) {
	rsp, err := c.CreateEnvironmentObjectWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentObjectResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentObjectWithResponse(ctx context.Context, organizationId string, body CreateEnvironmentObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentObjectResponse, error) {
	rsp, err := c.CreateEnvironmentObject(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentObjectResponse(rsp)
}

// DeleteEnvironmentObjectWithResponse request returning *DeleteEnvironmentObjectResponse
func (c *ClientWithResponses) DeleteEnvironmentObjectWithResponse(ctx context.Context, organizationId string, environmentObjectId string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentObjectResponse, error) {
	rsp, err := c.DeleteEnvironmentObject(ctx, organizationId, environmentObjectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentObjectResponse(rsp)
}

// GetEnvironmentObjectWithResponse request returning *GetEnvironmentObjectResponse
func (c *ClientWithResponses) GetEnvironmentObjectWithResponse(ctx context.Context, organizationId string, environmentObjectId string, reqEditors ...RequestEditorFn) (*GetEnvironmentObjectResponse, error) {
	rsp, err := c.GetEnvironmentObject(ctx, organizationId, environmentObjectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentObjectResponse(rsp)
}

// UpdateEnvironmentObjectWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentObjectResponse
func (c *ClientWithResponses) UpdateEnvironmentObjectWithBodyWithResponse(ctx context.Context, organizationId string, environmentObjectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentObjectResponse, error) {
	rsp, err := c.UpdateEnvironmentObjectWithBody(ctx, organizationId, environmentObjectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentObjectResponse(rsp)
}

func (c *ClientWithResponses) UpdateEnvironmentObjectWithResponse(ctx context.Context, organizationId string, environmentObjectId string, body UpdateEnvironmentObjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentObjectResponse, error) {
	rsp, err := c.UpdateEnvironmentObject(ctx, organizationId, environmentObjectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentObjectResponse(rsp)
}

// CreateUserInviteWithBodyWithResponse request with arbitrary body returning *CreateUserInviteResponse
func (c *ClientWithResponses) CreateUserInviteWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserInviteResponse, error) {
	rsp, err := c.CreateUserInviteWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserInviteResponse(rsp)
}

func (c *ClientWithResponses) CreateUserInviteWithResponse(ctx context.Context, organizationId string, body CreateUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserInviteResponse, error) {
	rsp, err := c.CreateUserInvite(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserInviteResponse(rsp)
}

// DeleteUserInviteWithResponse request returning *DeleteUserInviteResponse
func (c *ClientWithResponses) DeleteUserInviteWithResponse(ctx context.Context, organizationId string, inviteId string, reqEditors ...RequestEditorFn) (*DeleteUserInviteResponse, error) {
	rsp, err := c.DeleteUserInvite(ctx, organizationId, inviteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserInviteResponse(rsp)
}

// ListRoleTemplatesWithResponse request returning *ListRoleTemplatesResponse
func (c *ClientWithResponses) ListRoleTemplatesWithResponse(ctx context.Context, organizationId string, params *ListRoleTemplatesParams, reqEditors ...RequestEditorFn) (*ListRoleTemplatesResponse, error) {
	rsp, err := c.ListRoleTemplates(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRoleTemplatesResponse(rsp)
}

// ListRolesWithResponse request returning *ListRolesResponse
func (c *ClientWithResponses) ListRolesWithResponse(ctx context.Context, organizationId string, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error) {
	rsp, err := c.ListRoles(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRolesResponse(rsp)
}

// CreateCustomRoleWithBodyWithResponse request with arbitrary body returning *CreateCustomRoleResponse
func (c *ClientWithResponses) CreateCustomRoleWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomRoleResponse, error) {
	rsp, err := c.CreateCustomRoleWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomRoleWithResponse(ctx context.Context, organizationId string, body CreateCustomRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomRoleResponse, error) {
	rsp, err := c.CreateCustomRole(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomRoleResponse(rsp)
}

// DeleteCustomRoleWithResponse request returning *DeleteCustomRoleResponse
func (c *ClientWithResponses) DeleteCustomRoleWithResponse(ctx context.Context, organizationId string, customRoleId string, reqEditors ...RequestEditorFn) (*DeleteCustomRoleResponse, error) {
	rsp, err := c.DeleteCustomRole(ctx, organizationId, customRoleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomRoleResponse(rsp)
}

// UpdateCustomRoleWithBodyWithResponse request with arbitrary body returning *UpdateCustomRoleResponse
func (c *ClientWithResponses) UpdateCustomRoleWithBodyWithResponse(ctx context.Context, organizationId string, customRoleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomRoleResponse, error) {
	rsp, err := c.UpdateCustomRoleWithBody(ctx, organizationId, customRoleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomRoleWithResponse(ctx context.Context, organizationId string, customRoleId string, body UpdateCustomRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomRoleResponse, error) {
	rsp, err := c.UpdateCustomRole(ctx, organizationId, customRoleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomRoleResponse(rsp)
}

// GetCustomRoleWithResponse request returning *GetCustomRoleResponse
func (c *ClientWithResponses) GetCustomRoleWithResponse(ctx context.Context, organizationId string, roleId string, reqEditors ...RequestEditorFn) (*GetCustomRoleResponse, error) {
	rsp, err := c.GetCustomRole(ctx, organizationId, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomRoleResponse(rsp)
}

// ListRoleBindingsWithResponse request returning *ListRoleBindingsResponse
func (c *ClientWithResponses) ListRoleBindingsWithResponse(ctx context.Context, organizationId string, roleId string, params *ListRoleBindingsParams, reqEditors ...RequestEditorFn) (*ListRoleBindingsResponse, error) {
	rsp, err := c.ListRoleBindings(ctx, organizationId, roleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRoleBindingsResponse(rsp)
}

// ListOrganizationTeamsWithResponse request returning *ListOrganizationTeamsResponse
func (c *ClientWithResponses) ListOrganizationTeamsWithResponse(ctx context.Context, organizationId string, params *ListOrganizationTeamsParams, reqEditors ...RequestEditorFn) (*ListOrganizationTeamsResponse, error) {
	rsp, err := c.ListOrganizationTeams(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamWithResponse(ctx context.Context, organizationId string, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeam(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, organizationId string, teamId string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, organizationId, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, organizationId string, teamId string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, organizationId, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, organizationId, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamWithResponse(ctx context.Context, organizationId string, teamId string, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeam(ctx, organizationId, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// AddTeamMembersWithBodyWithResponse request with arbitrary body returning *AddTeamMembersResponse
func (c *ClientWithResponses) AddTeamMembersWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTeamMembersResponse, error) {
	rsp, err := c.AddTeamMembersWithBody(ctx, organizationId, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTeamMembersResponse(rsp)
}

func (c *ClientWithResponses) AddTeamMembersWithResponse(ctx context.Context, organizationId string, teamId string, body AddTeamMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTeamMembersResponse, error) {
	rsp, err := c.AddTeamMembers(ctx, organizationId, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTeamMembersResponse(rsp)
}

// RemoveTeamMemberWithResponse request returning *RemoveTeamMemberResponse
func (c *ClientWithResponses) RemoveTeamMemberWithResponse(ctx context.Context, organizationId string, teamId string, memberId string, reqEditors ...RequestEditorFn) (*RemoveTeamMemberResponse, error) {
	rsp, err := c.RemoveTeamMember(ctx, organizationId, teamId, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveTeamMemberResponse(rsp)
}

// MutateOrgTeamRoleWithBodyWithResponse request with arbitrary body returning *MutateOrgTeamRoleResponse
func (c *ClientWithResponses) MutateOrgTeamRoleWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateOrgTeamRoleResponse, error) {
	rsp, err := c.MutateOrgTeamRoleWithBody(ctx, organizationId, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateOrgTeamRoleResponse(rsp)
}

func (c *ClientWithResponses) MutateOrgTeamRoleWithResponse(ctx context.Context, organizationId string, teamId string, body MutateOrgTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateOrgTeamRoleResponse, error) {
	rsp, err := c.MutateOrgTeamRole(ctx, organizationId, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateOrgTeamRoleResponse(rsp)
}

// ListOrgUsersWithResponse request returning *ListOrgUsersResponse
func (c *ClientWithResponses) ListOrgUsersWithResponse(ctx context.Context, organizationId string, params *ListOrgUsersParams, reqEditors ...RequestEditorFn) (*ListOrgUsersResponse, error) {
	rsp, err := c.ListOrgUsers(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrgUsersResponse(rsp)
}

// DeleteOrgUserWithResponse request returning *DeleteOrgUserResponse
func (c *ClientWithResponses) DeleteOrgUserWithResponse(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*DeleteOrgUserResponse, error) {
	rsp, err := c.DeleteOrgUser(ctx, organizationId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrgUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, organizationId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// MutateOrgUserRoleWithBodyWithResponse request with arbitrary body returning *MutateOrgUserRoleResponse
func (c *ClientWithResponses) MutateOrgUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateOrgUserRoleResponse, error) {
	rsp, err := c.MutateOrgUserRoleWithBody(ctx, organizationId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateOrgUserRoleResponse(rsp)
}

func (c *ClientWithResponses) MutateOrgUserRoleWithResponse(ctx context.Context, organizationId string, userId string, body MutateOrgUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateOrgUserRoleResponse, error) {
	rsp, err := c.MutateOrgUserRole(ctx, organizationId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateOrgUserRoleResponse(rsp)
}

// ListWorkspacesWithResponse request returning *ListWorkspacesResponse
func (c *ClientWithResponses) ListWorkspacesWithResponse(ctx context.Context, organizationId string, params *ListWorkspacesParams, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error) {
	rsp, err := c.ListWorkspaces(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspacesResponse(rsp)
}

// CreateWorkspaceWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceResponse
func (c *ClientWithResponses) CreateWorkspaceWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspaceWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkspaceWithResponse(ctx context.Context, organizationId string, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspace(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

// DeleteWorkspaceWithResponse request returning *DeleteWorkspaceResponse
func (c *ClientWithResponses) DeleteWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspace(ctx, organizationId, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

// GetWorkspaceWithResponse request returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, organizationId, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspaceWithBody(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspace(ctx, organizationId, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

// ListWorkspaceApiTokensWithResponse request returning *ListWorkspaceApiTokensResponse
func (c *ClientWithResponses) ListWorkspaceApiTokensWithResponse(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceApiTokensParams, reqEditors ...RequestEditorFn) (*ListWorkspaceApiTokensResponse, error) {
	rsp, err := c.ListWorkspaceApiTokens(ctx, organizationId, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspaceApiTokensResponse(rsp)
}

// CreateWorkspaceApiTokenWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceApiTokenResponse
func (c *ClientWithResponses) CreateWorkspaceApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceApiTokenResponse, error) {
	rsp, err := c.CreateWorkspaceApiTokenWithBody(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceApiTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, body CreateWorkspaceApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceApiTokenResponse, error) {
	rsp, err := c.CreateWorkspaceApiToken(ctx, organizationId, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceApiTokenResponse(rsp)
}

// DeleteWorkspaceApiTokenWithResponse request returning *DeleteWorkspaceApiTokenResponse
func (c *ClientWithResponses) DeleteWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceApiTokenResponse, error) {
	rsp, err := c.DeleteWorkspaceApiToken(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceApiTokenResponse(rsp)
}

// GetWorkspaceApiTokenWithResponse request returning *GetWorkspaceApiTokenResponse
func (c *ClientWithResponses) GetWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*GetWorkspaceApiTokenResponse, error) {
	rsp, err := c.GetWorkspaceApiToken(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceApiTokenResponse(rsp)
}

// UpdateWorkspaceApiTokenWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceApiTokenResponse
func (c *ClientWithResponses) UpdateWorkspaceApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceApiTokenResponse, error) {
	rsp, err := c.UpdateWorkspaceApiTokenWithBody(ctx, organizationId, workspaceId, apiTokenId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceApiTokenResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, body UpdateWorkspaceApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceApiTokenResponse, error) {
	rsp, err := c.UpdateWorkspaceApiToken(ctx, organizationId, workspaceId, apiTokenId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceApiTokenResponse(rsp)
}

// RotateWorkspaceApiTokenWithResponse request returning *RotateWorkspaceApiTokenResponse
func (c *ClientWithResponses) RotateWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...RequestEditorFn) (*RotateWorkspaceApiTokenResponse, error) {
	rsp, err := c.RotateWorkspaceApiToken(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateWorkspaceApiTokenResponse(rsp)
}

// ListWorkspaceDagFiltersWithResponse request returning *ListWorkspaceDagFiltersResponse
func (c *ClientWithResponses) ListWorkspaceDagFiltersWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...RequestEditorFn) (*ListWorkspaceDagFiltersResponse, error) {
	rsp, err := c.ListWorkspaceDagFilters(ctx, organizationId, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspaceDagFiltersResponse(rsp)
}

// ListWorkspaceDagsWithResponse request returning *ListWorkspaceDagsResponse
func (c *ClientWithResponses) ListWorkspaceDagsWithResponse(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceDagsParams, reqEditors ...RequestEditorFn) (*ListWorkspaceDagsResponse, error) {
	rsp, err := c.ListWorkspaceDags(ctx, organizationId, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspaceDagsResponse(rsp)
}

// TransferDeploymentWithBodyWithResponse request with arbitrary body returning *TransferDeploymentResponse
func (c *ClientWithResponses) TransferDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, deploymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferDeploymentResponse, error) {
	rsp, err := c.TransferDeploymentWithBody(ctx, organizationId, workspaceId, deploymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferDeploymentResponse(rsp)
}

func (c *ClientWithResponses) TransferDeploymentWithResponse(ctx context.Context, organizationId string, workspaceId string, deploymentId string, body TransferDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferDeploymentResponse, error) {
	rsp, err := c.TransferDeployment(ctx, organizationId, workspaceId, deploymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferDeploymentResponse(rsp)
}

// ListWorkspaceTeamsWithResponse request returning *ListWorkspaceTeamsResponse
func (c *ClientWithResponses) ListWorkspaceTeamsWithResponse(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceTeamsParams, reqEditors ...RequestEditorFn) (*ListWorkspaceTeamsResponse, error) {
	rsp, err := c.ListWorkspaceTeams(ctx, organizationId, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspaceTeamsResponse(rsp)
}

// DeleteWorkspaceTeamWithResponse request returning *DeleteWorkspaceTeamResponse
func (c *ClientWithResponses) DeleteWorkspaceTeamWithResponse(ctx context.Context, organizationId string, workspaceId string, teamId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceTeamResponse, error) {
	rsp, err := c.DeleteWorkspaceTeam(ctx, organizationId, workspaceId, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceTeamResponse(rsp)
}

// MutateWorkspaceTeamRoleWithBodyWithResponse request with arbitrary body returning *MutateWorkspaceTeamRoleResponse
func (c *ClientWithResponses) MutateWorkspaceTeamRoleWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, teamId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateWorkspaceTeamRoleResponse, error) {
	rsp, err := c.MutateWorkspaceTeamRoleWithBody(ctx, organizationId, workspaceId, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateWorkspaceTeamRoleResponse(rsp)
}

func (c *ClientWithResponses) MutateWorkspaceTeamRoleWithResponse(ctx context.Context, organizationId string, workspaceId string, teamId string, body MutateWorkspaceTeamRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateWorkspaceTeamRoleResponse, error) {
	rsp, err := c.MutateWorkspaceTeamRole(ctx, organizationId, workspaceId, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateWorkspaceTeamRoleResponse(rsp)
}

// ListWorkspaceUsersWithResponse request returning *ListWorkspaceUsersResponse
func (c *ClientWithResponses) ListWorkspaceUsersWithResponse(ctx context.Context, organizationId string, workspaceId string, params *ListWorkspaceUsersParams, reqEditors ...RequestEditorFn) (*ListWorkspaceUsersResponse, error) {
	rsp, err := c.ListWorkspaceUsers(ctx, organizationId, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspaceUsersResponse(rsp)
}

// DeleteWorkspaceUserWithResponse request returning *DeleteWorkspaceUserResponse
func (c *ClientWithResponses) DeleteWorkspaceUserWithResponse(ctx context.Context, organizationId string, workspaceId string, userId string, reqEditors ...RequestEditorFn) (*DeleteWorkspaceUserResponse, error) {
	rsp, err := c.DeleteWorkspaceUser(ctx, organizationId, workspaceId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceUserResponse(rsp)
}

// MutateWorkspaceUserRoleWithBodyWithResponse request with arbitrary body returning *MutateWorkspaceUserRoleResponse
func (c *ClientWithResponses) MutateWorkspaceUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MutateWorkspaceUserRoleResponse, error) {
	rsp, err := c.MutateWorkspaceUserRoleWithBody(ctx, organizationId, workspaceId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateWorkspaceUserRoleResponse(rsp)
}

func (c *ClientWithResponses) MutateWorkspaceUserRoleWithResponse(ctx context.Context, organizationId string, workspaceId string, userId string, body MutateWorkspaceUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*MutateWorkspaceUserRoleResponse, error) {
	rsp, err := c.MutateWorkspaceUserRole(ctx, organizationId, workspaceId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMutateWorkspaceUserRoleResponse(rsp)
}

// GetSelfUserWithResponse request returning *GetSelfUserResponse
func (c *ClientWithResponses) GetSelfUserWithResponse(ctx context.Context, params *GetSelfUserParams, reqEditors ...RequestEditorFn) (*GetSelfUserResponse, error) {
	rsp, err := c.GetSelfUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfUserResponse(rsp)
}

// ListSelfUserRepositoriesWithResponse request returning *ListSelfUserRepositoriesResponse
func (c *ClientWithResponses) ListSelfUserRepositoriesWithResponse(ctx context.Context, gitProvider ListSelfUserRepositoriesParamsGitProvider, gitAccount string, params *ListSelfUserRepositoriesParams, reqEditors ...RequestEditorFn) (*ListSelfUserRepositoriesResponse, error) {
	rsp, err := c.ListSelfUserRepositories(ctx, gitProvider, gitAccount, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSelfUserRepositoriesResponse(rsp)
}

// GetSelfUserRepositoryBranchWithResponse request returning *GetSelfUserRepositoryBranchResponse
func (c *ClientWithResponses) GetSelfUserRepositoryBranchWithResponse(ctx context.Context, gitProvider GetSelfUserRepositoryBranchParamsGitProvider, gitAccount string, gitRepository string, gitBranch string, reqEditors ...RequestEditorFn) (*GetSelfUserRepositoryBranchResponse, error) {
	rsp, err := c.GetSelfUserRepositoryBranch(ctx, gitProvider, gitAccount, gitRepository, gitBranch, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfUserRepositoryBranchResponse(rsp)
}

// GetSelfUserGitAppAuthorizationWithResponse request returning *GetSelfUserGitAppAuthorizationResponse
func (c *ClientWithResponses) GetSelfUserGitAppAuthorizationWithResponse(ctx context.Context, gitProvider GetSelfUserGitAppAuthorizationParamsGitProvider, reqEditors ...RequestEditorFn) (*GetSelfUserGitAppAuthorizationResponse, error) {
	rsp, err := c.GetSelfUserGitAppAuthorization(ctx, gitProvider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfUserGitAppAuthorizationResponse(rsp)
}

// GetSelfUserGitAppInstallationWithResponse request returning *GetSelfUserGitAppInstallationResponse
func (c *ClientWithResponses) GetSelfUserGitAppInstallationWithResponse(ctx context.Context, gitProvider GetSelfUserGitAppInstallationParamsGitProvider, reqEditors ...RequestEditorFn) (*GetSelfUserGitAppInstallationResponse, error) {
	rsp, err := c.GetSelfUserGitAppInstallation(ctx, gitProvider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfUserGitAppInstallationResponse(rsp)
}

// UpdateSelfUserInviteWithBodyWithResponse request with arbitrary body returning *UpdateSelfUserInviteResponse
func (c *ClientWithResponses) UpdateSelfUserInviteWithBodyWithResponse(ctx context.Context, inviteId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSelfUserInviteResponse, error) {
	rsp, err := c.UpdateSelfUserInviteWithBody(ctx, inviteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSelfUserInviteResponse(rsp)
}

func (c *ClientWithResponses) UpdateSelfUserInviteWithResponse(ctx context.Context, inviteId string, body UpdateSelfUserInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSelfUserInviteResponse, error) {
	rsp, err := c.UpdateSelfUserInvite(ctx, inviteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSelfUserInviteResponse(rsp)
}

// ParseGetUserInviteResponse parses an HTTP response from a GetUserInviteWithResponse call
func ParseGetUserInviteResponse(rsp *http.Response) (*GetUserInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSharedClusterResponse parses an HTTP response from a GetSharedClusterWithResponse call
func ParseGetSharedClusterResponse(rsp *http.Response) (*GetSharedClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSharedClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClusterOptionsResponse parses an HTTP response from a GetClusterOptionsWithResponse call
func ParseGetClusterOptionsResponse(rsp *http.Response) (*GetClusterOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClusterOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListOrganizationsResponse parses an HTTP response from a ListOrganizationsWithResponse call
func ParseListOrganizationsResponse(rsp *http.Response) (*ListOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationResponse parses an HTTP response from a UpdateOrganizationWithResponse call
func ParseUpdateOrganizationResponse(rsp *http.Response) (*UpdateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListOrganizationApiTokensResponse parses an HTTP response from a ListOrganizationApiTokensWithResponse call
func ParseListOrganizationApiTokensResponse(rsp *http.Response) (*ListOrganizationApiTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationApiTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListApiTokensPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationApiTokenResponse parses an HTTP response from a CreateOrganizationApiTokenWithResponse call
func ParseCreateOrganizationApiTokenResponse(rsp *http.Response) (*CreateOrganizationApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationApiTokenResponse parses an HTTP response from a DeleteOrganizationApiTokenWithResponse call
func ParseDeleteOrganizationApiTokenResponse(rsp *http.Response) (*DeleteOrganizationApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrganizationApiTokenResponse parses an HTTP response from a GetOrganizationApiTokenWithResponse call
func ParseGetOrganizationApiTokenResponse(rsp *http.Response) (*GetOrganizationApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationApiTokenResponse parses an HTTP response from a UpdateOrganizationApiTokenWithResponse call
func ParseUpdateOrganizationApiTokenResponse(rsp *http.Response) (*UpdateOrganizationApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRotateOrganizationApiTokenResponse parses an HTTP response from a RotateOrganizationApiTokenWithResponse call
func ParseRotateOrganizationApiTokenResponse(rsp *http.Response) (*RotateOrganizationApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateOrganizationApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrganizationAuditLogsResponse parses an HTTP response from a GetOrganizationAuditLogsWithResponse call
func ParseGetOrganizationAuditLogsResponse(rsp *http.Response) (*GetOrganizationAuditLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationAuditLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListClustersResponse parses an HTTP response from a ListClustersWithResponse call
func ParseListClustersResponse(rsp *http.Response) (*ListClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClustersPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAwsClusterResponse parses an HTTP response from a CreateAwsClusterWithResponse call
func ParseCreateAwsClusterResponse(rsp *http.Response) (*CreateAwsClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAwsClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAwsClusterResponse parses an HTTP response from a UpdateAwsClusterWithResponse call
func ParseUpdateAwsClusterResponse(rsp *http.Response) (*UpdateAwsClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAwsClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAzureClusterResponse parses an HTTP response from a CreateAzureClusterWithResponse call
func ParseCreateAzureClusterResponse(rsp *http.Response) (*CreateAzureClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAzureClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAzureClusterResponse parses an HTTP response from a UpdateAzureClusterWithResponse call
func ParseUpdateAzureClusterResponse(rsp *http.Response) (*UpdateAzureClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAzureClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateGcpClusterResponse parses an HTTP response from a CreateGcpClusterWithResponse call
func ParseCreateGcpClusterResponse(rsp *http.Response) (*CreateGcpClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGcpClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateGcpClusterResponse parses an HTTP response from a UpdateGcpClusterWithResponse call
func ParseUpdateGcpClusterResponse(rsp *http.Response) (*UpdateGcpClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGcpClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteClusterResponse parses an HTTP response from a DeleteClusterWithResponse call
func ParseDeleteClusterResponse(rsp *http.Response) (*DeleteClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClusterResponse parses an HTTP response from a GetClusterWithResponse call
func ParseGetClusterResponse(rsp *http.Response) (*GetClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterDetailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListClusterRoutesResponse parses an HTTP response from a ListClusterRoutesWithResponse call
func ParseListClusterRoutesResponse(rsp *http.Response) (*ListClusterRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListClusterRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterRoutesPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateClusterRouteResponse parses an HTTP response from a CreateClusterRouteWithResponse call
func ParseCreateClusterRouteResponse(rsp *http.Response) (*CreateClusterRouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClusterRouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteClusterRouteResponse parses an HTTP response from a DeleteClusterRouteWithResponse call
func ParseDeleteClusterRouteResponse(rsp *http.Response) (*DeleteClusterRouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterRouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDeploymentOptionsResponse parses an HTTP response from a GetDeploymentOptionsWithResponse call
func ParseGetDeploymentOptionsResponse(rsp *http.Response) (*GetDeploymentOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDeploymentsResponse parses an HTTP response from a ListDeploymentsWithResponse call
func ParseListDeploymentsResponse(rsp *http.Response) (*ListDeploymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeploymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentsPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDeploymentResponse parses an HTTP response from a CreateDeploymentWithResponse call
func ParseCreateDeploymentResponse(rsp *http.Response) (*CreateDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDeploymentResponse parses an HTTP response from a DeleteDeploymentWithResponse call
func ParseDeleteDeploymentResponse(rsp *http.Response) (*DeleteDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDeploymentResponse parses an HTTP response from a GetDeploymentWithResponse call
func ParseGetDeploymentResponse(rsp *http.Response) (*GetDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDeploymentResponse parses an HTTP response from a UpdateDeploymentWithResponse call
func ParseUpdateDeploymentResponse(rsp *http.Response) (*UpdateDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDeploymentApiTokensResponse parses an HTTP response from a ListDeploymentApiTokensWithResponse call
func ParseListDeploymentApiTokensResponse(rsp *http.Response) (*ListDeploymentApiTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeploymentApiTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListApiTokensPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDeploymentApiTokenResponse parses an HTTP response from a CreateDeploymentApiTokenWithResponse call
func ParseCreateDeploymentApiTokenResponse(rsp *http.Response) (*CreateDeploymentApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeploymentApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDeploymentApiTokenResponse parses an HTTP response from a DeleteDeploymentApiTokenWithResponse call
func ParseDeleteDeploymentApiTokenResponse(rsp *http.Response) (*DeleteDeploymentApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeploymentApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDeploymentApiTokenResponse parses an HTTP response from a GetDeploymentApiTokenWithResponse call
func ParseGetDeploymentApiTokenResponse(rsp *http.Response) (*GetDeploymentApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDeploymentApiTokenResponse parses an HTTP response from a UpdateDeploymentApiTokenWithResponse call
func ParseUpdateDeploymentApiTokenResponse(rsp *http.Response) (*UpdateDeploymentApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeploymentApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRotateDeploymentApiTokenResponse parses an HTTP response from a RotateDeploymentApiTokenWithResponse call
func ParseRotateDeploymentApiTokenResponse(rsp *http.Response) (*RotateDeploymentApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateDeploymentApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeployRollbackResponse parses an HTTP response from a DeployRollbackWithResponse call
func ParseDeployRollbackResponse(rsp *http.Response) (*DeployRollbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeployRollbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deploy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDeploysResponse parses an HTTP response from a ListDeploysWithResponse call
func ParseListDeploysResponse(rsp *http.Response) (*ListDeploysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeploysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploysPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDeployResponse parses an HTTP response from a CreateDeployWithResponse call
func ParseCreateDeployResponse(rsp *http.Response) (*CreateDeployResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeployResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deploy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDeployResponse parses an HTTP response from a GetDeployWithResponse call
func ParseGetDeployResponse(rsp *http.Response) (*GetDeployResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeployResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deploy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDeployResponse parses an HTTP response from a UpdateDeployWithResponse call
func ParseUpdateDeployResponse(rsp *http.Response) (*UpdateDeployResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeployResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deploy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDeployStepsResponse parses an HTTP response from a ListDeployStepsWithResponse call
func ParseListDeployStepsResponse(rsp *http.Response) (*ListDeployStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeployStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeployStepsPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDeployStepLogsResponse parses an HTTP response from a ListDeployStepLogsWithResponse call
func ParseListDeployStepLogsResponse(rsp *http.Response) (*ListDeployStepLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeployStepLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeployStepLogsPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDeploymentHealthResponse parses an HTTP response from a GetDeploymentHealthWithResponse call
func ParseGetDeploymentHealthResponse(rsp *http.Response) (*GetDeploymentHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericJSON
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDeploymentLogsResponse parses an HTTP response from a GetDeploymentLogsWithResponse call
func ParseGetDeploymentLogsResponse(rsp *http.Response) (*GetDeploymentLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDeploymentTeamsResponse parses an HTTP response from a ListDeploymentTeamsWithResponse call
func ParseListDeploymentTeamsResponse(rsp *http.Response) (*ListDeploymentTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeploymentTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDeploymentTeamResponse parses an HTTP response from a DeleteDeploymentTeamWithResponse call
func ParseDeleteDeploymentTeamResponse(rsp *http.Response) (*DeleteDeploymentTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeploymentTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMutateDeploymentTeamRoleResponse parses an HTTP response from a MutateDeploymentTeamRoleWithResponse call
func ParseMutateDeploymentTeamRoleResponse(rsp *http.Response) (*MutateDeploymentTeamRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MutateDeploymentTeamRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListDeploymentUsersResponse parses an HTTP response from a ListDeploymentUsersWithResponse call
func ParseListDeploymentUsersResponse(rsp *http.Response) (*ListDeploymentUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDeploymentUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDeploymentUserResponse parses an HTTP response from a DeleteDeploymentUserWithResponse call
func ParseDeleteDeploymentUserResponse(rsp *http.Response) (*DeleteDeploymentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeploymentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMutateDeploymentUserRoleResponse parses an HTTP response from a MutateDeploymentUserRoleWithResponse call
func ParseMutateDeploymentUserRoleResponse(rsp *http.Response) (*MutateDeploymentUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MutateDeploymentUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListEnvironmentObjectsResponse parses an HTTP response from a ListEnvironmentObjectsWithResponse call
func ParseListEnvironmentObjectsResponse(rsp *http.Response) (*ListEnvironmentObjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEnvironmentObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentObjectsPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentObjectResponse parses an HTTP response from a CreateEnvironmentObjectWithResponse call
func ParseCreateEnvironmentObjectResponse(rsp *http.Response) (*CreateEnvironmentObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateEnvironmentObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentObjectResponse parses an HTTP response from a DeleteEnvironmentObjectWithResponse call
func ParseDeleteEnvironmentObjectResponse(rsp *http.Response) (*DeleteEnvironmentObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentObjectResponse parses an HTTP response from a GetEnvironmentObjectWithResponse call
func ParseGetEnvironmentObjectResponse(rsp *http.Response) (*GetEnvironmentObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateEnvironmentObjectResponse parses an HTTP response from a UpdateEnvironmentObjectWithResponse call
func ParseUpdateEnvironmentObjectResponse(rsp *http.Response) (*UpdateEnvironmentObjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentObjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateUserInviteResponse parses an HTTP response from a CreateUserInviteWithResponse call
func ParseCreateUserInviteResponse(rsp *http.Response) (*CreateUserInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserInviteResponse parses an HTTP response from a DeleteUserInviteWithResponse call
func ParseDeleteUserInviteResponse(rsp *http.Response) (*DeleteUserInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListRoleTemplatesResponse parses an HTTP response from a ListRoleTemplatesWithResponse call
func ParseListRoleTemplatesResponse(rsp *http.Response) (*ListRoleTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRoleTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListRolesResponse parses an HTTP response from a ListRolesWithResponse call
func ParseListRolesResponse(rsp *http.Response) (*ListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RolesPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateCustomRoleResponse parses an HTTP response from a CreateCustomRoleWithResponse call
func ParseCreateCustomRoleResponse(rsp *http.Response) (*CreateCustomRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleWithPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCustomRoleResponse parses an HTTP response from a DeleteCustomRoleWithResponse call
func ParseDeleteCustomRoleResponse(rsp *http.Response) (*DeleteCustomRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateCustomRoleResponse parses an HTTP response from a UpdateCustomRoleWithResponse call
func ParseUpdateCustomRoleResponse(rsp *http.Response) (*UpdateCustomRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleWithPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomRoleResponse parses an HTTP response from a GetCustomRoleWithResponse call
func ParseGetCustomRoleResponse(rsp *http.Response) (*GetCustomRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleWithPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListRoleBindingsResponse parses an HTTP response from a ListRoleBindingsWithResponse call
func ParseListRoleBindingsResponse(rsp *http.Response) (*ListRoleBindingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRoleBindingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleBindingsPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListOrganizationTeamsResponse parses an HTTP response from a ListOrganizationTeamsWithResponse call
func ParseListOrganizationTeamsResponse(rsp *http.Response) (*ListOrganizationTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddTeamMembersResponse parses an HTTP response from a AddTeamMembersWithResponse call
func ParseAddTeamMembersResponse(rsp *http.Response) (*AddTeamMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTeamMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveTeamMemberResponse parses an HTTP response from a RemoveTeamMemberWithResponse call
func ParseRemoveTeamMemberResponse(rsp *http.Response) (*RemoveTeamMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveTeamMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMutateOrgTeamRoleResponse parses an HTTP response from a MutateOrgTeamRoleWithResponse call
func ParseMutateOrgTeamRoleResponse(rsp *http.Response) (*MutateOrgTeamRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MutateOrgTeamRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListOrgUsersResponse parses an HTTP response from a ListOrgUsersWithResponse call
func ParseListOrgUsersResponse(rsp *http.Response) (*ListOrgUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrgUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteOrgUserResponse parses an HTTP response from a DeleteOrgUserWithResponse call
func ParseDeleteOrgUserResponse(rsp *http.Response) (*DeleteOrgUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrgUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMutateOrgUserRoleResponse parses an HTTP response from a MutateOrgUserRoleWithResponse call
func ParseMutateOrgUserRoleResponse(rsp *http.Response) (*MutateOrgUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MutateOrgUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWorkspacesResponse parses an HTTP response from a ListWorkspacesWithResponse call
func ParseListWorkspacesResponse(rsp *http.Response) (*ListWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspacesPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateWorkspaceResponse parses an HTTP response from a CreateWorkspaceWithResponse call
func ParseCreateWorkspaceResponse(rsp *http.Response) (*CreateWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceResponse parses an HTTP response from a DeleteWorkspaceWithResponse call
func ParseDeleteWorkspaceResponse(rsp *http.Response) (*DeleteWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWorkspaceApiTokensResponse parses an HTTP response from a ListWorkspaceApiTokensWithResponse call
func ParseListWorkspaceApiTokensResponse(rsp *http.Response) (*ListWorkspaceApiTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspaceApiTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListApiTokensPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateWorkspaceApiTokenResponse parses an HTTP response from a CreateWorkspaceApiTokenWithResponse call
func ParseCreateWorkspaceApiTokenResponse(rsp *http.Response) (*CreateWorkspaceApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkspaceApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceApiTokenResponse parses an HTTP response from a DeleteWorkspaceApiTokenWithResponse call
func ParseDeleteWorkspaceApiTokenResponse(rsp *http.Response) (*DeleteWorkspaceApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceApiTokenResponse parses an HTTP response from a GetWorkspaceApiTokenWithResponse call
func ParseGetWorkspaceApiTokenResponse(rsp *http.Response) (*GetWorkspaceApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceApiTokenResponse parses an HTTP response from a UpdateWorkspaceApiTokenWithResponse call
func ParseUpdateWorkspaceApiTokenResponse(rsp *http.Response) (*UpdateWorkspaceApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRotateWorkspaceApiTokenResponse parses an HTTP response from a RotateWorkspaceApiTokenWithResponse call
func ParseRotateWorkspaceApiTokenResponse(rsp *http.Response) (*RotateWorkspaceApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateWorkspaceApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWorkspaceDagFiltersResponse parses an HTTP response from a ListWorkspaceDagFiltersWithResponse call
func ParseListWorkspaceDagFiltersResponse(rsp *http.Response) (*ListWorkspaceDagFiltersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspaceDagFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DagFilters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWorkspaceDagsResponse parses an HTTP response from a ListWorkspaceDagsWithResponse call
func ParseListWorkspaceDagsResponse(rsp *http.Response) (*ListWorkspaceDagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspaceDagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListWorkspaceDags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 5:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON5XX = &dest

	}

	return response, nil
}

// ParseTransferDeploymentResponse parses an HTTP response from a TransferDeploymentWithResponse call
func ParseTransferDeploymentResponse(rsp *http.Response) (*TransferDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TransferDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWorkspaceTeamsResponse parses an HTTP response from a ListWorkspaceTeamsWithResponse call
func ParseListWorkspaceTeamsResponse(rsp *http.Response) (*ListWorkspaceTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspaceTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceTeamResponse parses an HTTP response from a DeleteWorkspaceTeamWithResponse call
func ParseDeleteWorkspaceTeamResponse(rsp *http.Response) (*DeleteWorkspaceTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMutateWorkspaceTeamRoleResponse parses an HTTP response from a MutateWorkspaceTeamRoleWithResponse call
func ParseMutateWorkspaceTeamRoleResponse(rsp *http.Response) (*MutateWorkspaceTeamRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MutateWorkspaceTeamRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWorkspaceUsersResponse parses an HTTP response from a ListWorkspaceUsersWithResponse call
func ParseListWorkspaceUsersResponse(rsp *http.Response) (*ListWorkspaceUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspaceUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceUserResponse parses an HTTP response from a DeleteWorkspaceUserWithResponse call
func ParseDeleteWorkspaceUserResponse(rsp *http.Response) (*DeleteWorkspaceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseMutateWorkspaceUserRoleResponse parses an HTTP response from a MutateWorkspaceUserRoleWithResponse call
func ParseMutateWorkspaceUserRoleResponse(rsp *http.Response) (*MutateWorkspaceUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MutateWorkspaceUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSelfUserResponse parses an HTTP response from a GetSelfUserWithResponse call
func ParseGetSelfUserResponse(rsp *http.Response) (*GetSelfUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Self
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListSelfUserRepositoriesResponse parses an HTTP response from a ListSelfUserRepositoriesWithResponse call
func ParseListSelfUserRepositoriesResponse(rsp *http.Response) (*ListSelfUserRepositoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSelfUserRepositoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepositoriesPaginated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSelfUserRepositoryBranchResponse parses an HTTP response from a GetSelfUserRepositoryBranchWithResponse call
func ParseGetSelfUserRepositoryBranchResponse(rsp *http.Response) (*GetSelfUserRepositoryBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfUserRepositoryBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepositoryBranch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSelfUserGitAppAuthorizationResponse parses an HTTP response from a GetSelfUserGitAppAuthorizationWithResponse call
func ParseGetSelfUserGitAppAuthorizationResponse(rsp *http.Response) (*GetSelfUserGitAppAuthorizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfUserGitAppAuthorizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GitApplicationAuthorization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSelfUserGitAppInstallationResponse parses an HTTP response from a GetSelfUserGitAppInstallationWithResponse call
func ParseGetSelfUserGitAppInstallationResponse(rsp *http.Response) (*GetSelfUserGitAppInstallationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfUserGitAppInstallationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GitApplicationInstallation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateSelfUserInviteResponse parses an HTTP response from a UpdateSelfUserInviteWithResponse call
func ParseUpdateSelfUserInviteResponse(rsp *http.Response) (*UpdateSelfUserInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSelfUserInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
