// Code generated by mockery v2.32.0. DO NOT EDIT.

package astrocore_mocks

import (
	context "context"

	astrocore "github.com/astronomer/astro-cli/astro-client-core"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// AddTeamMembersWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AddTeamMembersWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.AddTeamMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.AddTeamMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.AddTeamMembersResponse, error)); ok {
		return rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.AddTeamMembersResponse); ok {
		r0 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.AddTeamMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTeamMembersWithResponse provides a mock function with given fields: ctx, organizationId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) AddTeamMembersWithResponse(ctx context.Context, organizationId string, teamId string, body astrocore.AddTeamMembersRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.AddTeamMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.AddTeamMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.AddTeamMembersRequest, ...astrocore.RequestEditorFn) (*astrocore.AddTeamMembersResponse, error)); ok {
		return rf(ctx, organizationId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.AddTeamMembersRequest, ...astrocore.RequestEditorFn) *astrocore.AddTeamMembersResponse); ok {
		r0 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.AddTeamMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.AddTeamMembersRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAwsClusterWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAwsClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateAwsClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateAwsClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateAwsClusterResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateAwsClusterResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateAwsClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAwsClusterWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAwsClusterWithResponse(ctx context.Context, organizationId string, body astrocore.CreateAwsClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateAwsClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateAwsClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateAwsClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateAwsClusterResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateAwsClusterRequest, ...astrocore.RequestEditorFn) *astrocore.CreateAwsClusterResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateAwsClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateAwsClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAzureClusterWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAzureClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateAzureClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateAzureClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateAzureClusterResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateAzureClusterResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateAzureClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAzureClusterWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAzureClusterWithResponse(ctx context.Context, organizationId string, body astrocore.CreateAzureClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateAzureClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateAzureClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateAzureClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateAzureClusterResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateAzureClusterRequest, ...astrocore.RequestEditorFn) *astrocore.CreateAzureClusterResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateAzureClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateAzureClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClusterRouteWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateClusterRouteWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateClusterRouteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateClusterRouteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateClusterRouteResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateClusterRouteResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateClusterRouteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClusterRouteWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateClusterRouteWithResponse(ctx context.Context, organizationId string, clusterId string, body astrocore.CreateClusterRouteRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateClusterRouteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateClusterRouteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.CreateClusterRouteRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateClusterRouteResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.CreateClusterRouteRequest, ...astrocore.RequestEditorFn) *astrocore.CreateClusterRouteResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateClusterRouteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.CreateClusterRouteRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomRoleWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateCustomRoleWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateCustomRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateCustomRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateCustomRoleResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateCustomRoleResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateCustomRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomRoleWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateCustomRoleWithResponse(ctx context.Context, organizationId string, body astrocore.CreateCustomRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateCustomRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateCustomRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateCustomRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateCustomRoleResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateCustomRoleRequest, ...astrocore.RequestEditorFn) *astrocore.CreateCustomRoleResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateCustomRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateCustomRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeployWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDeployWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateDeployResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateDeployResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateDeployResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateDeployResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateDeployResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeployWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDeployWithResponse(ctx context.Context, organizationId string, deploymentId string, body astrocore.CreateDeployRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateDeployResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateDeployResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.CreateDeployRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateDeployResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.CreateDeployRequest, ...astrocore.RequestEditorFn) *astrocore.CreateDeployResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateDeployResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.CreateDeployRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDeploymentApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateDeploymentApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateDeploymentApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateDeploymentApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateDeploymentApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateDeploymentApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, body astrocore.CreateDeploymentApiTokenRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateDeploymentApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateDeploymentApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.CreateDeploymentApiTokenRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateDeploymentApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.CreateDeploymentApiTokenRequest, ...astrocore.RequestEditorFn) *astrocore.CreateDeploymentApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateDeploymentApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.CreateDeploymentApiTokenRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateDeploymentWithResponse(ctx context.Context, organizationId string, body astrocore.CreateDeploymentRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateDeploymentRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateDeploymentRequest, ...astrocore.RequestEditorFn) *astrocore.CreateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateDeploymentRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentObjectWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateEnvironmentObjectWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateEnvironmentObjectResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateEnvironmentObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateEnvironmentObjectResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateEnvironmentObjectResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateEnvironmentObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentObjectWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateEnvironmentObjectWithResponse(ctx context.Context, organizationId string, body astrocore.CreateEnvironmentObjectRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateEnvironmentObjectResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateEnvironmentObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateEnvironmentObjectRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateEnvironmentObjectResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateEnvironmentObjectRequest, ...astrocore.RequestEditorFn) *astrocore.CreateEnvironmentObjectResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateEnvironmentObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateEnvironmentObjectRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGcpClusterWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateGcpClusterWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateGcpClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateGcpClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateGcpClusterResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateGcpClusterResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateGcpClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGcpClusterWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateGcpClusterWithResponse(ctx context.Context, organizationId string, body astrocore.CreateGcpClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateGcpClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateGcpClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateGcpClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateGcpClusterResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateGcpClusterRequest, ...astrocore.RequestEditorFn) *astrocore.CreateGcpClusterResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateGcpClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateGcpClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganizationApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateOrganizationApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganizationApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, body astrocore.CreateOrganizationApiTokenRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) *astrocore.CreateOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganizationWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateOrganizationResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganizationWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateOrganizationWithResponse(ctx context.Context, body astrocore.CreateOrganizationRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, astrocore.CreateOrganizationRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, astrocore.CreateOrganizationRequest, ...astrocore.RequestEditorFn) *astrocore.CreateOrganizationResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, astrocore.CreateOrganizationRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTeamWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateTeamWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateTeamResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateTeamResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTeamWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateTeamWithResponse(ctx context.Context, organizationId string, body astrocore.CreateTeamRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateTeamRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateTeamResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateTeamRequest, ...astrocore.RequestEditorFn) *astrocore.CreateTeamResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateTeamRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserInviteWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateUserInviteWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateUserInviteResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateUserInviteResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserInviteWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateUserInviteWithResponse(ctx context.Context, organizationId string, body astrocore.CreateUserInviteRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateUserInviteRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateUserInviteResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateUserInviteRequest, ...astrocore.RequestEditorFn) *astrocore.CreateUserInviteResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateUserInviteRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, body astrocore.CreateWorkspaceApiTokenRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.CreateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.CreateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) *astrocore.CreateWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.CreateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceWithResponse(ctx context.Context, organizationId string, body astrocore.CreateWorkspaceRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateWorkspaceRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateWorkspaceRequest, ...astrocore.RequestEditorFn) *astrocore.CreateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateWorkspaceRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClusterRouteWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, routeId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteClusterRouteWithResponse(ctx context.Context, organizationId string, clusterId string, routeId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteClusterRouteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, routeId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteClusterRouteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteClusterRouteResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, routeId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteClusterRouteResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, routeId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteClusterRouteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, routeId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteClusterWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomRoleWithResponse provides a mock function with given fields: ctx, organizationId, customRoleId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteCustomRoleWithResponse(ctx context.Context, organizationId string, customRoleId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteCustomRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, customRoleId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteCustomRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteCustomRoleResponse, error)); ok {
		return rf(ctx, organizationId, customRoleId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteCustomRoleResponse); ok {
		r0 = rf(ctx, organizationId, customRoleId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteCustomRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, customRoleId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteDeploymentApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteDeploymentApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteDeploymentApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteDeploymentApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteDeploymentApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentTeamWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, teamId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDeploymentTeamWithResponse(ctx context.Context, organizationId string, deploymentId string, teamId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteDeploymentTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteDeploymentTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteDeploymentTeamResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, teamId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteDeploymentTeamResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, teamId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteDeploymentTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, teamId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentUserWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, userId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDeploymentUserWithResponse(ctx context.Context, organizationId string, deploymentId string, userId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteDeploymentUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteDeploymentUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteDeploymentUserResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteDeploymentUserResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteDeploymentUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentObjectWithResponse provides a mock function with given fields: ctx, organizationId, environmentObjectId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteEnvironmentObjectWithResponse(ctx context.Context, organizationId string, environmentObjectId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteEnvironmentObjectResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, environmentObjectId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteEnvironmentObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteEnvironmentObjectResponse, error)); ok {
		return rf(ctx, organizationId, environmentObjectId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteEnvironmentObjectResponse); ok {
		r0 = rf(ctx, organizationId, environmentObjectId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteEnvironmentObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, environmentObjectId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrgUserWithResponse provides a mock function with given fields: ctx, organizationId, userId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteOrgUserWithResponse(ctx context.Context, organizationId string, userId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteOrgUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteOrgUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteOrgUserResponse, error)); ok {
		return rf(ctx, organizationId, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteOrgUserResponse); ok {
		r0 = rf(ctx, organizationId, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteOrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeamWithResponse provides a mock function with given fields: ctx, organizationId, teamId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteTeamWithResponse(ctx context.Context, organizationId string, teamId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteTeamResponse, error)); ok {
		return rf(ctx, organizationId, teamId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteTeamResponse); ok {
		r0 = rf(ctx, organizationId, teamId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserInviteWithResponse provides a mock function with given fields: ctx, organizationId, inviteId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteUserInviteWithResponse(ctx context.Context, organizationId string, inviteId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, inviteId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteUserInviteResponse, error)); ok {
		return rf(ctx, organizationId, inviteId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteUserInviteResponse); ok {
		r0 = rf(ctx, organizationId, inviteId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, inviteId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceTeamWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, teamId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteWorkspaceTeamWithResponse(ctx context.Context, organizationId string, workspaceId string, teamId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteWorkspaceTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceTeamResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, teamId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteWorkspaceTeamResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, teamId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteWorkspaceTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, teamId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceUserWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, userId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteWorkspaceUserWithResponse(ctx context.Context, organizationId string, workspaceId string, userId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteWorkspaceUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceUserResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteWorkspaceUserResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteWorkspaceUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployRollbackWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) DeployRollbackWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeployRollbackResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeployRollbackResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.DeployRollbackResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.DeployRollbackResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeployRollbackResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployRollbackWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, body, reqEditors
func (_m *ClientWithResponsesInterface) DeployRollbackWithResponse(ctx context.Context, organizationId string, deploymentId string, body astrocore.DeployRollbackRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeployRollbackResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeployRollbackResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.DeployRollbackRequest, ...astrocore.RequestEditorFn) (*astrocore.DeployRollbackResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.DeployRollbackRequest, ...astrocore.RequestEditorFn) *astrocore.DeployRollbackResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeployRollbackResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.DeployRollbackRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterOptionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) GetClusterOptionsWithResponse(ctx context.Context, params *astrocore.GetClusterOptionsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetClusterOptionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetClusterOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetClusterOptionsParams, ...astrocore.RequestEditorFn) (*astrocore.GetClusterOptionsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetClusterOptionsParams, ...astrocore.RequestEditorFn) *astrocore.GetClusterOptionsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetClusterOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *astrocore.GetClusterOptionsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, reqEditors
func (_m *ClientWithResponsesInterface) GetClusterWithResponse(ctx context.Context, organizationId string, clusterId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomRoleWithResponse provides a mock function with given fields: ctx, organizationId, roleId, reqEditors
func (_m *ClientWithResponsesInterface) GetCustomRoleWithResponse(ctx context.Context, organizationId string, roleId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetCustomRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, roleId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetCustomRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetCustomRoleResponse, error)); ok {
		return rf(ctx, organizationId, roleId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetCustomRoleResponse); ok {
		r0 = rf(ctx, organizationId, roleId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetCustomRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, roleId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) GetDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetDeploymentApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.GetDeploymentApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetDeploymentApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentHealthWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, reqEditors
func (_m *ClientWithResponsesInterface) GetDeploymentHealthWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentHealthResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetDeploymentHealthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentHealthResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetDeploymentHealthResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetDeploymentHealthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentLogsWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetDeploymentLogsWithResponse(ctx context.Context, organizationId string, deploymentId string, params *astrocore.GetDeploymentLogsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentLogsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetDeploymentLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.GetDeploymentLogsParams, ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentLogsResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.GetDeploymentLogsParams, ...astrocore.RequestEditorFn) *astrocore.GetDeploymentLogsResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetDeploymentLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.GetDeploymentLogsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentOptionsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetDeploymentOptionsWithResponse(ctx context.Context, organizationId string, params *astrocore.GetDeploymentOptionsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentOptionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetDeploymentOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.GetDeploymentOptionsParams, ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentOptionsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.GetDeploymentOptionsParams, ...astrocore.RequestEditorFn) *astrocore.GetDeploymentOptionsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetDeploymentOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.GetDeploymentOptionsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, reqEditors
func (_m *ClientWithResponsesInterface) GetDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentObjectWithResponse provides a mock function with given fields: ctx, organizationId, environmentObjectId, reqEditors
func (_m *ClientWithResponsesInterface) GetEnvironmentObjectWithResponse(ctx context.Context, organizationId string, environmentObjectId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetEnvironmentObjectResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, environmentObjectId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetEnvironmentObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetEnvironmentObjectResponse, error)); ok {
		return rf(ctx, organizationId, environmentObjectId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetEnvironmentObjectResponse); ok {
		r0 = rf(ctx, organizationId, environmentObjectId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetEnvironmentObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, environmentObjectId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) GetOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationAuditLogsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetOrganizationAuditLogsWithResponse(ctx context.Context, organizationId string, params *astrocore.GetOrganizationAuditLogsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationAuditLogsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetOrganizationAuditLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.GetOrganizationAuditLogsParams, ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationAuditLogsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.GetOrganizationAuditLogsParams, ...astrocore.RequestEditorFn) *astrocore.GetOrganizationAuditLogsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetOrganizationAuditLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.GetOrganizationAuditLogsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetOrganizationWithResponse(ctx context.Context, organizationId string, params *astrocore.GetOrganizationParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.GetOrganizationParams, ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.GetOrganizationParams, ...astrocore.RequestEditorFn) *astrocore.GetOrganizationResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.GetOrganizationParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSelfUserWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) GetSelfUserWithResponse(ctx context.Context, params *astrocore.GetSelfUserParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetSelfUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetSelfUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetSelfUserParams, ...astrocore.RequestEditorFn) (*astrocore.GetSelfUserResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetSelfUserParams, ...astrocore.RequestEditorFn) *astrocore.GetSelfUserResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetSelfUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *astrocore.GetSelfUserParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSharedClusterWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) GetSharedClusterWithResponse(ctx context.Context, params *astrocore.GetSharedClusterParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetSharedClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetSharedClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetSharedClusterParams, ...astrocore.RequestEditorFn) (*astrocore.GetSharedClusterResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetSharedClusterParams, ...astrocore.RequestEditorFn) *astrocore.GetSharedClusterResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetSharedClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *astrocore.GetSharedClusterParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamWithResponse provides a mock function with given fields: ctx, organizationId, teamId, reqEditors
func (_m *ClientWithResponsesInterface) GetTeamWithResponse(ctx context.Context, organizationId string, teamId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetTeamResponse, error)); ok {
		return rf(ctx, organizationId, teamId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetTeamResponse); ok {
		r0 = rf(ctx, organizationId, teamId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInviteWithResponse provides a mock function with given fields: ctx, inviteId, reqEditors
func (_m *ClientWithResponsesInterface) GetUserInviteWithResponse(ctx context.Context, inviteId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, inviteId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) (*astrocore.GetUserInviteResponse, error)); ok {
		return rf(ctx, inviteId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) *astrocore.GetUserInviteResponse); ok {
		r0 = rf(ctx, inviteId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, inviteId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWithResponse provides a mock function with given fields: ctx, organizationId, userId, reqEditors
func (_m *ClientWithResponsesInterface) GetUserWithResponse(ctx context.Context, organizationId string, userId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetUserResponse, error)); ok {
		return rf(ctx, organizationId, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetUserResponse); ok {
		r0 = rf(ctx, organizationId, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) GetWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.GetWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, reqEditors
func (_m *ClientWithResponsesInterface) GetWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusterRoutesWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListClusterRoutesWithResponse(ctx context.Context, organizationId string, clusterId string, params *astrocore.ListClusterRoutesParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListClusterRoutesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListClusterRoutesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListClusterRoutesParams, ...astrocore.RequestEditorFn) (*astrocore.ListClusterRoutesResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListClusterRoutesParams, ...astrocore.RequestEditorFn) *astrocore.ListClusterRoutesResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListClusterRoutesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListClusterRoutesParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClustersWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListClustersWithResponse(ctx context.Context, organizationId string, params *astrocore.ListClustersParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListClustersParams, ...astrocore.RequestEditorFn) (*astrocore.ListClustersResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListClustersParams, ...astrocore.RequestEditorFn) *astrocore.ListClustersResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListClustersParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentApiTokensWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListDeploymentApiTokensWithResponse(ctx context.Context, organizationId string, deploymentId string, params *astrocore.ListDeploymentApiTokensParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListDeploymentApiTokensResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListDeploymentApiTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListDeploymentApiTokensParams, ...astrocore.RequestEditorFn) (*astrocore.ListDeploymentApiTokensResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListDeploymentApiTokensParams, ...astrocore.RequestEditorFn) *astrocore.ListDeploymentApiTokensResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListDeploymentApiTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListDeploymentApiTokensParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentTeamsWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListDeploymentTeamsWithResponse(ctx context.Context, organizationId string, deploymentId string, params *astrocore.ListDeploymentTeamsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListDeploymentTeamsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListDeploymentTeamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListDeploymentTeamsParams, ...astrocore.RequestEditorFn) (*astrocore.ListDeploymentTeamsResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListDeploymentTeamsParams, ...astrocore.RequestEditorFn) *astrocore.ListDeploymentTeamsResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListDeploymentTeamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListDeploymentTeamsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentUsersWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListDeploymentUsersWithResponse(ctx context.Context, organizationId string, deploymentId string, params *astrocore.ListDeploymentUsersParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListDeploymentUsersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListDeploymentUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListDeploymentUsersParams, ...astrocore.RequestEditorFn) (*astrocore.ListDeploymentUsersResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListDeploymentUsersParams, ...astrocore.RequestEditorFn) *astrocore.ListDeploymentUsersResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListDeploymentUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListDeploymentUsersParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListDeploymentsWithResponse(ctx context.Context, organizationId string, params *astrocore.ListDeploymentsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListDeploymentsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListDeploymentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListDeploymentsParams, ...astrocore.RequestEditorFn) (*astrocore.ListDeploymentsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListDeploymentsParams, ...astrocore.RequestEditorFn) *astrocore.ListDeploymentsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListDeploymentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListDeploymentsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploysWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListDeploysWithResponse(ctx context.Context, organizationId string, deploymentId string, params *astrocore.ListDeploysParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListDeploysResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListDeploysResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListDeploysParams, ...astrocore.RequestEditorFn) (*astrocore.ListDeploysResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListDeploysParams, ...astrocore.RequestEditorFn) *astrocore.ListDeploysResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListDeploysResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListDeploysParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentObjectsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListEnvironmentObjectsWithResponse(ctx context.Context, organizationId string, params *astrocore.ListEnvironmentObjectsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListEnvironmentObjectsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListEnvironmentObjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListEnvironmentObjectsParams, ...astrocore.RequestEditorFn) (*astrocore.ListEnvironmentObjectsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListEnvironmentObjectsParams, ...astrocore.RequestEditorFn) *astrocore.ListEnvironmentObjectsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListEnvironmentObjectsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListEnvironmentObjectsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrgUsersWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrgUsersWithResponse(ctx context.Context, organizationId string, params *astrocore.ListOrgUsersParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListOrgUsersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListOrgUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrgUsersParams, ...astrocore.RequestEditorFn) (*astrocore.ListOrgUsersResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrgUsersParams, ...astrocore.RequestEditorFn) *astrocore.ListOrgUsersResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListOrgUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListOrgUsersParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationApiTokensWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrganizationApiTokensWithResponse(ctx context.Context, organizationId string, params *astrocore.ListOrganizationApiTokensParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationApiTokensResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListOrganizationApiTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrganizationApiTokensParams, ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationApiTokensResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrganizationApiTokensParams, ...astrocore.RequestEditorFn) *astrocore.ListOrganizationApiTokensResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListOrganizationApiTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListOrganizationApiTokensParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationTeamsWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrganizationTeamsWithResponse(ctx context.Context, organizationId string, params *astrocore.ListOrganizationTeamsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationTeamsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListOrganizationTeamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrganizationTeamsParams, ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationTeamsResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrganizationTeamsParams, ...astrocore.RequestEditorFn) *astrocore.ListOrganizationTeamsResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListOrganizationTeamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListOrganizationTeamsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrganizationsWithResponse(ctx context.Context, params *astrocore.ListOrganizationsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListOrganizationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.ListOrganizationsParams, ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.ListOrganizationsParams, ...astrocore.RequestEditorFn) *astrocore.ListOrganizationsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListOrganizationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *astrocore.ListOrganizationsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoleBindingsWithResponse provides a mock function with given fields: ctx, organizationId, roleId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListRoleBindingsWithResponse(ctx context.Context, organizationId string, roleId string, params *astrocore.ListRoleBindingsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListRoleBindingsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, roleId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListRoleBindingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListRoleBindingsParams, ...astrocore.RequestEditorFn) (*astrocore.ListRoleBindingsResponse, error)); ok {
		return rf(ctx, organizationId, roleId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListRoleBindingsParams, ...astrocore.RequestEditorFn) *astrocore.ListRoleBindingsResponse); ok {
		r0 = rf(ctx, organizationId, roleId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListRoleBindingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListRoleBindingsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, roleId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoleTemplatesWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListRoleTemplatesWithResponse(ctx context.Context, organizationId string, params *astrocore.ListRoleTemplatesParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListRoleTemplatesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListRoleTemplatesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListRoleTemplatesParams, ...astrocore.RequestEditorFn) (*astrocore.ListRoleTemplatesResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListRoleTemplatesParams, ...astrocore.RequestEditorFn) *astrocore.ListRoleTemplatesResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListRoleTemplatesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListRoleTemplatesParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRolesWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListRolesWithResponse(ctx context.Context, organizationId string, params *astrocore.ListRolesParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListRolesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListRolesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListRolesParams, ...astrocore.RequestEditorFn) (*astrocore.ListRolesResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListRolesParams, ...astrocore.RequestEditorFn) *astrocore.ListRolesResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListRolesParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSelfUserRepositoriesWithResponse provides a mock function with given fields: ctx, gitProvider, gitAccount, params, reqEditors
func (_m *ClientWithResponsesInterface) ListSelfUserRepositoriesWithResponse(ctx context.Context, gitProvider astrocore.ListSelfUserRepositoriesParamsGitProvider, gitAccount string, params *astrocore.ListSelfUserRepositoriesParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListSelfUserRepositoriesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, gitProvider, gitAccount, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListSelfUserRepositoriesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, astrocore.ListSelfUserRepositoriesParamsGitProvider, string, *astrocore.ListSelfUserRepositoriesParams, ...astrocore.RequestEditorFn) (*astrocore.ListSelfUserRepositoriesResponse, error)); ok {
		return rf(ctx, gitProvider, gitAccount, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, astrocore.ListSelfUserRepositoriesParamsGitProvider, string, *astrocore.ListSelfUserRepositoriesParams, ...astrocore.RequestEditorFn) *astrocore.ListSelfUserRepositoriesResponse); ok {
		r0 = rf(ctx, gitProvider, gitAccount, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListSelfUserRepositoriesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, astrocore.ListSelfUserRepositoriesParamsGitProvider, string, *astrocore.ListSelfUserRepositoriesParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, gitProvider, gitAccount, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceApiTokensWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspaceApiTokensWithResponse(ctx context.Context, organizationId string, workspaceId string, params *astrocore.ListWorkspaceApiTokensParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceApiTokensResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspaceApiTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceApiTokensParams, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceApiTokensResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceApiTokensParams, ...astrocore.RequestEditorFn) *astrocore.ListWorkspaceApiTokensResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspaceApiTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListWorkspaceApiTokensParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceDagFiltersWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspaceDagFiltersWithResponse(ctx context.Context, organizationId string, workspaceId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceDagFiltersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspaceDagFiltersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceDagFiltersResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.ListWorkspaceDagFiltersResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspaceDagFiltersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceDagsWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspaceDagsWithResponse(ctx context.Context, organizationId string, workspaceId string, params *astrocore.ListWorkspaceDagsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceDagsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspaceDagsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceDagsParams, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceDagsResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceDagsParams, ...astrocore.RequestEditorFn) *astrocore.ListWorkspaceDagsResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspaceDagsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListWorkspaceDagsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceTeamsWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspaceTeamsWithResponse(ctx context.Context, organizationId string, workspaceId string, params *astrocore.ListWorkspaceTeamsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceTeamsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspaceTeamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceTeamsParams, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceTeamsResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceTeamsParams, ...astrocore.RequestEditorFn) *astrocore.ListWorkspaceTeamsResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspaceTeamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListWorkspaceTeamsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceUsersWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspaceUsersWithResponse(ctx context.Context, organizationId string, workspaceId string, params *astrocore.ListWorkspaceUsersParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceUsersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspaceUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceUsersParams, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceUsersResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceUsersParams, ...astrocore.RequestEditorFn) *astrocore.ListWorkspaceUsersResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspaceUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListWorkspaceUsersParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspacesWithResponse provides a mock function with given fields: ctx, organizationId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspacesWithResponse(ctx context.Context, organizationId string, params *astrocore.ListWorkspacesParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspacesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspacesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListWorkspacesParams, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspacesResponse, error)); ok {
		return rf(ctx, organizationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListWorkspacesParams, ...astrocore.RequestEditorFn) *astrocore.ListWorkspacesResponse); ok {
		r0 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspacesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListWorkspacesParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateDeploymentTeamRoleWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateDeploymentTeamRoleWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, teamId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateDeploymentTeamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateDeploymentTeamRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.MutateDeploymentTeamRoleResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.MutateDeploymentTeamRoleResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateDeploymentTeamRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateDeploymentTeamRoleWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateDeploymentTeamRoleWithResponse(ctx context.Context, organizationId string, deploymentId string, teamId string, body astrocore.MutateDeploymentTeamRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateDeploymentTeamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateDeploymentTeamRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateDeploymentTeamRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.MutateDeploymentTeamRoleResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateDeploymentTeamRoleRequest, ...astrocore.RequestEditorFn) *astrocore.MutateDeploymentTeamRoleResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateDeploymentTeamRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.MutateDeploymentTeamRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateDeploymentUserRoleWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, userId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateDeploymentUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, userId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateDeploymentUserRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, userId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateDeploymentUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.MutateDeploymentUserRoleResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, userId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.MutateDeploymentUserRoleResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, userId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateDeploymentUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, userId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateDeploymentUserRoleWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, userId, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateDeploymentUserRoleWithResponse(ctx context.Context, organizationId string, deploymentId string, userId string, body astrocore.MutateDeploymentUserRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateDeploymentUserRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, userId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateDeploymentUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateDeploymentUserRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.MutateDeploymentUserRoleResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, userId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateDeploymentUserRoleRequest, ...astrocore.RequestEditorFn) *astrocore.MutateDeploymentUserRoleResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, userId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateDeploymentUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.MutateDeploymentUserRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, userId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateOrgTeamRoleWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateOrgTeamRoleWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateOrgTeamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateOrgTeamRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.MutateOrgTeamRoleResponse, error)); ok {
		return rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.MutateOrgTeamRoleResponse); ok {
		r0 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateOrgTeamRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateOrgTeamRoleWithResponse provides a mock function with given fields: ctx, organizationId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateOrgTeamRoleWithResponse(ctx context.Context, organizationId string, teamId string, body astrocore.MutateOrgTeamRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateOrgTeamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateOrgTeamRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.MutateOrgTeamRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.MutateOrgTeamRoleResponse, error)); ok {
		return rf(ctx, organizationId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.MutateOrgTeamRoleRequest, ...astrocore.RequestEditorFn) *astrocore.MutateOrgTeamRoleResponse); ok {
		r0 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateOrgTeamRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.MutateOrgTeamRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateOrgUserRoleWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, userId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateOrgUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateOrgUserRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, userId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateOrgUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.MutateOrgUserRoleResponse, error)); ok {
		return rf(ctx, organizationId, userId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.MutateOrgUserRoleResponse); ok {
		r0 = rf(ctx, organizationId, userId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateOrgUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, userId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateOrgUserRoleWithResponse provides a mock function with given fields: ctx, organizationId, userId, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateOrgUserRoleWithResponse(ctx context.Context, organizationId string, userId string, body astrocore.MutateOrgUserRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateOrgUserRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, userId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateOrgUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.MutateOrgUserRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.MutateOrgUserRoleResponse, error)); ok {
		return rf(ctx, organizationId, userId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.MutateOrgUserRoleRequest, ...astrocore.RequestEditorFn) *astrocore.MutateOrgUserRoleResponse); ok {
		r0 = rf(ctx, organizationId, userId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateOrgUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.MutateOrgUserRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, userId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateWorkspaceTeamRoleWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateWorkspaceTeamRoleWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, teamId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceTeamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateWorkspaceTeamRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceTeamRoleResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.MutateWorkspaceTeamRoleResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateWorkspaceTeamRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateWorkspaceTeamRoleWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateWorkspaceTeamRoleWithResponse(ctx context.Context, organizationId string, workspaceId string, teamId string, body astrocore.MutateWorkspaceTeamRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceTeamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateWorkspaceTeamRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateWorkspaceTeamRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceTeamRoleResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateWorkspaceTeamRoleRequest, ...astrocore.RequestEditorFn) *astrocore.MutateWorkspaceTeamRoleResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateWorkspaceTeamRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.MutateWorkspaceTeamRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateWorkspaceUserRoleWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, userId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateWorkspaceUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, userId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceUserRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, userId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateWorkspaceUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceUserRoleResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, userId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.MutateWorkspaceUserRoleResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, userId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateWorkspaceUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, userId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateWorkspaceUserRoleWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, userId, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateWorkspaceUserRoleWithResponse(ctx context.Context, organizationId string, workspaceId string, userId string, body astrocore.MutateWorkspaceUserRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceUserRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, userId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateWorkspaceUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateWorkspaceUserRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceUserRoleResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, userId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateWorkspaceUserRoleRequest, ...astrocore.RequestEditorFn) *astrocore.MutateWorkspaceUserRoleResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, userId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateWorkspaceUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.MutateWorkspaceUserRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, userId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTeamMemberWithResponse provides a mock function with given fields: ctx, organizationId, teamId, memberId, reqEditors
func (_m *ClientWithResponsesInterface) RemoveTeamMemberWithResponse(ctx context.Context, organizationId string, teamId string, memberId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.RemoveTeamMemberResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, memberId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.RemoveTeamMemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.RemoveTeamMemberResponse, error)); ok {
		return rf(ctx, organizationId, teamId, memberId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.RemoveTeamMemberResponse); ok {
		r0 = rf(ctx, organizationId, teamId, memberId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.RemoveTeamMemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, memberId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateDeploymentApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) RotateDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.RotateDeploymentApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.RotateDeploymentApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.RotateDeploymentApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.RotateDeploymentApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.RotateDeploymentApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateOrganizationApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) RotateOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.RotateOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.RotateOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.RotateOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.RotateOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.RotateOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateWorkspaceApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) RotateWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.RotateWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.RotateWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.RotateWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.RotateWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.RotateWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferDeploymentWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, deploymentId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) TransferDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, deploymentId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.TransferDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, deploymentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.TransferDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.TransferDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, deploymentId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.TransferDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, deploymentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.TransferDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, deploymentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, deploymentId, body, reqEditors
func (_m *ClientWithResponsesInterface) TransferDeploymentWithResponse(ctx context.Context, organizationId string, workspaceId string, deploymentId string, body astrocore.TransferDeploymentRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.TransferDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, deploymentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.TransferDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.TransferDeploymentRequest, ...astrocore.RequestEditorFn) (*astrocore.TransferDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, deploymentId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.TransferDeploymentRequest, ...astrocore.RequestEditorFn) *astrocore.TransferDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, deploymentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.TransferDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.TransferDeploymentRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, deploymentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAwsClusterWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateAwsClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateAwsClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateAwsClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateAwsClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateAwsClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateAwsClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAwsClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateAwsClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body astrocore.UpdateAwsClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateAwsClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateAwsClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateAwsClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateAwsClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateAwsClusterRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateAwsClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateAwsClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateAwsClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAzureClusterWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateAzureClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateAzureClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateAzureClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateAzureClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateAzureClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateAzureClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAzureClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateAzureClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body astrocore.UpdateAzureClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateAzureClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateAzureClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateAzureClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateAzureClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateAzureClusterRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateAzureClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateAzureClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateAzureClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomRoleWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, customRoleId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateCustomRoleWithBodyWithResponse(ctx context.Context, organizationId string, customRoleId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateCustomRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, customRoleId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateCustomRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateCustomRoleResponse, error)); ok {
		return rf(ctx, organizationId, customRoleId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateCustomRoleResponse); ok {
		r0 = rf(ctx, organizationId, customRoleId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateCustomRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, customRoleId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomRoleWithResponse provides a mock function with given fields: ctx, organizationId, customRoleId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateCustomRoleWithResponse(ctx context.Context, organizationId string, customRoleId string, body astrocore.UpdateCustomRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateCustomRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, customRoleId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateCustomRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateCustomRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateCustomRoleResponse, error)); ok {
		return rf(ctx, organizationId, customRoleId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateCustomRoleRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateCustomRoleResponse); ok {
		r0 = rf(ctx, organizationId, customRoleId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateCustomRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateCustomRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, customRoleId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeployWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, deployId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeployWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateDeployResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, deployId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateDeployResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateDeployResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, deployId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateDeployResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, deployId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateDeployResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, deployId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeployWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, deployId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeployWithResponse(ctx context.Context, organizationId string, deploymentId string, deployId string, body astrocore.UpdateDeployRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateDeployResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, deployId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateDeployResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.UpdateDeployRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateDeployResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, deployId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.UpdateDeployRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateDeployResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, deployId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateDeployResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.UpdateDeployRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, deployId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, apiTokenId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateDeploymentApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, apiTokenId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateDeploymentApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateDeploymentApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, apiTokenId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateDeploymentApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, apiTokenId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateDeploymentApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, apiTokenId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, apiTokenId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentApiTokenWithResponse(ctx context.Context, organizationId string, deploymentId string, apiTokenId string, body astrocore.UpdateDeploymentApiTokenRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateDeploymentApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, apiTokenId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateDeploymentApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.UpdateDeploymentApiTokenRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateDeploymentApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, apiTokenId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.UpdateDeploymentApiTokenRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateDeploymentApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, apiTokenId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateDeploymentApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.UpdateDeploymentApiTokenRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, apiTokenId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentWithBodyWithResponse(ctx context.Context, organizationId string, deploymentId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeploymentWithResponse provides a mock function with given fields: ctx, organizationId, deploymentId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateDeploymentWithResponse(ctx context.Context, organizationId string, deploymentId string, body astrocore.UpdateDeploymentRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateDeploymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, deploymentId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateDeploymentRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateDeploymentResponse, error)); ok {
		return rf(ctx, organizationId, deploymentId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateDeploymentRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateDeploymentResponse); ok {
		r0 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateDeploymentRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, deploymentId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironmentObjectWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, environmentObjectId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateEnvironmentObjectWithBodyWithResponse(ctx context.Context, organizationId string, environmentObjectId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateEnvironmentObjectResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, environmentObjectId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateEnvironmentObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateEnvironmentObjectResponse, error)); ok {
		return rf(ctx, organizationId, environmentObjectId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateEnvironmentObjectResponse); ok {
		r0 = rf(ctx, organizationId, environmentObjectId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateEnvironmentObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, environmentObjectId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironmentObjectWithResponse provides a mock function with given fields: ctx, organizationId, environmentObjectId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateEnvironmentObjectWithResponse(ctx context.Context, organizationId string, environmentObjectId string, body astrocore.UpdateEnvironmentObjectRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateEnvironmentObjectResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, environmentObjectId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateEnvironmentObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateEnvironmentObjectRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateEnvironmentObjectResponse, error)); ok {
		return rf(ctx, organizationId, environmentObjectId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateEnvironmentObjectRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateEnvironmentObjectResponse); ok {
		r0 = rf(ctx, organizationId, environmentObjectId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateEnvironmentObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateEnvironmentObjectRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, environmentObjectId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGcpClusterWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateGcpClusterWithBodyWithResponse(ctx context.Context, organizationId string, clusterId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateGcpClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateGcpClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateGcpClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateGcpClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateGcpClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGcpClusterWithResponse provides a mock function with given fields: ctx, organizationId, clusterId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateGcpClusterWithResponse(ctx context.Context, organizationId string, clusterId string, body astrocore.UpdateGcpClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateGcpClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateGcpClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateGcpClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateGcpClusterResponse, error)); ok {
		return rf(ctx, organizationId, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateGcpClusterRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateGcpClusterResponse); ok {
		r0 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateGcpClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateGcpClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, apiTokenId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, apiTokenId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, apiTokenId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, apiTokenId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, apiTokenId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, apiTokenId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationApiTokenWithResponse(ctx context.Context, organizationId string, apiTokenId string, body astrocore.UpdateOrganizationApiTokenRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, apiTokenId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, apiTokenId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, apiTokenId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, apiTokenId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationResponse, error)); ok {
		return rf(ctx, organizationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateOrganizationResponse); ok {
		r0 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationWithResponse provides a mock function with given fields: ctx, organizationId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationWithResponse(ctx context.Context, organizationId string, body astrocore.UpdateOrganizationRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.UpdateOrganizationRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationResponse, error)); ok {
		return rf(ctx, organizationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.UpdateOrganizationRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateOrganizationResponse); ok {
		r0 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.UpdateOrganizationRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSelfUserInviteWithBodyWithResponse provides a mock function with given fields: ctx, inviteId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateSelfUserInviteWithBodyWithResponse(ctx context.Context, inviteId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateSelfUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, inviteId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateSelfUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateSelfUserInviteResponse, error)); ok {
		return rf(ctx, inviteId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateSelfUserInviteResponse); ok {
		r0 = rf(ctx, inviteId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateSelfUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, inviteId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSelfUserInviteWithResponse provides a mock function with given fields: ctx, inviteId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateSelfUserInviteWithResponse(ctx context.Context, inviteId string, body astrocore.UpdateInviteRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateSelfUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, inviteId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateSelfUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.UpdateInviteRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateSelfUserInviteResponse, error)); ok {
		return rf(ctx, inviteId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.UpdateInviteRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateSelfUserInviteResponse); ok {
		r0 = rf(ctx, inviteId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateSelfUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.UpdateInviteRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, inviteId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeamWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateTeamWithBodyWithResponse(ctx context.Context, organizationId string, teamId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateTeamResponse, error)); ok {
		return rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateTeamResponse); ok {
		r0 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeamWithResponse provides a mock function with given fields: ctx, organizationId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateTeamWithResponse(ctx context.Context, organizationId string, teamId string, body astrocore.UpdateTeamRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateTeamRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateTeamResponse, error)); ok {
		return rf(ctx, organizationId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateTeamRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateTeamResponse); ok {
		r0 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateTeamRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, apiTokenId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceApiTokenWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, apiTokenId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, apiTokenId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, apiTokenId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, apiTokenId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceApiTokenWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, apiTokenId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceApiTokenWithResponse(ctx context.Context, organizationId string, workspaceId string, apiTokenId string, body astrocore.UpdateWorkspaceApiTokenRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, apiTokenId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.UpdateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, apiTokenId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.UpdateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, apiTokenId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.UpdateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, apiTokenId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceWithBodyWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, organizationId string, workspaceId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceWithResponse provides a mock function with given fields: ctx, organizationId, workspaceId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceWithResponse(ctx context.Context, organizationId string, workspaceId string, body astrocore.UpdateWorkspaceRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organizationId, workspaceId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateWorkspaceRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceResponse, error)); ok {
		return rf(ctx, organizationId, workspaceId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateWorkspaceRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateWorkspaceResponse); ok {
		r0 = rf(ctx, organizationId, workspaceId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateWorkspaceRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, organizationId, workspaceId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
