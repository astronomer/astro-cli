// Code generated by mockery v2.20.2. DO NOT EDIT.

package astrocore_mocks

import (
	context "context"

	astrocore "github.com/astronomer/astro-cli/astro-client-core"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// AddTeamMembersWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AddTeamMembersWithBodyWithResponse(ctx context.Context, orgShortNameId string, teamId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.AddTeamMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.AddTeamMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.AddTeamMembersResponse, error)); ok {
		return rf(ctx, orgShortNameId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.AddTeamMembersResponse); ok {
		r0 = rf(ctx, orgShortNameId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.AddTeamMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTeamMembersWithResponse provides a mock function with given fields: ctx, orgShortNameId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) AddTeamMembersWithResponse(ctx context.Context, orgShortNameId string, teamId string, body astrocore.AddTeamMembersRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.AddTeamMembersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.AddTeamMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.AddTeamMembersRequest, ...astrocore.RequestEditorFn) (*astrocore.AddTeamMembersResponse, error)); ok {
		return rf(ctx, orgShortNameId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.AddTeamMembersRequest, ...astrocore.RequestEditorFn) *astrocore.AddTeamMembersResponse); ok {
		r0 = rf(ctx, orgShortNameId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.AddTeamMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.AddTeamMembersRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAwsClusterWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAwsClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateAwsClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateAwsClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateAwsClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateAwsClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateAwsClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAwsClusterWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAwsClusterWithResponse(ctx context.Context, orgShortNameId string, body astrocore.CreateAwsClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateAwsClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateAwsClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateAwsClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateAwsClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateAwsClusterRequest, ...astrocore.RequestEditorFn) *astrocore.CreateAwsClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateAwsClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateAwsClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAzureClusterWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAzureClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateAzureClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateAzureClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateAzureClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateAzureClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateAzureClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAzureClusterWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateAzureClusterWithResponse(ctx context.Context, orgShortNameId string, body astrocore.CreateAzureClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateAzureClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateAzureClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateAzureClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateAzureClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateAzureClusterRequest, ...astrocore.RequestEditorFn) *astrocore.CreateAzureClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateAzureClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateAzureClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGcpClusterWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateGcpClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateGcpClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateGcpClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateGcpClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateGcpClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateGcpClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGcpClusterWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateGcpClusterWithResponse(ctx context.Context, orgShortNameId string, body astrocore.CreateGcpClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateGcpClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateGcpClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateGcpClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateGcpClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateGcpClusterRequest, ...astrocore.RequestEditorFn) *astrocore.CreateGcpClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateGcpClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateGcpClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateManagedDomainWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateManagedDomainWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateManagedDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateManagedDomainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateManagedDomainResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateManagedDomainResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateManagedDomainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateManagedDomainWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateManagedDomainWithResponse(ctx context.Context, orgShortNameId string, body astrocore.CreateManagedDomainRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateManagedDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateManagedDomainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateManagedDomainRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateManagedDomainResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateManagedDomainRequest, ...astrocore.RequestEditorFn) *astrocore.CreateManagedDomainResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateManagedDomainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateManagedDomainRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganizationApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateOrganizationApiTokenWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganizationApiTokenWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateOrganizationApiTokenWithResponse(ctx context.Context, orgShortNameId string, body astrocore.CreateOrganizationApiTokenRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) *astrocore.CreateOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganizationWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateOrganizationResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganizationWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateOrganizationWithResponse(ctx context.Context, body astrocore.CreateOrganizationRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, astrocore.CreateOrganizationRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateOrganizationResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, astrocore.CreateOrganizationRequest, ...astrocore.RequestEditorFn) *astrocore.CreateOrganizationResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, astrocore.CreateOrganizationRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSsoConnectionWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateSsoConnectionWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateSsoConnectionResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateSsoConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateSsoConnectionResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateSsoConnectionResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateSsoConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSsoConnectionWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, body astrocore.CreateSsoConnectionRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateSsoConnectionResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateSsoConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateSsoConnectionRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateSsoConnectionResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateSsoConnectionRequest, ...astrocore.RequestEditorFn) *astrocore.CreateSsoConnectionResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateSsoConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateSsoConnectionRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTeamWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateTeamWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateTeamResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateTeamResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTeamWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateTeamWithResponse(ctx context.Context, orgShortNameId string, body astrocore.CreateTeamRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateTeamRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateTeamResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateTeamRequest, ...astrocore.RequestEditorFn) *astrocore.CreateTeamResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateTeamRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserInviteWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateUserInviteWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateUserInviteResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateUserInviteResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserInviteWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateUserInviteWithResponse(ctx context.Context, orgShortNameId string, body astrocore.CreateUserInviteRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateUserInviteRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateUserInviteResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.CreateUserInviteRequest, ...astrocore.RequestEditorFn) *astrocore.CreateUserInviteResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.CreateUserInviteRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceApiTokenWithBodyWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceApiTokenWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceApiTokenWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, body astrocore.CreateWorkspaceApiTokenRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.CreateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.CreateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) *astrocore.CreateWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.CreateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.CreateWorkspaceResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) CreateWorkspaceWithResponse(ctx context.Context, orgShortNameId string, body astrocore.MutateWorkspaceRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.CreateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.MutateWorkspaceRequest, ...astrocore.RequestEditorFn) (*astrocore.CreateWorkspaceResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.MutateWorkspaceRequest, ...astrocore.RequestEditorFn) *astrocore.CreateWorkspaceResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.CreateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.MutateWorkspaceRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClusterWithResponse provides a mock function with given fields: ctx, orgShortNameId, clusterId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteManagedDomainWithResponse provides a mock function with given fields: ctx, orgShortNameId, domainId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteManagedDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, domainId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteManagedDomainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteManagedDomainResponse, error)); ok {
		return rf(ctx, orgShortNameId, domainId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteManagedDomainResponse); ok {
		r0 = rf(ctx, orgShortNameId, domainId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteManagedDomainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, domainId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrgUserWithResponse provides a mock function with given fields: ctx, orgShortNameId, userId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteOrgUserWithResponse(ctx context.Context, orgShortNameId string, userId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteOrgUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteOrgUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteOrgUserResponse, error)); ok {
		return rf(ctx, orgShortNameId, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteOrgUserResponse); ok {
		r0 = rf(ctx, orgShortNameId, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteOrgUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationApiTokenWithResponse provides a mock function with given fields: ctx, orgShortNameId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteOrganizationApiTokenWithResponse(ctx context.Context, orgShortNameId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSsoBypassKeyWithResponse provides a mock function with given fields: ctx, orgShortNameId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteSsoBypassKeyWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteSsoBypassKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteSsoBypassKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteSsoBypassKeyResponse, error)); ok {
		return rf(ctx, orgShortNameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) *astrocore.DeleteSsoBypassKeyResponse); ok {
		r0 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteSsoBypassKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSsoConnectionWithResponse provides a mock function with given fields: ctx, orgShortNameId, connectionId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, connectionId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteSsoConnectionResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, connectionId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteSsoConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteSsoConnectionResponse, error)); ok {
		return rf(ctx, orgShortNameId, connectionId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteSsoConnectionResponse); ok {
		r0 = rf(ctx, orgShortNameId, connectionId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteSsoConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, connectionId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeamWithResponse provides a mock function with given fields: ctx, orgShortNameId, teamId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteTeamWithResponse(ctx context.Context, orgShortNameId string, teamId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteTeamResponse, error)); ok {
		return rf(ctx, orgShortNameId, teamId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteTeamResponse); ok {
		r0 = rf(ctx, orgShortNameId, teamId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, teamId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserInviteWithResponse provides a mock function with given fields: ctx, orgShortNameId, inviteId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteUserInviteWithResponse(ctx context.Context, orgShortNameId string, inviteId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, inviteId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteUserInviteResponse, error)); ok {
		return rf(ctx, orgShortNameId, inviteId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteUserInviteResponse); ok {
		r0 = rf(ctx, orgShortNameId, inviteId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, inviteId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceApiTokenWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteWorkspaceApiTokenWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceTeamWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, teamId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteWorkspaceTeamWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, teamId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteWorkspaceTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceTeamResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, teamId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteWorkspaceTeamResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, teamId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteWorkspaceTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, teamId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceUserWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, userId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteWorkspaceUserWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, userId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteWorkspaceUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceUserResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteWorkspaceUserResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteWorkspaceUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, reqEditors
func (_m *ClientWithResponsesInterface) DeleteWorkspaceWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.DeleteWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.DeleteWorkspaceResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.DeleteWorkspaceResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.DeleteWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterOptionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) GetClusterOptionsWithResponse(ctx context.Context, params *astrocore.GetClusterOptionsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetClusterOptionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetClusterOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetClusterOptionsParams, ...astrocore.RequestEditorFn) (*astrocore.GetClusterOptionsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetClusterOptionsParams, ...astrocore.RequestEditorFn) *astrocore.GetClusterOptionsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetClusterOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *astrocore.GetClusterOptionsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterWithResponse provides a mock function with given fields: ctx, orgShortNameId, clusterId, reqEditors
func (_m *ClientWithResponsesInterface) GetClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, clusterId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, clusterId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, clusterId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, clusterId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCreditSummaryWithResponse provides a mock function with given fields: ctx, orgShortNameId, reqEditors
func (_m *ClientWithResponsesInterface) GetCreditSummaryWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetCreditSummaryResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetCreditSummaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) (*astrocore.GetCreditSummaryResponse, error)); ok {
		return rf(ctx, orgShortNameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) *astrocore.GetCreditSummaryResponse); ok {
		r0 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetCreditSummaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentOptionsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) GetDeploymentOptionsWithResponse(ctx context.Context, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentOptionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetDeploymentOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...astrocore.RequestEditorFn) (*astrocore.GetDeploymentOptionsResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...astrocore.RequestEditorFn) *astrocore.GetDeploymentOptionsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetDeploymentOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDraftInvoiceWithResponse provides a mock function with given fields: ctx, orgShortNameId, reqEditors
func (_m *ClientWithResponsesInterface) GetDraftInvoiceWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetDraftInvoiceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetDraftInvoiceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) (*astrocore.GetDraftInvoiceResponse, error)); ok {
		return rf(ctx, orgShortNameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) *astrocore.GetDraftInvoiceResponse); ok {
		r0 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetDraftInvoiceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagedDomainWithResponse provides a mock function with given fields: ctx, orgShortNameId, domainId, reqEditors
func (_m *ClientWithResponsesInterface) GetManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetManagedDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, domainId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetManagedDomainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetManagedDomainResponse, error)); ok {
		return rf(ctx, orgShortNameId, domainId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetManagedDomainResponse); ok {
		r0 = rf(ctx, orgShortNameId, domainId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetManagedDomainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, domainId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetronomeDashboardWithResponse provides a mock function with given fields: ctx, orgShortNameId, pType, params, reqEditors
func (_m *ClientWithResponsesInterface) GetMetronomeDashboardWithResponse(ctx context.Context, orgShortNameId string, pType astrocore.GetMetronomeDashboardParamsType, params *astrocore.GetMetronomeDashboardParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetMetronomeDashboardResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, pType, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetMetronomeDashboardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.GetMetronomeDashboardParamsType, *astrocore.GetMetronomeDashboardParams, ...astrocore.RequestEditorFn) (*astrocore.GetMetronomeDashboardResponse, error)); ok {
		return rf(ctx, orgShortNameId, pType, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.GetMetronomeDashboardParamsType, *astrocore.GetMetronomeDashboardParams, ...astrocore.RequestEditorFn) *astrocore.GetMetronomeDashboardResponse); ok {
		r0 = rf(ctx, orgShortNameId, pType, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetMetronomeDashboardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.GetMetronomeDashboardParamsType, *astrocore.GetMetronomeDashboardParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, pType, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationApiTokenWithResponse provides a mock function with given fields: ctx, orgShortNameId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) GetOrganizationApiTokenWithResponse(ctx context.Context, orgShortNameId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationAuditLogsWithResponse provides a mock function with given fields: ctx, orgShortNameId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetOrganizationAuditLogsWithResponse(ctx context.Context, orgShortNameId string, params *astrocore.GetOrganizationAuditLogsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationAuditLogsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetOrganizationAuditLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.GetOrganizationAuditLogsParams, ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationAuditLogsResponse, error)); ok {
		return rf(ctx, orgShortNameId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.GetOrganizationAuditLogsParams, ...astrocore.RequestEditorFn) *astrocore.GetOrganizationAuditLogsResponse); ok {
		r0 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetOrganizationAuditLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.GetOrganizationAuditLogsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationWithResponse provides a mock function with given fields: ctx, orgShortNameId, params, reqEditors
func (_m *ClientWithResponsesInterface) GetOrganizationWithResponse(ctx context.Context, orgShortNameId string, params *astrocore.GetOrganizationParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.GetOrganizationParams, ...astrocore.RequestEditorFn) (*astrocore.GetOrganizationResponse, error)); ok {
		return rf(ctx, orgShortNameId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.GetOrganizationParams, ...astrocore.RequestEditorFn) *astrocore.GetOrganizationResponse); ok {
		r0 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.GetOrganizationParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentMethodWithResponse provides a mock function with given fields: ctx, orgShortNameId, reqEditors
func (_m *ClientWithResponsesInterface) GetPaymentMethodWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetPaymentMethodResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetPaymentMethodResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) (*astrocore.GetPaymentMethodResponse, error)); ok {
		return rf(ctx, orgShortNameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) *astrocore.GetPaymentMethodResponse); ok {
		r0 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetPaymentMethodResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSelfUserWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) GetSelfUserWithResponse(ctx context.Context, params *astrocore.GetSelfUserParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetSelfUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetSelfUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetSelfUserParams, ...astrocore.RequestEditorFn) (*astrocore.GetSelfUserResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetSelfUserParams, ...astrocore.RequestEditorFn) *astrocore.GetSelfUserResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetSelfUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *astrocore.GetSelfUserParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSharedClusterWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) GetSharedClusterWithResponse(ctx context.Context, params *astrocore.GetSharedClusterParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetSharedClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetSharedClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetSharedClusterParams, ...astrocore.RequestEditorFn) (*astrocore.GetSharedClusterResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.GetSharedClusterParams, ...astrocore.RequestEditorFn) *astrocore.GetSharedClusterResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetSharedClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *astrocore.GetSharedClusterParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSsoBypassKeyWithResponse provides a mock function with given fields: ctx, orgShortNameId, reqEditors
func (_m *ClientWithResponsesInterface) GetSsoBypassKeyWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetSsoBypassKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetSsoBypassKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) (*astrocore.GetSsoBypassKeyResponse, error)); ok {
		return rf(ctx, orgShortNameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) *astrocore.GetSsoBypassKeyResponse); ok {
		r0 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetSsoBypassKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSsoConnectionWithResponse provides a mock function with given fields: ctx, orgShortNameId, connectionId, reqEditors
func (_m *ClientWithResponsesInterface) GetSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, connectionId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetSsoConnectionResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, connectionId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetSsoConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetSsoConnectionResponse, error)); ok {
		return rf(ctx, orgShortNameId, connectionId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetSsoConnectionResponse); ok {
		r0 = rf(ctx, orgShortNameId, connectionId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetSsoConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, connectionId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStripeClientSecretWithResponse provides a mock function with given fields: ctx, orgShortNameId, pType, reqEditors
func (_m *ClientWithResponsesInterface) GetStripeClientSecretWithResponse(ctx context.Context, orgShortNameId string, pType astrocore.GetStripeClientSecretParamsType, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetStripeClientSecretResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, pType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetStripeClientSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.GetStripeClientSecretParamsType, ...astrocore.RequestEditorFn) (*astrocore.GetStripeClientSecretResponse, error)); ok {
		return rf(ctx, orgShortNameId, pType, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.GetStripeClientSecretParamsType, ...astrocore.RequestEditorFn) *astrocore.GetStripeClientSecretResponse); ok {
		r0 = rf(ctx, orgShortNameId, pType, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetStripeClientSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.GetStripeClientSecretParamsType, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, pType, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamWithResponse provides a mock function with given fields: ctx, orgShortNameId, teamId, reqEditors
func (_m *ClientWithResponsesInterface) GetTeamWithResponse(ctx context.Context, orgShortNameId string, teamId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetTeamResponse, error)); ok {
		return rf(ctx, orgShortNameId, teamId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetTeamResponse); ok {
		r0 = rf(ctx, orgShortNameId, teamId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, teamId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInviteWithResponse provides a mock function with given fields: ctx, inviteId, reqEditors
func (_m *ClientWithResponsesInterface) GetUserInviteWithResponse(ctx context.Context, inviteId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, inviteId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) (*astrocore.GetUserInviteResponse, error)); ok {
		return rf(ctx, inviteId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) *astrocore.GetUserInviteResponse); ok {
		r0 = rf(ctx, inviteId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, inviteId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWithResponse provides a mock function with given fields: ctx, orgShortNameId, userId, reqEditors
func (_m *ClientWithResponsesInterface) GetUserWithResponse(ctx context.Context, orgShortNameId string, userId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetUserResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetUserResponse, error)); ok {
		return rf(ctx, orgShortNameId, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetUserResponse); ok {
		r0 = rf(ctx, orgShortNameId, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceApiTokenWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) GetWorkspaceApiTokenWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.GetWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, reqEditors
func (_m *ClientWithResponsesInterface) GetWorkspaceWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.GetWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.GetWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.GetWorkspaceResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.GetWorkspaceResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.GetWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClustersWithResponse provides a mock function with given fields: ctx, orgShortNameId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListClustersWithResponse(ctx context.Context, orgShortNameId string, params *astrocore.ListClustersParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListClustersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListClustersParams, ...astrocore.RequestEditorFn) (*astrocore.ListClustersResponse, error)); ok {
		return rf(ctx, orgShortNameId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListClustersParams, ...astrocore.RequestEditorFn) *astrocore.ListClustersResponse); ok {
		r0 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListClustersParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagedDomainsWithResponse provides a mock function with given fields: ctx, orgShortNameId, reqEditors
func (_m *ClientWithResponsesInterface) ListManagedDomainsWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListManagedDomainsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListManagedDomainsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) (*astrocore.ListManagedDomainsResponse, error)); ok {
		return rf(ctx, orgShortNameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) *astrocore.ListManagedDomainsResponse); ok {
		r0 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListManagedDomainsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrgUsersWithResponse provides a mock function with given fields: ctx, orgShortNameId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrgUsersWithResponse(ctx context.Context, orgShortNameId string, params *astrocore.ListOrgUsersParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListOrgUsersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListOrgUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrgUsersParams, ...astrocore.RequestEditorFn) (*astrocore.ListOrgUsersResponse, error)); ok {
		return rf(ctx, orgShortNameId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrgUsersParams, ...astrocore.RequestEditorFn) *astrocore.ListOrgUsersResponse); ok {
		r0 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListOrgUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListOrgUsersParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationApiTokensWithResponse provides a mock function with given fields: ctx, orgShortNameId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrganizationApiTokensWithResponse(ctx context.Context, orgShortNameId string, params *astrocore.ListOrganizationApiTokensParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationApiTokensResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListOrganizationApiTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrganizationApiTokensParams, ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationApiTokensResponse, error)); ok {
		return rf(ctx, orgShortNameId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrganizationApiTokensParams, ...astrocore.RequestEditorFn) *astrocore.ListOrganizationApiTokensResponse); ok {
		r0 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListOrganizationApiTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListOrganizationApiTokensParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationAuthIdsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrganizationAuthIdsWithResponse(ctx context.Context, params *astrocore.ListOrganizationAuthIdsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationAuthIdsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListOrganizationAuthIdsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.ListOrganizationAuthIdsParams, ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationAuthIdsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.ListOrganizationAuthIdsParams, ...astrocore.RequestEditorFn) *astrocore.ListOrganizationAuthIdsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListOrganizationAuthIdsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *astrocore.ListOrganizationAuthIdsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationTeamsWithResponse provides a mock function with given fields: ctx, orgShortNameId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrganizationTeamsWithResponse(ctx context.Context, orgShortNameId string, params *astrocore.ListOrganizationTeamsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationTeamsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListOrganizationTeamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrganizationTeamsParams, ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationTeamsResponse, error)); ok {
		return rf(ctx, orgShortNameId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListOrganizationTeamsParams, ...astrocore.RequestEditorFn) *astrocore.ListOrganizationTeamsResponse); ok {
		r0 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListOrganizationTeamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListOrganizationTeamsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) ListOrganizationsWithResponse(ctx context.Context, params *astrocore.ListOrganizationsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListOrganizationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.ListOrganizationsParams, ...astrocore.RequestEditorFn) (*astrocore.ListOrganizationsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *astrocore.ListOrganizationsParams, ...astrocore.RequestEditorFn) *astrocore.ListOrganizationsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListOrganizationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *astrocore.ListOrganizationsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSsoConnectionsWithResponse provides a mock function with given fields: ctx, orgShortNameId, reqEditors
func (_m *ClientWithResponsesInterface) ListSsoConnectionsWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListSsoConnectionsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListSsoConnectionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) (*astrocore.ListSsoConnectionsResponse, error)); ok {
		return rf(ctx, orgShortNameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) *astrocore.ListSsoConnectionsResponse); ok {
		r0 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListSsoConnectionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceApiTokensWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspaceApiTokensWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, params *astrocore.ListWorkspaceApiTokensParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceApiTokensResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspaceApiTokensResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceApiTokensParams, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceApiTokensResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceApiTokensParams, ...astrocore.RequestEditorFn) *astrocore.ListWorkspaceApiTokensResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspaceApiTokensResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListWorkspaceApiTokensParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceDagFiltersWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspaceDagFiltersWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceDagFiltersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspaceDagFiltersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceDagFiltersResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.ListWorkspaceDagFiltersResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspaceDagFiltersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceDagsWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspaceDagsWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, params *astrocore.ListWorkspaceDagsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceDagsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspaceDagsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceDagsParams, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceDagsResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceDagsParams, ...astrocore.RequestEditorFn) *astrocore.ListWorkspaceDagsResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspaceDagsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListWorkspaceDagsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceTeamsWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspaceTeamsWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, params *astrocore.ListWorkspaceTeamsParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceTeamsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspaceTeamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceTeamsParams, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceTeamsResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceTeamsParams, ...astrocore.RequestEditorFn) *astrocore.ListWorkspaceTeamsResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspaceTeamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListWorkspaceTeamsParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceUsersWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspaceUsersWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, params *astrocore.ListWorkspaceUsersParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceUsersResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspaceUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceUsersParams, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspaceUsersResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *astrocore.ListWorkspaceUsersParams, ...astrocore.RequestEditorFn) *astrocore.ListWorkspaceUsersResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspaceUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *astrocore.ListWorkspaceUsersParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspacesWithResponse provides a mock function with given fields: ctx, orgShortNameId, params, reqEditors
func (_m *ClientWithResponsesInterface) ListWorkspacesWithResponse(ctx context.Context, orgShortNameId string, params *astrocore.ListWorkspacesParams, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ListWorkspacesResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ListWorkspacesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListWorkspacesParams, ...astrocore.RequestEditorFn) (*astrocore.ListWorkspacesResponse, error)); ok {
		return rf(ctx, orgShortNameId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *astrocore.ListWorkspacesParams, ...astrocore.RequestEditorFn) *astrocore.ListWorkspacesResponse); ok {
		r0 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ListWorkspacesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *astrocore.ListWorkspacesParams, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateOrgUserRoleWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, userId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateOrgUserRoleWithBodyWithResponse(ctx context.Context, orgShortNameId string, userId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateOrgUserRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, userId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateOrgUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.MutateOrgUserRoleResponse, error)); ok {
		return rf(ctx, orgShortNameId, userId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.MutateOrgUserRoleResponse); ok {
		r0 = rf(ctx, orgShortNameId, userId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateOrgUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, userId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateOrgUserRoleWithResponse provides a mock function with given fields: ctx, orgShortNameId, userId, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateOrgUserRoleWithResponse(ctx context.Context, orgShortNameId string, userId string, body astrocore.MutateOrgUserRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateOrgUserRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, userId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateOrgUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.MutateOrgUserRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.MutateOrgUserRoleResponse, error)); ok {
		return rf(ctx, orgShortNameId, userId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.MutateOrgUserRoleRequest, ...astrocore.RequestEditorFn) *astrocore.MutateOrgUserRoleResponse); ok {
		r0 = rf(ctx, orgShortNameId, userId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateOrgUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.MutateOrgUserRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, userId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateWorkspaceTeamRoleWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateWorkspaceTeamRoleWithBodyWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, teamId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceTeamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateWorkspaceTeamRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceTeamRoleResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.MutateWorkspaceTeamRoleResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateWorkspaceTeamRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateWorkspaceTeamRoleWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateWorkspaceTeamRoleWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, teamId string, body astrocore.MutateWorkspaceTeamRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceTeamRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateWorkspaceTeamRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateWorkspaceTeamRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceTeamRoleResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateWorkspaceTeamRoleRequest, ...astrocore.RequestEditorFn) *astrocore.MutateWorkspaceTeamRoleResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateWorkspaceTeamRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.MutateWorkspaceTeamRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateWorkspaceUserRoleWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, userId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateWorkspaceUserRoleWithBodyWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, userId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceUserRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, userId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateWorkspaceUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceUserRoleResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, userId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.MutateWorkspaceUserRoleResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, userId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateWorkspaceUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, userId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutateWorkspaceUserRoleWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, userId, body, reqEditors
func (_m *ClientWithResponsesInterface) MutateWorkspaceUserRoleWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, userId string, body astrocore.MutateWorkspaceUserRoleRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceUserRoleResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, userId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.MutateWorkspaceUserRoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateWorkspaceUserRoleRequest, ...astrocore.RequestEditorFn) (*astrocore.MutateWorkspaceUserRoleResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, userId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.MutateWorkspaceUserRoleRequest, ...astrocore.RequestEditorFn) *astrocore.MutateWorkspaceUserRoleResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, userId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.MutateWorkspaceUserRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.MutateWorkspaceUserRoleRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, userId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTeamMemberWithResponse provides a mock function with given fields: ctx, orgShortNameId, teamId, memberId, reqEditors
func (_m *ClientWithResponsesInterface) RemoveTeamMemberWithResponse(ctx context.Context, orgShortNameId string, teamId string, memberId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.RemoveTeamMemberResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, teamId, memberId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.RemoveTeamMemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.RemoveTeamMemberResponse, error)); ok {
		return rf(ctx, orgShortNameId, teamId, memberId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.RemoveTeamMemberResponse); ok {
		r0 = rf(ctx, orgShortNameId, teamId, memberId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.RemoveTeamMemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, teamId, memberId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateOrganizationApiTokenWithResponse provides a mock function with given fields: ctx, orgShortNameId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) RotateOrganizationApiTokenWithResponse(ctx context.Context, orgShortNameId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.RotateOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.RotateOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.RotateOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.RotateOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.RotateOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateWorkspaceApiTokenWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors
func (_m *ClientWithResponsesInterface) RotateWorkspaceApiTokenWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, apiTokenId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.RotateWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, apiTokenId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.RotateWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) (*astrocore.RotateWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) *astrocore.RotateWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.RotateWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, apiTokenId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAwsClusterWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, clusterId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateAwsClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateAwsClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateAwsClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateAwsClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateAwsClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateAwsClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAwsClusterWithResponse provides a mock function with given fields: ctx, orgShortNameId, clusterId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateAwsClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, body astrocore.UpdateAwsClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateAwsClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateAwsClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateAwsClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateAwsClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateAwsClusterRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateAwsClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateAwsClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateAwsClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAzureClusterWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, clusterId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateAzureClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateAzureClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateAzureClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateAzureClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateAzureClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateAzureClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAzureClusterWithResponse provides a mock function with given fields: ctx, orgShortNameId, clusterId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateAzureClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, body astrocore.UpdateAzureClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateAzureClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateAzureClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateAzureClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateAzureClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateAzureClusterRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateAzureClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateAzureClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateAzureClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGcpClusterWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, clusterId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateGcpClusterWithBodyWithResponse(ctx context.Context, orgShortNameId string, clusterId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateGcpClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, clusterId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateGcpClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateGcpClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateGcpClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateGcpClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, clusterId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGcpClusterWithResponse provides a mock function with given fields: ctx, orgShortNameId, clusterId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateGcpClusterWithResponse(ctx context.Context, orgShortNameId string, clusterId string, body astrocore.UpdateGcpClusterRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateGcpClusterResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, clusterId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateGcpClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateGcpClusterRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateGcpClusterResponse, error)); ok {
		return rf(ctx, orgShortNameId, clusterId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateGcpClusterRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateGcpClusterResponse); ok {
		r0 = rf(ctx, orgShortNameId, clusterId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateGcpClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateGcpClusterRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, clusterId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManagedDomainWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, domainId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateManagedDomainWithBodyWithResponse(ctx context.Context, orgShortNameId string, domainId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateManagedDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, domainId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateManagedDomainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateManagedDomainResponse, error)); ok {
		return rf(ctx, orgShortNameId, domainId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateManagedDomainResponse); ok {
		r0 = rf(ctx, orgShortNameId, domainId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateManagedDomainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, domainId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManagedDomainWithResponse provides a mock function with given fields: ctx, orgShortNameId, domainId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, body astrocore.UpdateManagedDomainRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateManagedDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, domainId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateManagedDomainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateManagedDomainRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateManagedDomainResponse, error)); ok {
		return rf(ctx, orgShortNameId, domainId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateManagedDomainRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateManagedDomainResponse); ok {
		r0 = rf(ctx, orgShortNameId, domainId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateManagedDomainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateManagedDomainRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, domainId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, apiTokenId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationApiTokenWithBodyWithResponse(ctx context.Context, orgShortNameId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, apiTokenId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, apiTokenId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, apiTokenId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, apiTokenId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationApiTokenWithResponse provides a mock function with given fields: ctx, orgShortNameId, apiTokenId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationApiTokenWithResponse(ctx context.Context, orgShortNameId string, apiTokenId string, body astrocore.UpdateOrganizationApiTokenRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, apiTokenId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateOrganizationApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, apiTokenId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateOrganizationApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, apiTokenId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateOrganizationApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateOrganizationApiTokenRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, apiTokenId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateOrganizationResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateOrganizationWithResponse(ctx context.Context, orgShortNameId string, body astrocore.UpdateOrganizationRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateOrganizationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.UpdateOrganizationRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateOrganizationResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.UpdateOrganizationRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateOrganizationResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateOrganizationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.UpdateOrganizationRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSelfUserInviteWithBodyWithResponse provides a mock function with given fields: ctx, inviteId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateSelfUserInviteWithBodyWithResponse(ctx context.Context, inviteId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateSelfUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, inviteId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateSelfUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateSelfUserInviteResponse, error)); ok {
		return rf(ctx, inviteId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateSelfUserInviteResponse); ok {
		r0 = rf(ctx, inviteId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateSelfUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, inviteId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSelfUserInviteWithResponse provides a mock function with given fields: ctx, inviteId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateSelfUserInviteWithResponse(ctx context.Context, inviteId string, body astrocore.UpdateInviteRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateSelfUserInviteResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, inviteId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateSelfUserInviteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.UpdateInviteRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateSelfUserInviteResponse, error)); ok {
		return rf(ctx, inviteId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.UpdateInviteRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateSelfUserInviteResponse); ok {
		r0 = rf(ctx, inviteId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateSelfUserInviteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.UpdateInviteRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, inviteId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSsoConnectionWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, connectionId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateSsoConnectionWithBodyWithResponse(ctx context.Context, orgShortNameId string, connectionId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateSsoConnectionResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, connectionId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateSsoConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateSsoConnectionResponse, error)); ok {
		return rf(ctx, orgShortNameId, connectionId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateSsoConnectionResponse); ok {
		r0 = rf(ctx, orgShortNameId, connectionId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateSsoConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, connectionId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSsoConnectionWithResponse provides a mock function with given fields: ctx, orgShortNameId, connectionId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateSsoConnectionWithResponse(ctx context.Context, orgShortNameId string, connectionId string, body astrocore.UpdateSsoConnectionRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateSsoConnectionResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, connectionId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateSsoConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateSsoConnectionRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateSsoConnectionResponse, error)); ok {
		return rf(ctx, orgShortNameId, connectionId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateSsoConnectionRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateSsoConnectionResponse); ok {
		r0 = rf(ctx, orgShortNameId, connectionId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateSsoConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateSsoConnectionRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, connectionId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeamWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, teamId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateTeamWithBodyWithResponse(ctx context.Context, orgShortNameId string, teamId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, teamId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateTeamResponse, error)); ok {
		return rf(ctx, orgShortNameId, teamId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateTeamResponse); ok {
		r0 = rf(ctx, orgShortNameId, teamId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, teamId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeamWithResponse provides a mock function with given fields: ctx, orgShortNameId, teamId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateTeamWithResponse(ctx context.Context, orgShortNameId string, teamId string, body astrocore.UpdateTeamRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateTeamResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, teamId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateTeamResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateTeamRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateTeamResponse, error)); ok {
		return rf(ctx, orgShortNameId, teamId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.UpdateTeamRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateTeamResponse); ok {
		r0 = rf(ctx, orgShortNameId, teamId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateTeamResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.UpdateTeamRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, teamId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, apiTokenId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceApiTokenWithBodyWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, apiTokenId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, apiTokenId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, apiTokenId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, apiTokenId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, apiTokenId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceApiTokenWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, apiTokenId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceApiTokenWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, apiTokenId string, body astrocore.UpdateWorkspaceApiTokenRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceApiTokenResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, apiTokenId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateWorkspaceApiTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.UpdateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceApiTokenResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, apiTokenId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, astrocore.UpdateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateWorkspaceApiTokenResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, apiTokenId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateWorkspaceApiTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, astrocore.UpdateWorkspaceApiTokenRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, apiTokenId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.UpdateWorkspaceResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceWithResponse provides a mock function with given fields: ctx, orgShortNameId, workspaceId, body, reqEditors
func (_m *ClientWithResponsesInterface) UpdateWorkspaceWithResponse(ctx context.Context, orgShortNameId string, workspaceId string, body astrocore.MutateWorkspaceRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, workspaceId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpdateWorkspaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.MutateWorkspaceRequest, ...astrocore.RequestEditorFn) (*astrocore.UpdateWorkspaceResponse, error)); ok {
		return rf(ctx, orgShortNameId, workspaceId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, astrocore.MutateWorkspaceRequest, ...astrocore.RequestEditorFn) *astrocore.UpdateWorkspaceResponse); ok {
		r0 = rf(ctx, orgShortNameId, workspaceId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpdateWorkspaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, astrocore.MutateWorkspaceRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, workspaceId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertSsoBypassKeyWithResponse provides a mock function with given fields: ctx, orgShortNameId, reqEditors
func (_m *ClientWithResponsesInterface) UpsertSsoBypassKeyWithResponse(ctx context.Context, orgShortNameId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.UpsertSsoBypassKeyResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.UpsertSsoBypassKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) (*astrocore.UpsertSsoBypassKeyResponse, error)); ok {
		return rf(ctx, orgShortNameId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...astrocore.RequestEditorFn) *astrocore.UpsertSsoBypassKeyResponse); ok {
		r0 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.UpsertSsoBypassKeyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateCreditCardPaymentWithBodyWithResponse provides a mock function with given fields: ctx, orgShortNameId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ValidateCreditCardPaymentWithBodyWithResponse(ctx context.Context, orgShortNameId string, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ValidateCreditCardPaymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ValidateCreditCardPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.ValidateCreditCardPaymentResponse, error)); ok {
		return rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.ValidateCreditCardPaymentResponse); ok {
		r0 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ValidateCreditCardPaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateCreditCardPaymentWithResponse provides a mock function with given fields: ctx, orgShortNameId, body, reqEditors
func (_m *ClientWithResponsesInterface) ValidateCreditCardPaymentWithResponse(ctx context.Context, orgShortNameId string, body astrocore.ValidateCreditCardPaymentRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ValidateCreditCardPaymentResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ValidateCreditCardPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.ValidateCreditCardPaymentRequest, ...astrocore.RequestEditorFn) (*astrocore.ValidateCreditCardPaymentResponse, error)); ok {
		return rf(ctx, orgShortNameId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, astrocore.ValidateCreditCardPaymentRequest, ...astrocore.RequestEditorFn) *astrocore.ValidateCreditCardPaymentResponse); ok {
		r0 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ValidateCreditCardPaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, astrocore.ValidateCreditCardPaymentRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateSsoLoginWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ValidateSsoLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ValidateSsoLoginResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ValidateSsoLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...astrocore.RequestEditorFn) (*astrocore.ValidateSsoLoginResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...astrocore.RequestEditorFn) *astrocore.ValidateSsoLoginResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ValidateSsoLoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateSsoLoginWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) ValidateSsoLoginWithResponse(ctx context.Context, body astrocore.ValidateSsoLoginRequest, reqEditors ...astrocore.RequestEditorFn) (*astrocore.ValidateSsoLoginResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.ValidateSsoLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, astrocore.ValidateSsoLoginRequest, ...astrocore.RequestEditorFn) (*astrocore.ValidateSsoLoginResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, astrocore.ValidateSsoLoginRequest, ...astrocore.RequestEditorFn) *astrocore.ValidateSsoLoginResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.ValidateSsoLoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, astrocore.ValidateSsoLoginRequest, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyManagedDomainWithResponse provides a mock function with given fields: ctx, orgShortNameId, domainId, reqEditors
func (_m *ClientWithResponsesInterface) VerifyManagedDomainWithResponse(ctx context.Context, orgShortNameId string, domainId string, reqEditors ...astrocore.RequestEditorFn) (*astrocore.VerifyManagedDomainResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgShortNameId, domainId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astrocore.VerifyManagedDomainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) (*astrocore.VerifyManagedDomainResponse, error)); ok {
		return rf(ctx, orgShortNameId, domainId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...astrocore.RequestEditorFn) *astrocore.VerifyManagedDomainResponse); ok {
		r0 = rf(ctx, orgShortNameId, domainId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astrocore.VerifyManagedDomainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...astrocore.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgShortNameId, domainId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientWithResponsesInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientWithResponsesInterface(t mockConstructorTestingTNewClientWithResponsesInterface) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
